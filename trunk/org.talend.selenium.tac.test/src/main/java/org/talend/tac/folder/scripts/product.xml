<project name="product" default="os" basedir=".">

	<!-- This is for 'for' -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- check os -->
    <target name="os">
    	<condition property="is.unix">
    		<os family="unix"/>
    	</condition>
    	<condition property="is.windows">
    		<os family="windows"/>
    	</condition>
    	
    	<echo>
    		os.name=${os.name}
    		os.arch=${os.arch}
    		os.version=${os.version}
    		
    		is.unix=${is.unix}
    		is.windows=${is.windows}
    	</echo>
    </target>
	
	
	<target name="download-product-windows" depends="os" if="is.windows" description="download products from samba server">
		<echo>${product.talend-all}</echo>
		<echo>${product.products.home}</echo>
		<copy todir="${product.products.home}" overwrite="false">
			<fileset dir="${samba.server}">
				<include name="${product.tac}"/>
				<include name="${product.talend-all}"/>
				<include name="${product.jobserver}"/>
				<include name="${product.soamanager}"/>
			</fileset>
		</copy>
		<echo>Download products from samba server!</echo>
	</target>
	
	<target name="download-product-mount" depends="os" if="is.unix" description="download products from samba server">
		<echo>${product.talend-all}</echo>
		<copy todir="${product.products.home}" overwrite="false">
			<fileset dir="${samba.mount.home}">
				<include name="${product.tac}"/>
				<include name="${product.talend-all}"/>
				<include name="${product.jobserver}"/>
				<include name="${product.soamanager}"/>
			</fileset>
		</copy>
		<echo>Download products from samba server!</echo>
    	<echo> mount - release.version -- ${release.version}</echo>
    	<echo> mount -build.version -- ${build.version}</echo>
	</target>
	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: download-latest-build-ftp                      
         - - - - - - - - - - - - - - - - - -->
    <target name="download-latest-build-ftp">
    	<mkdir dir="${product.products.home}/tmp"/>
    	<trycatch>
			<try>
				<echo>get products from ftp --- downloading</echo>
				<ftp action="get"
					server="${ftp.server}"
					userid="${ftp.userid}"
					password="${ftp.password}"
					remotedir="${ftp.dir}">
					<fileset dir="${product.products.home}/tmp">
						<include name="**/${product.tac}"/>
						<include name="**/${product.talend-all}"/>
						<include name="**/${product.jobserver}"/>
						<include name="**/${product.soamanager}"/>
					</fileset>
				</ftp>
			</try>
			<catch>
				<echo>Couldn't donwload -- products</echo>
			</catch>
			<finally>
				<echo>Finally for FTP Products!</echo>
			</finally>
		</trycatch>
    	
	  	  <move todir="${product.products.home}" flatten="true" overwrite="false">
	  	    <fileset dir="${product.products.home}/tmp">
	  	    	<include name="**/${product.tac}"/>
	  	    	<include name="**/${product.talend-all}"/>
	  	    	<include name="**/${product.jobserver}"/>
	  	    	<include name="**/${product.soamanager}"/>
	  	    </fileset>
	  	  </move>
			<delete includeemptydirs="true" dir="${product.products.home}/tmp"/>
	    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: download-products                      
         - - - - - - - - - - - - - - - - - -->
    <target name="download-products">
		<if>
			<equals arg1="${download.from.ftp}" arg2="true" />
				<then>
					<echo message="Download products from ftp server" />
					<antcall target="download-latest-build-ftp"/>
				</then>
			<else>
				<echo message="Download products from samba server" />
				<antcall target="download-product-windows"/>
				<antcall target="download-product-mount"/>				
			</else>
		</if>
    </target>

	<!-- ================================= 
          target: check-tac-downloaded              
         ================================= -->
    <target name="check-tac-downloaded"
    	description="check-tac-downloaded">
        <condition property="product-tac-available">
        		<available file="${product.tac}" filepath="${product.products.home}"/>
        </condition>
    </target>
	<!-- ================================= 
          target: unzip-tac   
         ================================= -->
    <target name="unzip-tac">
    	<fail unless="product-tac-available" message="There no TAC product, stop the tests!"/>
        <unzip dest="${product.target.home}" overwrite="true">
        	<fileset dir="${product.products.home}">
				<include name="${product.tac}"/>
			</fileset>
        </unzip>
    </target>
	
	<!-- ================================= 
          target: unzip-jobserver   
         ================================= -->
    <target name="unzip-jobserver" description="unzip jobserver">
    	<if>
    		<isset property="product-jobserver-available"/>
    		<then>
    	        <unzip dest="${product.target.home}" overwrite="false">
    	        	<fileset dir="${product.products.home}">
    					<include name="${product.jobserver}"/>
    				</fileset>
    	        </unzip>
    		</then>
    		<else>
    			<echo>product-jobserver-available not available! Can not unzip product!</echo>
    		</else>
    	</if>

    </target>
	
	<!-- ================================= 
          target: check-talend-all-downloaded              
         ================================= -->
    <target name="check-talend-all-downloaded"
    	description="check-talend-all-downloaded">
        <condition property="product.talend.all.available">
        		<available file="${product.talend-all}" filepath="${product.products.home}"/>
        </condition>
    </target>
	
	
	<!-- commandline configuration -->
	<target name="copy_commandlines">  
		<copyfile src="${talend-all.home}/commandline.bat" dest="${talend-all.home}/commandline_${commandline.append}.bat" />
		<copyfile src="${talend-all.home}/commandline.sh" dest="${talend-all.home}/commandline_${commandline.append}.sh" />
	</target> 
	
	<target name="modify_commandline">  
		<replaceregexp file="${talend-all.home}/${commandline.launcher}" 
    		match="8002" 
    		replace="${commandline.port}" 
    		byline="true">
    	</replaceregexp>
		<replaceregexp file="${talend-all.home}/${commandline.launcher}" 
    		match="commandline-workspace" 
    		replace="${commandline.workspace}" 
    		byline="true">
    	</replaceregexp>
	</target> 
	
	<target name="modify_commandlines">
		<foreach list="${commandline.one.append},${commandline.two.append}"
			target="copy_commandlines" param="commandline.append" delimiter=",">
		</foreach>  
		<antcall target="modify_commandline">
			<param name="commandline.launcher" value="commandline_${commandline.one.append}.bat"/>
			<param name="commandline.port" value="${commandLine.conf.port}"/>
			<param name="commandline.workspace" value="commandline-${commandline.one.append}-workspace"/>
		</antcall>
		<antcall target="modify_commandline">
			<param name="commandline.launcher" value="commandline_${commandline.one.append}.sh"/>
			<param name="commandline.port" value="${commandLine.conf.port}"/>
			<param name="commandline.workspace" value="commandline-${commandline.one.append}-workspace"/>
		</antcall>
		<antcall target="modify_commandline">
			<param name="commandline.launcher" value="commandline_${commandline.two.append}.bat"/>
			<param name="commandline.port" value="${commandLine.secondary.conf.port}"/>
			<param name="commandline.workspace" value="commandline-${commandline.two.append}-workspace"/>
		</antcall>
		<antcall target="modify_commandline">
			<param name="commandline.launcher" value="commandline_${commandline.two.append}.sh"/>
			<param name="commandline.port" value="${commandLine.secondary.conf.port}"/>
			<param name="commandline.workspace" value="commandline-${commandline.two.append}-workspace"/>
		</antcall>		
		
	</target> 
	<!-- ================================= 
          target: unzip-talend-all   
         ================================= -->
    <target name="unzip-talend-all" description="unzip talend all">
    	<if>
    		<isset property="product-talend-all-available"/>
    		<then>
    	        <unzip dest="${product.target.home}" overwrite="false">
    	        	<fileset dir="${product.products.home}">
    	        		<include name="${product.talend-all}"/>
    				</fileset>
    	        </unzip>
    			<echo>Configuration two comandlines!</echo>
    			<antcall target="modify_commandlines"/>
    		</then>
    		<else>
    			<echo>product-talend-all-available not available! Can not unzip product!</echo>
    		</else>
    	</if>
    	
    </target>
	
	<!-- ================================= 
          target: unzip-talend-all   
         ================================= -->
    <target name="copy-soamanger" description="Copy soa manager">
    	<if>
    		<isset property="product-soamanager-available"/>
    		<then>
    			<copy todir="${product.target.home}" overwrite="false">
    				<fileset dir="${product.products.home}">
    					<include name="${product.soamanager}"/>
    				</fileset>
    			</copy>
    			<echo>Copy soamanager to product-target</echo>
    		</then>
    		<else>
    			<echo>product-soamanager-available not available! Copy product!</echo>
    		</else>
    	</if>
    </target>
	
	<!-- ================================= 
          target: unzip    
         ================================= -->
    <target name="unzip-products" description="unzip products">
    	<antcall target="unzip-tac"/>
    	<antcall target="unzip-jobserver"/>
    	<antcall target="unzip-talend-all">
    		<param name="talend-all.home" value="${talend-all.home}"/>
    		<param name="talend-all.home" value="${talend-all.home}"/>
    		<param name="talend-all.home" value="${talend-all.home}"/>
    		<param name="talend-all.home" value="${talend-all.home}"/>
    		<param name="talend-all.home" value="${talend-all.home}"/>
    	</antcall>
    	<antcall target="copy-soamanger"/>
    </target>
	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: remove-tac-data                      
         - - - - - - - - - - - - - - - - - -->
    <target name="remove-tac-data" description="remove tac from tomcat's webapps and database">
    	<delete file="${tomcat.home}/webapps/org.talend.administrator.war"/>
    	<echo>Deleted org.talend.administrator.war from tomcat webapps!</echo>
    	<delete dir="${tomcat.home}/webapps/org.talend.administrator"/>
    	<echo>Deleted org.talend.administrator directory from tomcat webapps!</echo>
    	<delete dir="${database.home}"/>
    	<echo>Deleted old database!</echo>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copy-file              
         - - - - - - - - - - - - - - - - - -->
    <target name="remove-dirty-datas">
    	
    	<!--
		<copy todir="${tomcat.home}/webapps">
			<fileset dir="${tac.home}">
				<include name="org.talend.administrator.war"/>
			</fileset>
		</copy>
    	<echo>Copy org.talend.administrator.war to tomcat webapps!</echo>    	
    	-->
    	
    	<rename src="${tac.home}/org.talend.administrator.war" dest="${tac.home}/org.talend.administrator.old.war"/>
    	<jar destfile="${tac.home}/org.talend.administrator.war">
    		<zipfileset src="${tac.home}/org.talend.administrator.old.war" excludes="WEB-INF\database\**\*"/>
    	</jar>
    	<echo>Remove old dirty datas from war file!</echo>
    	<delete file="${tac.home}/org.talend.administrator.old.war"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: copy-file              
         - - - - - - - - - - - - - - - - - -->
    <target name="copy-file">
		<copy todir="${tomcat.home}/webapps">
			<fileset dir="${tac.home}">
				<include name="org.talend.administrator.war"/>
			</fileset>
		</copy>
    	<echo>Copy org.talend.administrator.war to tomcat webapps!</echo>    	
    	
    	<rename src="${tomcat.home}/webapps/org.talend.administrator.war" dest="${tomcat.home}/webapps/org.talend.administrator.old.war"/>
    	
    	
    	<jar destfile="${tomcat.home}/webapps/org.talend.administrator.war">
    		<zipfileset src="${tomcat.home}/webapps/org.talend.administrator.old.war" excludes="WEB-INF\database\**\*"/>
    	</jar>
    	<echo>Remove old dirty datas from war file!</echo>
    	<delete file="${tomcat.home}/webapps/org.talend.administrator.old.war"/>
    	
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: product                      
         - - - - - - - - - - - - - - - - - -->
    <target name="product">
    	<echo> product - release.version -- ${release.version}</echo>
    	<echo> product -build.version -- ${build.version}</echo>
    	<antcall target="download-products"/>
    	<antcall target="unzip-products"/>
    </target>

</project>
