<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Map
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
        
List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String loopQuery = ElementParameterParser.getValue(node, "__LOOP_QUERY__"); 

String filename = ElementParameterParser.getValue(node, "__FILENAME__");
String limit = ElementParameterParser.getValue(node, "__LIMIT__");
if (limit.equals("")) {
	limit = "-1";
}

String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);

String messageKey = ElementParameterParser.getValue(node, "__MESSAGEKEY__");

String mode = ElementParameterParser.getValue(node, "__GENERATION_MODE__");
%>
int nb_line_<%=cid%> = 0;
<%
// *** Xerces *** //
if(mode.equals("Xerces")){
%>
class TalendPrefixResolver_<%=cid%> implements com.sun.org.apache.xml.internal.utils.PrefixResolver {

    private java.util.Map<String, String> map = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();
	
    public String getBaseIdentifier() {
        return null;
    }

    public String getNamespaceForPrefix(String prefix) {
        if (prefix.equals("xml")) {
            return com.sun.org.apache.xml.internal.utils.Constants.S_XMLNAMESPACEURI;
        } else {
            return map.get(prefix);
        }
    }

    public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context) {
        return getNamespaceForPrefix(prefix);
    }

    public boolean handlesNullPrefixes() {
        return false;
    }

    public boolean countNSMap(org.w3c.dom.Node el) {
    	boolean hasDefaultPrefix = false;
        if (el.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            org.w3c.dom.NamedNodeMap attris = el.getAttributes();
            for (int i = 0; i < attris.getLength(); i++) {
                org.w3c.dom.Node attr = attris.item(i);
                String aname = attr.getNodeName();
                if (aname.startsWith("xmlns")) {
                    int index = aname.indexOf(":");
                    if(index > 0){
                    	aname = aname.substring(index + 1);
                    }else{
                    	aname = "pre"+defualtNSPath.size();
                    	hasDefaultPrefix = true;
                    	String path = "";
                    	org.w3c.dom.Node elTmp = el;
                    	while(elTmp!=null && !(elTmp instanceof org.w3c.dom.Document)){
							path = "/"+elTmp.getNodeName()+path;
                    		elTmp = elTmp.getParentNode();
                    	}
                        defualtNSPath.add(path);
                    }
                    map.put(aname, attr.getNodeValue());
                }
            }
        }
        org.w3c.dom.NodeList nodeList = el.getChildNodes();
        for (int i = 0; i < nodeList.getLength(); i++) {
            hasDefaultPrefix = hasDefaultPrefix | countNSMap(nodeList.item(i));
        }
        return hasDefaultPrefix;
    }
    
    public int[] getDefaulNSIndex(String path, String loopPath){
		String fullPath = loopPath;
    	if(!path.equals(fullPath)){
        	for (String tmp : path.split("/")) {
        		if (tmp.equals("..")) {
                    fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                } else {
                    fullPath += "/" + tmp;
                }
        	}
        }
    	int[] indexs = new int[fullPath.split("/").length - 1];
        java.util.Arrays.fill(indexs, -1);
        int length = 0;
        for (int i = 0; i < defualtNSPath.size(); i++) {
            if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                length = defualtNSPath.get(i).length();
            }
        }
    	return indexs;
    }
}

class XML_API_<%=cid%>{

	String loopPath = null;
	boolean hasDefaultNS = false;
	TalendPrefixResolver_<%=cid%> pr = null;
	
	public boolean isDefNull(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
            return ((org.apache.xerces.xs.ElementPSVI) node).getNil();
        }
        return false;
    }

    public boolean isMissing(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.w3c.dom.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getTextContent().length() == 0;
        }
        return false;
    }

	public void initXPath(org.w3c.dom.Node root){
		pr= new TalendPrefixResolver_<%=cid%>();
    	hasDefaultNS = pr.countNSMap(root);
	}

    public org.w3c.dom.Node getSingleNode(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException {
        com.sun.org.apache.xpath.internal.objects.XObject obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
        return obj.nodelist().item(0);
    }

    public org.w3c.dom.NodeList getNodeList(org.w3c.dom.Node node, String xpath) throws javax.xml.transform.TransformerException {
        com.sun.org.apache.xpath.internal.objects.XObject obj = com.sun.org.apache.xpath.internal.XPathAPI.eval(node, addDefaultNSPrefix(xpath), pr);
        return obj.nodelist();
    }
    
    private String addDefaultNSPrefix(String path) {
        if (hasDefaultNS) {
            StringBuffer newPath = new StringBuffer();
            int[] indexs= pr.getDefaulNSIndex(path,loopPath);
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 && tmp.indexOf("@") == -1) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                        newPath.append("pre").append(index).append(":").append(tmp);
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }
}

XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
xml_api_<%=cid%>.loopPath=<%=loopQuery%>;
org.apache.xerces.parsers.DOMParser parser_<%=cid%> = new org.apache.xerces.parsers.DOMParser();
parser_<%=cid%>.setProperty("http://apache.org/xml/properties/dom/document-class-name",
        "org.apache.xerces.dom.PSVIDocumentImpl");
parser_<%=cid%>.setFeature("http://xml.org/sax/features/validation", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema", true);
parser_<%=cid%>.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);
parser_<%=cid%>.setFeature("http://xml.org/sax/features/namespaces", true);
parser_<%=cid%>.setErrorHandler(null);
String filename = <%=filename %>;
if(filename != null && filename.startsWith("//")){
	filename = filename.replaceFirst("//","/");
}
parser_<%=cid%>.parse(new java.io.File(filename).toURI().toString());
org.w3c.dom.Document doc_<%=cid%> = parser_<%=cid%>.getDocument();

xml_api_<%=cid%>.initXPath(doc_<%=cid%>);
org.w3c.dom.NodeList nodelist_<%=cid %> = xml_api_<%=cid%>.getNodeList(doc_<%=cid %>,<%=loopQuery%>);

org.w3c.dom.Node node_<%=cid%>  = null;
String str_<%=cid%> = null;
for (int i_<%=cid %> = 0; i_<%=cid %> < nodelist_<%=cid %>.getLength(); i_<%=cid %>++) {
	org.w3c.dom.Node tmp_<%=cid %> = nodelist_<%=cid %>.item(i_<%=cid %>);
<%
// *** Dom4j *** //
}else if(mode.equals("Dom4j")){
%>
class NameSpaceTool_<%=cid%> {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    public String addDefaultNSPrefix(String path, String loopPath) {
        if (defualtNSPath.size() > 0) {
        	String fullPath = loopPath;
        	if(!path.equals(fullPath)){
            	for (String tmp : path.split("/")) {
            		if (tmp.equals("..")) {
                        fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                    } else {
                        fullPath += "/" + tmp;
                    }
            	}
            }
        	int[] indexs = new int[fullPath.split("/").length - 1];
            java.util.Arrays.fill(indexs, -1);
            int length = 0;
            for (int i = 0; i < defualtNSPath.size(); i++) {
                if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                    java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                    length = defualtNSPath.get(i).length();
                }
            }

            StringBuilder newPath = new StringBuilder();
            String[] pathStrs = path.split("/");
            for (int i = 0; i < pathStrs.length; i++) {
                String tmp = pathStrs[i];
                if (newPath.length() > 0) {
                    newPath.append("/");
                }
                if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 && tmp.indexOf("@") == -1) {
                    int index = indexs[i + indexs.length - pathStrs.length];
                    if (index >= 0) {
                        newPath.append("pre").append(index).append(":").append(tmp);
                    } else {
                        newPath.append(tmp);
                    }
                } else {
                    newPath.append(tmp);
                }
            }
            return newPath.toString();
        }
        return path;
    }
}

class XML_API_<%=cid%>{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && attri.getText().equals("true")){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

	
String content_<%=cid %> = "";
if(this.tcMessage == null){
	throw new RuntimeException("The tcMessage is null");
}else if(this.tcMessage.getBody() == null){
	throw new RuntimeException("The body of tcMessage is null");
}else{
	content_<%=cid %> = this.tcMessage.getBody().get(<%=messageKey %>).toString(); 
}

org.dom4j.io.SAXReader reader_<%=cid%> = new org.dom4j.io.SAXReader();		
org.dom4j.Document doc_<%=cid%>= reader_<%=cid%>.read(new java.io.StringReader(content_<%=cid %>));

NameSpaceTool_<%=cid%> nsTool_<%=cid%> = new NameSpaceTool_<%=cid%>();
nsTool_<%=cid%>.countNSMap(doc_<%=cid%>.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_<%=cid%> = nsTool_<%=cid%>.xmlNameSpaceMap;  


org.dom4j.XPath x_<%=cid%> = doc_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=loopQuery%>,<%=loopQuery%>));  
x_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_<%=cid%> = (java.util.List<org.dom4j.tree.AbstractNode>)x_<%=cid%>.selectNodes(doc_<%=cid%>);	
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();
String str_<%=cid %> = "";
org.dom4j.Node node_<%=cid%> = null;
for (org.dom4j.tree.AbstractNode temp_<%=cid%>: nodeList_<%=cid%>) {
<%
// *** SAX *** //
}else if(mode.equals("SAX")){
%>
class XML_API_<%=cid%>{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && node[1].equals("true")){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_<%=cid%> xml_api_<%=cid%> = new XML_API_<%=cid%>();

String[] queryPaths_<%=cid%> = new String[]{
<%
	boolean first = true;
	for(Map<String,String> path:mapping){
%>	
	<%=first?"":","%><%=path.get("QUERY")%>
<%
		String query = path.get("QUERY");
		if(query!=null && query.indexOf("@")<0){
%>		
	,<%=query%>+"/@xsi:nil"
<%
		}
		first=false;
	}
%>
};

String str_<%=cid %> = "";
String[] node_<%=cid%> = null;
org.talend.xml.sax.SAXLooper looper_<%=cid%> = new org.talend.xml.sax.SAXLooper(<%=loopQuery%>,queryPaths_<%=cid%>);
String filename = <%=filename %>;
if(filename != null && filename.startsWith("//")){
	filename = filename.replaceFirst("//","/");
}
looper_<%=cid%>.parse(new java.io.File(filename).toURI().toString());
java.util.Iterator<java.util.Map<String, String>> it_<%=cid%>  = looper_<%=cid%>.iterator();
while (it_<%=cid%>.hasNext()) {
	java.util.Map<String, String> row_<%=cid%> = it_<%=cid%>.next();
<%
}
%>
	nb_line_<%=cid%>++;
<%
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
String firstConnName = "";
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		List<IMetadataColumn> columns=metadata.getListColumns();
		if (conns!=null) {
			if (conns.size()>0) {
				IConnection conn = conns.get(0);
				firstConnName = conn.getName();
				for (int i=0;i<mapping.size();i++) { 
					String query = mapping.get(i).get("QUERY");
					if(mode.equals("Xerces")){
%>
	node_<%=cid%> = xml_api_<%=cid%>.getSingleNode(tmp_<%=cid %>,<%=query%>);
	str_<%=cid %> = node_<%=cid%>!=null?node_<%=cid%>.getTextContent():"";
<%
					}else if(mode.equals("Dom4j")){
%>
	org.dom4j.XPath xTmp<%=i%>_<%=cid%> = temp_<%=cid%>.createXPath(nsTool_<%=cid%>.addDefaultNSPrefix(<%=query%>,<%=loopQuery%>));
    xTmp<%=i%>_<%=cid%>.setNamespaceURIs(xmlNameSpaceMap_<%=cid%>); 
    node_<%=cid%> = xTmp<%=i%>_<%=cid%>.selectSingleNode(temp_<%=cid%>);
    str_<%=cid %> = xTmp<%=i%>_<%=cid%>.valueOf(temp_<%=cid%>);
<%
					}else if(mode.equals("SAX")){
%>
	str_<%=cid %> = row_<%=cid%>.get(<%=query%>);
<%
						if(query!=null && query.indexOf("@")<0){
%>
	node_<%=cid%> = new String[]{str_<%=cid %>,row_<%=cid%>.get(<%=query%>+"/@xsi:nil")};
<%
						}else{
%>
	node_<%=cid%> = new String[]{str_<%=cid %>,null};
<%
						}
					}
					for(IMetadataColumn column:columns) {
						if (mapping.get(i).get("SCHEMA_COLUMN")!=null) {
							if (column.getLabel().compareTo(mapping.get(i).get("SCHEMA_COLUMN"))==0) {
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								
								boolean isNotSetDefault = false;
								String defaultValue=column.getDefault();
								if(defaultValue!=null){
									isNotSetDefault = defaultValue.length()==0;
								}else{
									isNotSetDefault=true;
								}
								
								if(javaType == JavaTypesManager.STRING){
									if(column.isNullable()){
%>
									if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
									}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?null:column.getDefault()%>;
									}else{
<%
									}else{ // column.isNullable()
%>
									if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
										<%=conn.getName() %>.<%=column.getLabel() %> ="";
									}else if(xml_api_<%=cid%>.isMissing(node_<%=cid%> )){ 
										<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
									}else{
<%
									}
								}else{ // other type
									if(column.isNullable()){
%>	
										if(xml_api_<%=cid%>.isDefNull(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =null;
										}else if(xml_api_<%=cid%>.isEmpty(node_<%=cid%>) || xml_api_<%=cid%>.isMissing(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %>=<%=isNotSetDefault?null:column.getDefault()%>;
										}else{
<%
								  }else{ // column.isNullable()
%>
										if(xml_api_<%=cid%>.isMissing(node_<%=cid%>) || xml_api_<%=cid%>.isEmpty(node_<%=cid%>)){
											<%=conn.getName() %>.<%=column.getLabel() %> =<%=isNotSetDefault?JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate):column.getDefault()%>;
										}else{
<%
									}
								}
								if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>;
<%
								} else if (javaType == JavaTypesManager.DATE) {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(str_<%=cid %>, <%= patternValue %>);
<%  
								} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%>							
		<%=conn.getName() %>.<%=column.getLabel() %> = str_<%=cid %>.getBytes(<%=encoding %>);
<%
								} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) { 
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(str_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else {
%>
		<%=conn.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid %>);
<%
								}
%>
	}
<%
							}
						}
					}
				}
			}
			if (conns.size()>1) {
				for (int i=1;i<conns.size();i++) {
					IConnection conn = conns.get(i);
					if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
						for (IMetadataColumn column: metadata.getListColumns()) {
%>
	<%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
						}
					}
				}
			}
		}
		
		// limit
		if (limit.compareTo("-1")!=0) {
%>
	
	if (nb_line_<%=cid %>><%=limit %>) {
		break;
	}
<%
		}
	}
}
%>
			
