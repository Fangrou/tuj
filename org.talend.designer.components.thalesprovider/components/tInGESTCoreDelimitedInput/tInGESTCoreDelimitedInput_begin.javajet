<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
	if(ElementParameterParser.getValue(node,"__CSV_OPTION__").equals("false")) {	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	if (metadata!=null) {
		String filename = ElementParameterParser.getValue(node,"__FILENAME__");
    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	if(header.equals("")){
    		header="0";
    	}
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
		if(limit.equals("")){
			limit = "-1";
		}
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	if(footer.equals("")){
    		footer="0";
    	}
    	String random = "-1";
    	String ran = ElementParameterParser.getValue(node, "__RANDOM__");
    	if(ran.equals("true")){
    		random = ElementParameterParser.getValue(node, "__NB_RANDOM__");
    		if(random.equals("")){
    			random="0";
    		}
    	}
    	
		List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
		String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
		boolean isTrimAll = (isTrimAllStr!=null&&!isTrimAllStr.equals(""))?isTrimAllStr.equals("true"):true;
		
    	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");
    	String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
    	String removeEmptyRowFlag =  ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!dieOnErrorStr.equals(""))?dieOnErrorStr.equals("true"):false; 
		
		String checkNumStr = ElementParameterParser.getValue(node, "__CHECK_FIELDS_NUM__");
		boolean checkNum = (checkNumStr!=null&&!checkNumStr.equals(""))?checkNumStr.equals("true"):false; 
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
		
		String splitRecordStr = ElementParameterParser.getValue(node, "__SPLITRECORD__");
		boolean splitRecord = (splitRecordStr!=null&&!splitRecordStr.equals(""))?splitRecordStr.equals("true"):false;
		
		String messageKey = ElementParameterParser.getValue(node, "__MESSAGEKEY__");
%>

		
String content_<%=cid %> = "";
if(this.tcMessage == null){
	throw new RuntimeException("The tcMessage is null");
}else if(this.tcMessage.getBody() == null){
	throw new RuntimeException("The body of tcMessage is null");
}else{
	content_<%=cid %> = this.tcMessage.getBody().get(<%=messageKey %>).toString(); 
}


		
org.talend.fileprocess.FileInputDelimited fid_<%=cid %> = new org.talend.fileprocess.FileInputDelimited(content_<%=cid %>,<%=fieldSeparator %>,<%=rowSeparator %>,<%=removeEmptyRowFlag %>,<%=header %>,<%=footer %>,<%=limit %>,<%=random %>, <%= splitRecord%>);
while (fid_<%=cid %>.nextRecord()) {
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {%>			
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {
			<%	
				List<IMetadataColumn> listColumns = metadata.getListColumns();
				int sizeListColumns = listColumns.size();
				boolean noStringTypeExist = false;
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
					}else{
						noStringTypeExist = true;
						break;
					}
				}
				if(noStringTypeExist){%>String temp_<%=cid %> = "";
				<%
				}
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = listColumns.get(valueN);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();%><%
if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){%>
<%=firstConnName %>.<%=column.getLabel() %> = fid_<%=cid %>.get(<%=valueN%>)<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(valueN).get("TRIM").equals("true")))?".trim()":"" %>;
<%
}else{ 
%>temp_<%=cid %> = fid_<%=cid %>.get(<%=valueN%>)<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(valueN).get("TRIM").equals("true")))?".trim()":"" %>;
if(temp_<%=cid %>.length() > 0) {
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
					} else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
%><%=firstConnName %>.<%=column.getLabel() %> = temp_<%=cid %>.getBytes(<%=encoding%>);
<%
					}else if(javaType == JavaTypesManager.DATE) { 
						if(checkNum){
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>, false);
<%
						}else{
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(temp_<%=cid %>, <%= patternValue %>);
<%
						}
					}else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(temp_<%=cid %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
<%
					} else { 
%><%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(temp_<%=cid %>);
<%
					}
%>} else {						
<%
					String defaultValue = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault());
					if(defaultValue == null) {
%>throw new RuntimeException("Value is empty for column : '<%= column.getLabel() %>' in '<%=firstConnName %>' connection, value is invalid or this column should be nullable or have a default value.");
<%
					} else {
%><%=firstConnName %>.<%=column.getLabel() %> = <%=defaultValue %>;
<%
					}
%>}
<%
}
%><%
				}%>
				
<%if(checkNum) {%>
	 int filedsum_<%=cid %> = fid_<%=cid %>.getColumnsCountOfCurrentRow();
	 if(filedsum_<%=cid %> < <%=metadata.getListColumns().size() %>){
	 	throw new RuntimeException("Column(s) missing");
	 } else if(filedsum_<%=cid %> > <%=metadata.getListColumns().size() %>) {
	 	throw new RuntimeException("Too many columns");
	 }     
<%}%>				

<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
				
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!rejectConnName.equals("")&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>                    
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals("")){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
            <%}
        } 
        %>
    }

				
<%
			}
		}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
	  }
	}
}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{//the following is the tFileInputCSV component
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        
        String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__", "FILENAME");
    	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    	String header = ElementParameterParser.getValue(node, "__HEADER__");
    	String footer = ElementParameterParser.getValue(node, "__FOOTER__");
    	String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    	if(limit.equals("")){
    		limit="-1";
    	}
    	String delim1 = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");     	
    	String rowSeparator1 = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
    	
    	
    	String escapeChar1 = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
    	
    	if(escapeChar1.equals("")){
    		escapeChar1 = "\"\"";
    	}
    	String escapeChar = escapeChar1.substring(1,escapeChar1.length()-1);
    	if(escapeChar.equals("'")){
    		escapeChar = "\\'";
    	}
    	String textEnclosure1 = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
    	if(textEnclosure1.equals("")){
    		textEnclosure1 = "\"\"";
    	}
    	String textEnclosure = textEnclosure1.substring(1,textEnclosure1.length()-1);
    	if ("".equals(textEnclosure)) textEnclosure = "\0";
    	if(textEnclosure.equals("'")){
    		textEnclosure = "\\'";
    	}
    	
    	String removeEmptyRow = ElementParameterParser.getValue(node, "__REMOVE_EMPTY_ROW__");
    	
    	List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
		String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
		boolean isTrimAll = (isTrimAllStr!=null&&!isTrimAllStr.equals(""))?isTrimAllStr.equals("true"):true;
		
    	String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
		boolean dieOnError = (dieOnErrorStr!=null&&!dieOnErrorStr.equals(""))?dieOnErrorStr.equals("true"):false;
		
		String checkNumStr = ElementParameterParser.getValue(node, "__CHECK_FIELDS_NUM__");
		boolean checkNum = (checkNumStr!=null&&!checkNumStr.equals(""))?checkNumStr.equals("true"):false; 
		
		String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
		boolean advancedSeparator = (advancedSeparatorStr!=null&&!advancedSeparatorStr.equals(""))?advancedSeparatorStr.equals("true"):false;
		String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
		String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
		
		String messageKey = ElementParameterParser.getValue(node, "__MESSAGEKEY__");
		
%>		
		int nb_line_<%=cid%> = 0;
		int footer_<%=cid %> = <%= footer%>;
		int totalLine<%=cid %> = 0;
		int limit<%=cid %> = <%= limit %>;
		int lastLine<%=cid %> = -1;	
		
		char fieldSeparator_<%=cid %>[] = null;
		
		//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
		if ( ((String)<%=delim1%>).length() > 0 ){
			fieldSeparator_<%=cid %> = ((String)<%=delim1%>).toCharArray();
		}else {			
			throw new IllegalArgumentException("Field Separator must be assigned a char."); 
		}
		
		char rowSeparator_<%=cid %>[] = null;
		
		//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
		if ( ((String)<%=rowSeparator1%>).length() > 0 ){
			rowSeparator_<%=cid %> = ((String)<%=rowSeparator1%>).toCharArray();
		}else {
			throw new IllegalArgumentException("Row Separator must be assigned a char."); 
		}
		
<%
		if(!escapeChar1.equals("") && !escapeChar1.startsWith("\"")){//context and global variables
%>
            String escapeChar1_<%=cid %> = <%=escapeChar1 %>;          
	        char escapeChar_<%=cid %>[] = null;
	        
	        if(((String)escapeChar1_<%=cid %>).length() > 0 ){ 
	        	escapeChar_<%=cid %> = ((String)escapeChar1_<%=cid %>).toCharArray(); 
	  		}else { 
	            throw new IllegalArgumentException("Escape Char must be assigned a char."); 
	        }
	         
	        String textEnclosure1_<%=cid %> = <%=textEnclosure1 %>; 
			char textEnclosure_<%=cid %>[] = null;
	        
	        if(((String)textEnclosure1_<%=cid %>).length() > 0 ){ 
      			textEnclosure_<%=cid %> = ((String)textEnclosure1_<%=cid %>).toCharArray(); 
			}else { 
	            throw new IllegalArgumentException("Text Enclosure must be assigned a char."); 
	        }
<%
		}
%>	

	
String content_<%=cid %> = "";
if(this.tcMessage == null){
	throw new RuntimeException("The tcMessage is null");
}else if(this.tcMessage.getBody() == null){
	throw new RuntimeException("The body of tcMessage is null");
}else{
	content_<%=cid %> = this.tcMessage.getBody().get(<%=messageKey %>).toString();
}
	
		com.csvreader.CsvReader csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.StringReader(content_<%=cid %>)), fieldSeparator_<%=cid %>[0]);
                
		if ( (rowSeparator_<%=cid %>[0] != '\n') && (rowSeparator_<%=cid %>[0] != '\r') )
        	csvReader<%=cid %>.setRecordDelimiter(rowSeparator_<%=cid %>[0]);
        	
        csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
<%
		if(escapeChar1.equals("") || escapeChar1.startsWith("\"")){//normal situation
%>
        csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');

<%
        	if(escapeChar.equals("\\\\")){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        	}else if(escapeChar.equals(textEnclosure)){
        %>
            csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        	}else{
        %>
            //?????doesn't work for other escapeChar
<%
        	}
        }else{//context and global variables
 %> 
       	csvReader<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]); 
       	if(escapeChar_<%=cid %>[0] == '\\'){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
       	}else if(escapeChar_<%=cid %>[0] == textEnclosure_<%=cid %>[0]){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
       	}
<%		}
	%>      
	
		String[] row<%=cid %>=null;
		
		if(footer_<%=cid %> > 0){
		
            while (csvReader<%=cid %>.readRecord()) {
<%             	if(removeEmptyRow.equals("true")){%>
				row<%=cid %>=csvReader<%=cid %>.getValues();
				if(!(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015"))){//empty line when row separator is '\n'
<%				}%>
                
                	totalLine<%=cid %>++;
                
<%            	if(removeEmptyRow.equals("true")){%>
				}
<%				}%>
                
            }
            int lastLineTemp<%=cid %> = totalLine<%=cid %> - footer_<%=cid %>   < 0? 0 : totalLine<%=cid %> - footer_<%=cid %> ;
            if(lastLine<%=cid %> > 0){
                lastLine<%=cid %> = lastLine<%=cid %> < lastLineTemp<%=cid %> ? lastLine<%=cid %> : lastLineTemp<%=cid %>; 
            }else {
                lastLine<%=cid %> = lastLineTemp<%=cid %>;
            }
         
          	csvReader<%=cid %>.close();
          
	 	csvReader<%=cid %>=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.StringReader(content_<%=cid %>)), fieldSeparator_<%=cid %>[0]);
	          
		if ( (rowSeparator_<%=cid %>[0] != '\n') && (rowSeparator_<%=cid %>[0] != '\r') )	
        	csvReader<%=cid %>.setRecordDelimiter(rowSeparator_<%=cid %>[0]);
        csvReader<%=cid %>.setSkipEmptyRecords(<%=removeEmptyRow %>);
<%
		if(escapeChar1.equals("") || escapeChar1.startsWith("\"")){//normal situation
%>
        csvReader<%=cid %>.setTextQualifier('<%=textEnclosure %>');
<% 
        	if(escapeChar.equals("\\\\")){
        %>
        csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
<%
        	}else if(escapeChar.equals(textEnclosure)){
        %>
        csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
<%
        	}else{
        %>
        //?????doesn't work for other escapeChar
<%
        	}
        }else{//context and global variables
%>
       	csvReader<%=cid %>.setTextQualifier(textEnclosure_<%=cid %>[0]); 
       	if(escapeChar_<%=cid %>[0] == '\\'){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_BACKSLASH);
       	}else if(escapeChar_<%=cid %>[0] == textEnclosure_<%=cid %>[0]){
       		csvReader<%=cid %>.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);
       	}
<%
        }
        %>  
          
        }
        
        
        
        int currentLine<%=cid %> = 0;
        int outputLine<%=cid %> = 0;
            
        while ( limit<%=cid%> != 0 && csvReader<%=cid %>.readRecord() ) { 
        
        	row<%=cid %>=csvReader<%=cid %>.getValues();
        	
 <%
   		if(removeEmptyRow.equals("true")){%>
        	if(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015")){//empty line when row separator is '\n'
        		continue;
        	}
<%		}%>
        	
        	
        	currentLine<%=cid %>++;
        	if(currentLine<%=cid %> < <%= header %>+1) {
                continue;
            }
            
            if(lastLine<%=cid %> > -1 && currentLine<%=cid %> > lastLine<%=cid %>) {
                break;
            }
            outputLine<%=cid %>++;
            if (limit<%=cid %> > 0 && outputLine<%=cid %> > limit<%=cid %>) {
                break;
            }  
                                                                      
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

    String rejectConnName = "";
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }

    	if (conns!=null) {
    		if (conns.size()>0) {
    			for (int i=0;i<conns.size();i++) {
    				IConnection connTemp = conns.get(i);
    				if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
    		<%=connTemp.getName() %> = null;			
<%
    				}
    			}
    		}
    	}
    	
	String firstConnName = "";
	if (conns!=null) {
		if (conns.size()>0) {
			IConnection conn = conns.get(0);
			firstConnName = conn.getName();
			
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			%>
			boolean whetherReject_<%=cid %> = false;
			<%=firstConnName %> = new <%=conn.getName() %>Struct();
			try {			
			<%
				List<IMetadataColumn> columns=metadata.getListColumns();
				int columnSize = columns.size();
				%>				
				
			if(row<%=cid %>.length == 1 && row<%=cid %>[0].equals("\015")){//empty line when row separator is '\n'
				
<%
		for (IMetadataColumn column1: metadata.getListColumns()) {%>

				<%=firstConnName %>.<%=column1.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaIdType(column1.getTalendType(), column1.isNullable())%>;
				
<%		}%>
				
			}else{
			
<%
			for (int i=0;i<columnSize;i++) {
					IMetadataColumn column=columns.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			%>
						
			
				if(<%=i %> < row<%=cid %>.length){				
<%
					if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>;
<%
					} else {
%>
						if(row<%=cid %>[<%=i %>].length() > 0) {
	<%
							if(javaType == JavaTypesManager.DATE) {
								if(checkNum){
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>, <%= patternValue %>, false);
	<%
								}else{
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>, <%= patternValue %>);
	<%
								}
							} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>, <%= thousandsSeparator %>, <%= decimalSeparator %>));
	<%
							}else if(javaType == JavaTypesManager.BYTE_ARRAY){ 
	%>							
							    <%=firstConnName %>.<%=column.getLabel() %> = row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>.getBytes(<%=encoding %>);
	<%
							} else {
	%>
								<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%= typeToGenerate %>(row<%=cid %>[<%=i %>]<%=(isTrimAll || (!trimSelects.isEmpty() && trimSelects.get(i).get("TRIM").equals("true")))?".trim()":"" %>);
	<%
							}
	%>					
						}else{
							<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
	<%					
					}%>	
								
				}else{										

				<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;

				}

<%			}%>

			}
			
<%if(checkNum) {%>
	 int filedsum_<%=cid %> = row<%=cid %>.length;
	 if(filedsum_<%=cid %> < <%=metadata.getListColumns().size() %>){
	 	throw new Exception("Column(s) missing");
	 } else if(filedsum_<%=cid %> > <%=metadata.getListColumns().size() %>) {
	 	throw new RuntimeException("Too many columns");
	 }     
<%}%>	

<%if(rejectConnName.equals(firstConnName)) {%> <%=firstConnName %> = null; <%}%>
			
    } catch (Exception e) {
        whetherReject_<%=cid%> = true;
        <%
        if (dieOnError) {
            %>
            throw(e);
            <%
        } else {
            if(!rejectConnName.equals("")&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {

                %>
                    <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : metadata.getListColumns()) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals("")){
                %>
                System.err.println(e.getMessage());
                <%=firstConnName %> = null;
                <%
            } else if(rejectConnName.equals(firstConnName)){%>
            	<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
            <%}
        } 
        %>
    }

<%			
			}
		}
		if (conns.size()>0) {	
			boolean isFirstEnter = true;
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if ((conn.getName().compareTo(firstConnName)!=0)&&(conn.getName().compareTo(rejectConnName)!=0)&&(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
%>
		<% if(isFirstEnter) {%>if(!whetherReject_<%=cid%>) { <% isFirstEnter = false; } %>      
             if(<%=conn.getName() %> == null){ 
            	 <%=conn.getName() %> = new <%=conn.getName() %>Struct();
             }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
%>
	    	 <%=conn.getName() %>.<%=column.getLabel() %> = <%=firstConnName %>.<%=column.getLabel() %>;    				
<%
				 	}
				}
			}
%>
		<% if(!isFirstEnter) {%> } <% } %>	
<%
		}
	}
		}
	}
%>

<%
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }
%>