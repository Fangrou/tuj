<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
" 
%>

<% 
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String messageKey = ElementParameterParser.getValue(node, "__MESSAGEKEY__");
String rowSeparator = ElementParameterParser.getValue(node, "__ROWSEPARATOR__");
String fieldSeparator = ElementParameterParser.getValue(node, "__FIELDSEPARATOR__");

String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
String textEnclosure = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");

boolean isAppend = ElementParameterParser.getValue(node,"__APPEND__").equals("true");
boolean isIncludeHeader = ElementParameterParser.getValue(node,"__INCLUDEHEADER__").equals("true");

boolean advancedSeparator =  ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__").equals("true");
String thousandsSeparator = ElementParameterParser.getValue(node, "__THOUSANDS_SEPARATOR__");
String decimalSeparator = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__"); 
%>
<%
if(ElementParameterParser.getValue(node,"__CSV_OPTION__").equals("false")) {	
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
%>

    if (this.tcMessage == null) {
        throw new RuntimeException("The tcMessage is null");
    } else if (this.tcMessage.getBody() == null) {
        throw new RuntimeException("The body of tcMessage is null");
    } 
            
	int nb_line_<%=cid %> = 0;
	final String OUT_DELIM_ROWSEP_<%=cid %> = <%=rowSeparator %>;	
	final String OUT_DELIM_<%=cid %> = <%=fieldSeparator %>;
	StringBuffer stringBuffer_<%=cid %> = new StringBuffer();

<%if(isAppend || isIncludeHeader){%>
	String content_<%=cid %> = this.tcMessage.getBody().get(<%=messageKey %>).toString();

    <%if(isIncludeHeader){%>
    	//add the header part
    	if(content_<%=cid %>.length() == 0){
            <%		
            List<IMetadataColumn> columns = metadata.getListColumns();
            int sizeColumns = columns.size();
            for (int i = 0; i < sizeColumns; i++) {
                IMetadataColumn column = columns.get(i);
                %>
                stringBuffer_<%=cid %>.append("<%=column.getLabel() %>");
                <%
                if(i != sizeColumns - 1) {
                    %>
                    stringBuffer_<%=cid %>.append(OUT_DELIM_<%=cid %>);
                    <%
                }
            }
            %>
            stringBuffer_<%=cid %>.append(OUT_DELIM_ROWSEP_<%=cid %>);
    	}
    <%}%>
    
    <%if(isAppend){%>    	
    	if(content_<%=cid %>.length() > 0){
        	//append the old content of tcMessage
        	stringBuffer_<%=cid %>.append(content_<%=cid %>);
    	}
    <%}%>    	
	
	//assign value to tcMessage at every iterate
	this.tcMessage.getBody().add(<%=messageKey %>, stringBuffer_<%=cid %>.toString());
<%}%>
	
<%
      }
    }
    %>

<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}else{// the following is the tFileOutputCSV component
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    %>

    <%
    
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        if (metadata!=null) {
        
        if(escapeChar.equals("\"\"\"")){//"""
        	escapeChar = "\"\\\"\"";
        }
        if(textEnclosure.equals("\"\"\"")){//"""
        	textEnclosure = "\"\\\"\"";
        }        
 	%>
        if (this.tcMessage == null) {
            throw new RuntimeException("The tcMessage is null");
        } else if (this.tcMessage.getBody() == null) {
            throw new RuntimeException("The body of tcMessage is null");
        }  	
 	 	
 	 	int nb_line_<%=cid %> = 0;
 		String rowSeparator_<%=cid %> = <%=rowSeparator %>;       
 		String fieldSeparator_<%=cid %> = <%=fieldSeparator %>; 
 		String textEnclosure_<%=cid %> = <%=textEnclosure %>;      
 		String escapeChar_<%=cid %> = <%=escapeChar %>;       
 		
 		java.io.StringWriter stringWriter_<%=cid %> = new java.io.StringWriter();       
        com.csvreader.CsvWriter csvWriter_<%=cid%> = new com.csvreader.CsvWriter(stringWriter_<%=cid %>, fieldSeparator_<%=cid %>.charAt(0));
        //The default is for Windows, Unix, or Mac. 
        if(rowSeparator_<%=cid %>.charAt(0) != '\r' && rowSeparator_<%=cid %>.charAt(0) != '\n'){       
        	csvWriter_<%=cid%>.setRecordDelimiter(rowSeparator_<%=cid %>.charAt(0));        
        }
        
        csvWriter_<%=cid%>.setTextQualifier(textEnclosure_<%=cid %>.charAt(0));
        csvWriter_<%=cid%>.setForceQualifier(true);
              
        if(escapeChar_<%=cid %>.charAt(0) == '\\'){        
        	csvWriter_<%=cid%>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_BACKSLASH);
        }else if(escapeChar_<%=cid %>.charAt(0) == textEnclosure_<%=cid %>.charAt(0)){
       		csvWriter_<%=cid%>.setEscapeMode(com.csvreader.CsvWriter.ESCAPE_MODE_DOUBLED);
        }else{
        	throw new RuntimeException("EscapeMode of CSV only support BACKSLASH and DOUBLED");
        }
        
<%if(isAppend || isIncludeHeader){%>
	String content_<%=cid %> = this.tcMessage.getBody().get(<%=messageKey %>).toString();

    <%if(isIncludeHeader){%>
    	//add the header part
    	if(content_<%=cid %>.length() == 0){
            <%		
            List<IMetadataColumn> columns = metadata.getListColumns();
            int sizeColumns = columns.size();
            %>
            	String[] header_<%=cid %> = new String[<%=sizeColumns%>];
            <%
            for (int i = 0; i < sizeColumns; i++) {
                IMetadataColumn column = columns.get(i);
                %>
                header_<%=cid %>[<%=i %>] = "<%=column.getLabel() %>";
                <%
            }
            %>
            csvWriter_<%=cid%>.writeRecord(header_<%=cid %>);
    	}
    <%}%>
    
    <%if(isAppend){%>    	
    	if(content_<%=cid %>.length() > 0){
        	//append the old content of tcMessage
        	csvWriter_<%=cid%>.write(content_<%=cid %>);
    	}
    <%}%>

	//assign value to tcMessage at every iterate
	csvWriter_<%=cid%>.flush();
	this.tcMessage.getBody().add(<%=messageKey %>, stringWriter_<%=cid %>.getBuffer().toString());
<%}%>
        
    <%    
        }
    }
    %>


<%
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
%>
