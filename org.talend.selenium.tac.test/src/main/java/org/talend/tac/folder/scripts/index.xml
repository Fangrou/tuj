<project name="product" default="run" basedir=".">
	<property file="common.properties"/>
	<property file="configuration.properties"/>
	
	<propertyset id="tests.properties">
		<propertyref name="selenium.target.src"/>
	    <propertyref name="tests.on.hudson"/>
	</propertyset>

	<!-- This is for 'for' -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- check os -->
    <target name="os">
    	<condition property="is.unix">
    		<os family="unix"/>
    	</condition>
    	<condition property="is.windows">
    		<os family="windows"/>
    	</condition>
    	
    	<echo>
    		os.name=${os.name}
    		os.arch=${os.arch}
    		os.version=${os.version}
    		
    		is.unix=${is.unix}
    		is.windows=${is.windows}
    	</echo>
    </target>
	
    <target name="get-source-windows" depends="os" if="is.windows">
    	<copy tofile="${product.products.home}/${source_file}" flatten="true" overwrite="yes">
	    	<first count="1" >
	    		<sort>
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<date/>
                    </reverse>
	    			
	    			<resources>
	    				<fileset dir="${samba.server}">
	    					<include name="${source_file}*"/>
	    				</fileset>
		            </resources>
	    		</sort>
	    	</first>
    	</copy>
    </target>
    <target name="get-source-linux" depends="os" if="is.unix">
	<echo>----${source_file}</echo>
    	<copy tofile="${product.products.home}/${source_file}" flatten="true" overwrite="yes">
	    	<first count="1" >
	    		<sort>
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<date/>
                    </reverse>
	    			
	    			<resources>
	    				<fileset dir="${samba.mount.home}">
	    					<include name="${source_file}*"/>
	    				</fileset>
		            </resources>
	    		</sort>
	    	</first>
    	</copy>
    </target>
	
	<!-- ================================= 
          target: get-source-file-windows              
         ================================= -->
    <target name="get-source-file-windows" depends="os" if="is.windows" description="get-source-file-windows">
		<echo>get-source-file-windows -- ${source_file}</echo>
		<copy todir="${product.products.home}" overwrite="yes">
			<fileset dir="${samba.server}">
				<include name="${source_file}"/>
			</fileset>
		</copy>
    </target>

	
	<!-- ================================= 
          target: get-source-file-linux              
         ================================= -->
    <target name="get-source-file-linux" depends="os" if="is.unix" description="get-source-file-linux">
		<echo>get-source-file-linux -- ${source_file}</echo>
		<copy tofile="${product.products.home}" overwrite="yes">
			<fileset dir="${samba.mount.home}">
				<include name="${source_file}"/>
			</fileset>
		</copy>
    </target>
	
	<!-- ================================= 
          target: get-source-file-ftp              
         ================================= -->
    <target name="get-source-file-ftp" description="get-source-file-ftp">
		<echo>get-source-file-ftp -- ${source_file}</echo>
    	<!--Retrieve lastswtbot file from degas ftp server -->
    	<!--
    	<ftp action="get" server="${ftp.server}" userid="${ftp.userid}" password="${ftp.password}" remotedir="${ftp.dir}">		
    		<fileset dir="${product.products.home}">		
    			<include name="${source_file}"/>				
    		</fileset>
    	</ftp>
    	-->
    	<trycatch>
			<try>
				<echo>get-source-file-ftp -- ${source_file} --- downloading</echo>
		    	
		    	<ftp action="get" server="${ftp.server}" userid="${ftp.userid}" password="${ftp.password}" remotedir="LICENCE">		
		    		<fileset dir="${product.products.home}/products">		
		    			<include name="../${source_file}"/>				
		    		</fileset>
		    	</ftp>
			</try>
			<catch>
				<echo>Couldn't donwload -- ${source_file}</echo>
			</catch>
			<finally>
				<echo>Finally for FTP source file!</echo>
			</finally>
    	</trycatch>
    </target>	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: product-target-home                      
         - - - - - - - - - - - - - - - - - -->
    <target name="product-target-home">
    	<condition property="product.target.home">
    		<not>
    			<and>
            		<available file="${product.products.home}" type="dir"/>
            		<available file="${product.target.home}" type="dir"/>
    			</and>
    		</not>
    	</condition>
    	<echo>product.target.home -- ${product.target.home}</echo>
    </target>

	<!-- ================================= 
          target: make-product-target              
         ================================= -->
    <target name="make-product-target" depends="product-target-home" if="product.target.home" description="description">
		<mkdir dir="${product.products.home}"/>
		<mkdir dir="${product.target.home}"/>
    </target>


	<!-- ================================= 
          target: get-source-file              
         ================================= -->
    <target name="get-source-file" description="description">
    	<antcall target="make-product-target"/>
		<if>
			<equals arg1="${download.from.ftp}" arg2="true" />
				<then>
					<echo message="Download source-file from ftp server" />
					<antcall target="get-source-file-ftp"/>
				</then>
			<else>
				<echo message="Download source-file from samba server" />
				<antcall target="get-source-windows"/>
				<antcall target="get-source-linux"/>				
			</else>
		</if>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: get-build-release-version                      
         - - - - - - - - - - - - - - - - - -->
    <target name="get-build-release-version" depends="get-source-file">
    	<!--Retrieve build file from lastswtbot file -->
    	<loadfile srcfile="${product.products.home}/${source_file}" property="nb">	
    		<filterchain>
    			<headfilter lines="1"/>			
    		</filterchain>
    	</loadfile>	

    	<!-- Retrieve build number -->
    	<propertyregex property="release.version" input="${nb}" regexp="(.*)-(.*)-(.*)-V(.*).zip" select="\4" />
    	<propertyregex property="build.version" input="${nb}" regexp="(.*)-(.*)-r(.*)-(.*)" select="\3" />
    	
    	<echo>release.version -- ${release.version}</echo>
    	<echo>build.version -- ${build.version}</echo>
    	
    	<echo>user.dir -- ${user.dir}</echo>
    	
    	<!-- set svn url -->
		<if>
			<not>
				<equals arg1="${release.version}" arg2="${trunk.release.version}" />
			</not>
				<then>
					<echo message="-- Testing Branch! -- " />
					<property name="svn.url" value="${svn.url.branch}"/>
					<property name="selenium.project" value="${selenium.home}/selenium_project_branch"/>
					<property name="selenium.target" value="${selenium.home}/selenium_target_branch"/>
				</then>
			<else>
				<echo message="-- Testing Trunk! -- " />
				<property name="svn.url" value="${svn.url.trunk}"/>
				<property name="selenium.project" value="${selenium.home}/selenium_project"/>
				<property name="selenium.target" value="${selenium.home}/selenium_target"/>
			</else>
		</if>
    	
    	<property name="administrator.configuration.file" value="${selenium.target}/${selenium.file.folder}/administrator_config.txt"/>
    	<property name="database.home" value="${selenium.target}/src/main/java/org/talend/tac/folder/h2database"/>
    	<property name="selenium.target.src" value="${selenium.target}/src/main/java/"/>

    	<!--  set properties for products -->
		<property id="common" file="common.properties"/>
    	<property id="common" file="configuration.properties"/>
    	
    	<property name="tac.home" location="${product.target.home}/TAC-r${build.version}-V${release.version}"/>
    	<property name="talend-all.home" location="${product.target.home}/Talend-All-r${build.version}-V${release.version}"/>
    	<property name="jobserver.home" location="${product.target.home}/org.talend.remote.jobserver_${release.version}_r${build.version}"/>
    	<property name="product.tac" value="TAC-r${build.version}-V${release.version}.zip"/>
    	<property name="product.talend-all" value="Talend-All-r${build.version}-V${release.version}.zip"/>
    	<property name="product.jobserver" value="org.talend.remote.jobserver_${release.version}_r${build.version}.zip"/>
    	<property name="product.soamanager" value="soamanager-r${build.version}.jar"/>
    	

    </target>
	
	
	<!-- ================================= 
          target: check-tac-downloaded              
         ================================= -->
    <target name="check-tac-downloaded"
    	description="check-tac-downloaded">
        <condition property="product-tac-available">
        		<available file="${product.tac}" filepath="${product.products.home}"/>
        </condition>
        <condition property="product-jobserver-available">
        		<available file="${product.jobserver}" filepath="${product.products.home}"/>
        </condition>
        <condition property="product-talend-all-available">
        		<available file="${product.talend-all}" filepath="${product.products.home}"/>
        </condition>
        <condition property="product-soamanager-available">
        		<available file="${product.soamanager}" filepath="${product.products.home}"/>
        </condition>
    </target>
	
	<propertyset id="index.properties">
		<propertyref name="release.version"/>
		<propertyref name="build.version"/>
		
		<propertyref name="selenium.project"/>
		<propertyref name="selenium.target"/>		
		
		
		<propertyref name="tac.home"/>
		<propertyref name="talend-all.home"/>
		<propertyref name="jobserver.home"/>
		<propertyref name="product.tac"/>
		<propertyref name="product.talend-all"/>
		<propertyref name="product.jobserver"/>
		<propertyref name="product.soamanager"/>
		
		<propertyref name="product-tac-available"/>
		<propertyref name="product-jobserver-available"/>
		<propertyref name="product-talend-all-available"/>
		<propertyref name="product-soamanager-available"/>
		
	</propertyset>
	
	
	<!-- ================================= 
          target: download and unzip products              
         ================================= -->
    <target name="download_products"
    	description="download  products">
    	<echo> download - release.version -- ${release.version}</echo>
    	<echo> download -build.version -- ${build.version}</echo>
    	
        <ant antfile="product.xml" target="download-products">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	
	<!-- ================================= 
          target: download and unzip products              
         ================================= -->
    <target name="unzip_products" depends="check-tac-downloaded"
    	description="unzip products">
    	<echo>soa -${product-soamanager-available}</echo>
        <ant antfile="product.xml" target="unzip-products">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	<!-- ================================= 
          target: download and unzip products              
         ================================= -->
    <target name="remove-old-datas"
    	description="remove old datas">
        <ant antfile="product.xml" target="remove-tac-data">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	<!-- ================================= 
          target: download and unzip products              
         ================================= -->
    <target name="remove-dirty-datas-from-war"
    	description="remove dirty datas from war file">
        <ant antfile="product.xml" target="remove-dirty-datas">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>

	<!-- ================================= 
          target: checkout tests and copy license to Talend-All              
         ================================= -->
    <target name="checkout_copy_license"
    	description="checkout tests and copy license to Talend-All">
        <ant antfile="test.xml" target="checkout">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	
	
	<!-- ================================= 
          target: compile
         ================================= -->
    <target name="update_copy_license"
    	description="update all the tests">
        <ant antfile="test.xml" target="update">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	
	<!-- ================================= 
          target: compile
         ================================= -->
    <target name="compile"
    	description="launch all the servers for testing">
        <ant antfile="test.xml" target="compile-test">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: update-compile                      
         - - - - - - - - - - - - - - - - - -->
    <target name="update-compile">
        <antcall target="update_copy_license"/>
    	<antcall target="compile"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: checkout-compile                      
         - - - - - - - - - - - - - - - - - -->
    <target name="checkout-compile">
    	<antcall target="checkout_copy_license"/>
    	<antcall target="compile"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile-tests                      
         - - - - - - - - - - - - - - - - - -->
    <target name="compile-tests">
    	<trycatch>
			<try>
				<echo>Update and compile tests!</echo>
				<antcall target="update-compile"/>
			</try>
			<catch>
				<echo>Couldn't update and compile tests!</echo>
				<echo>Checkout and compile tests!</echo>
				<antcall target="checkout-compile"/>
			</catch>
			<finally>
				<echo>Finally for Compile testing!</echo>
			</finally>
    	</trycatch>
    </target>

	
	<!-- ================================= 
          target: launch servers for testing              
         ================================= -->
    <target name="launch_servers"
    	description="launch all the servers for testing">
        <ant antfile="servers.xml" target="launch-servers">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: modify-configuration                      
         - - - - - - - - - - - - - - - - - -->
    <target name="modify-configuration">
        <ant antfile="modify.xml" target="modify">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>

	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: product_directories_avaliable                      
         - - - - - - - - - - - - - - - - - -->
    <target name="product_home_available">
        <condition property="products-home-available">
        	<and>
        		<available  file="${jobserver.home}" type="dir"/>
        		<available file="${talend-all.home}" type="dir"/>
        		<available file="${product.soamanager}" filepath="${product.target.home}"/>
        	</and>
        </condition>
    	<echo>products-home-available -- ${products-home-available}</echo>   	
    </target>
	
	<!-- ================================= 
          target: launch servers for testing              
         ================================= -->
    <target name="stop_servers"
    	description="stop all the servers for testing">
        <ant antfile="servers.xml" target="stop-servers">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>
	
	<!-- ================================= 
          target: launch servers for testing            
         ================================= -->
    <target name="run-tests" depends="modify-configuration"
    	description="launch all the servers for testing">
        <ant antfile="test.xml" target="run-tests">
        	<propertyset refid="index.properties"/>
        	<property file="common.properties"/>
        	<property file="configuration.properties"/>
        </ant>
    </target>

	<!-- ================================= 
          target: launch servers for testing get-build-release-version    depends="launch_servers"            
         ================================= -->
    <target name="run-without-download"  depends="get-build-release-version,check-tac-downloaded">
    	<antcall target="stop_servers"/>
    	<antcall target="remove-old-datas"/>
    	<antcall target="remove-dirty-datas-from-war"/>
    	<antcall target="compile-tests"/>

    	<antcall target="launch_servers"/>
    	<antcall target="run-tests"/>
    </target>

	
	<!-- ================================= 
          target: run              
         ================================= -->
    <target name="run" description="description"  depends="get-build-release-version,download_products,check-tac-downloaded">
    	<antcall target="unzip_products"/>
    	<antcall target="stop_servers"/>
    	<antcall target="remove-old-datas"/>
    	
    	<!--
    	<antcall target="remove-dirty-datas-from-war"/>
    	-->
    	
    	<antcall target="compile-tests"/>

    	<antcall target="launch_servers"/>
    	<antcall target="run-tests"/>
    </target>

	<!-- ================================= 
          target: launch servers for testing get-build-release-version    depends="launch_servers"            
         ================================= -->
    <target name="run-data"  depends="get-build-release-version,check-tac-downloaded">
    	<antcall target="stop_servers"/>
    	<antcall target="compile-tests"/>
    	<antcall target="launch_servers"/>
    	<antcall target="run-tests"/>
    </target>
</project>
