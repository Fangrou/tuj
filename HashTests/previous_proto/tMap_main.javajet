<%@ jet 
	imports="
	java.util.ArrayList
	java.util.Collections
	java.util.Comparator
	java.util.List
	java.util.HashMap
	java.util.Map
	java.util.HashSet
	java.util.Set
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.commons.utils.generation.CodeGenerationUtils
	org.talend.designer.mapper.MapperMain
	org.talend.designer.mapper.MapperComponent
	org.talend.designer.mapper.external.data.ExternalMapperData
	org.talend.designer.mapper.external.data.ExternalMapperTable
	org.talend.designer.mapper.external.data.ExternalMapperTableEntry
	org.talend.designer.mapper.language.ILanguage
	org.talend.designer.mapper.language.generation.GenerationManagerFactory
	org.talend.designer.mapper.language.generation.JavaGenerationManager
	org.talend.designer.mapper.language.generation.HashedMetadataTable
	org.talend.designer.mapper.language.LanguageProvider
	org.talend.designer.mapper.model.tableentry.TableEntryLocation
	org.talend.designer.mapper.utils.DataMapExpressionParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.EConnectionType
	org.talend.designer.mapper.language.generation.TableType
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.process.BlockCode
	org.talend.core.model.process.IMatchingMode
	" 
%>
<%


	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	MapperComponent node = (MapperComponent) codeGenArgument.getArgument();
	boolean stats = codeGenArgument.isStatistics(); 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	%>
	
			
	<%
	
	
        ILanguage currentLanguage = LanguageProvider.getJavaLanguage();
        
        List<IConnection> inputConnections = (List<IConnection>) node.getIncomingConnections();
        List<IConnection> outputConnections = (List<IConnection>) node.getOutgoingConnections();
        ExternalMapperData data = (ExternalMapperData) node.getExternalData();
        String uniqueNameComponent = node.getUniqueName();
        boolean checkingSyntax = codeGenArgument.isCheckingSyntax();

        String cr = "\n";
        String rejected = "rejected_" + uniqueNameComponent;
        String rejectedInnerJoin = "rejectedInnerJoin_" + uniqueNameComponent;

        List<ExternalMapperTable> inputTables = data.getInputTables();
        List<ExternalMapperTable> varsTables = data.getVarsTables();
        List<ExternalMapperTable> outputTables = data.getOutputTables();

        int indent = 1;

        DataMapExpressionParser expressionParser = new DataMapExpressionParser(currentLanguage);

        JavaGenerationManager gm = (JavaGenerationManager) node.initGenerationManager();

        StringBuilder sb = new StringBuilder();

        gm.setInputTables(inputTables);
        gm.setVarsTables(varsTables);

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // INPUTS : initialization of input arrays from expressions keys and hashes
        // 
        sb.append(cr + gm.indent(indent));
        sb.append(cr + gm.indent(indent) + "// ###############################");
        sb.append(cr + gm.indent(indent) + "// # Input tables (lookups)");

        HashMap<String, IConnection> hNameToConnection = new HashMap<String, IConnection>();
        for (IConnection connection : inputConnections) {
            hNameToConnection.put(connection.getName(), connection);
        }

        ArrayList<ExternalMapperTable> inputTablesWithInnerJoin = new ArrayList<ExternalMapperTable>();
        ArrayList<ExternalMapperTable> lookupTables = new ArrayList<ExternalMapperTable>();
        boolean hasValidLookupTables = false;

		  int closeBracketCounter = 0;

        HashMap<String, ExternalMapperTableEntry> hExternalInputTableEntries = new HashMap<String, ExternalMapperTableEntry>();
        for (ExternalMapperTable externalTable : inputTables) {
            String tableName = externalTable.getName();
            IConnection connection = hNameToConnection.get(tableName);
            if (connection == null) {
                continue;
            }
            EConnectionType connectionType = connection.getLineStyle();
            if (connectionType == EConnectionType.FLOW_MAIN) {
            
            
                     String className = tableName + "Struct";
            		%>
            		
			
    			  	 fsi.put(null, <%= tableName%>);
				}// End of branch "main_9"
				
			} // end temporarly main loop
			
		
					fsi.endPut();
					
					fsi.setILightSerializable(new <%= className%>());
		


		<%
        List<ExternalMapperTable> inputTablesList = new ArrayList<ExternalMapperTable>(data.getInputTables());
        int lstSizeInputs = inputTablesList.size();
        for (int i = 1; i < lstSizeInputs; i++) { // T 100
            ExternalMapperTable inputTable = (ExternalMapperTable) inputTablesList.get(i);
            String tableNameForLookupInit = inputTable.getName();
            IConnection connectionForLookupInit = hNameToConnection.get(tableNameForLookupInit);
            if (connectionForLookupInit == null) {
                continue;
            }
            List<ExternalMapperTableEntry> tableEntries = inputTable.getMetadataTableEntries();
            if (tableEntries == null) {
                continue;
            }
			%>

					tHash_Lookup_<%=tableNameForLookupInit%>.initGet();

			<%
        } // T 100
        %>
		
					org.talend.commons.utils.time.TimeMeasure.begin("main loop");

		
					// Restarting main loop
					while(fsi.hasNext()) {  	 

						// Start of branch "<%= tableName%>"
						if (<%= tableName%> != null) {

						
						org.talend.commons.utils.time.TimeMeasure.resume("fsi.next()");
					  	<%= tableName%> = (<%= className%>) fsi.next(); 
						org.talend.commons.utils.time.TimeMeasure.pause("fsi.next()");
            		
            		
            		
            		<%
            
		%>

		  boolean <%= rejectedInnerJoin %> = false;
            				    								  
		<%
            
			  	  	   if(externalTable.isActivateExpressionFilter() && externalTable.getExpressionFilter() != null && !externalTable.getExpressionFilter().trim().equals("")) { 

		                String key = CodeGenerationUtils.buildProblemKey(uniqueNameComponent,
   	                     JavaGenerationManager.PROBLEM_KEY_FIELD.FILTER.toString(), tableName);
   	                     
   	                     
   	                     
					  	  	 %>
             
			   	  		  if(
 				  		  			<%= checkingSyntax ? CodeGenerationUtils.buildJavaStartFieldKey(key) : "" %>
 				  		  			!(
 				  		  			<%// keep this line to allow comments in filter %>
 				  		  			<%= externalTable.getExpressionFilter()%>
 				  		  			<%// keep this line to allow comments in filter %>
 				  		  			)
  				  		  			<%= checkingSyntax ? CodeGenerationUtils.buildJavaEndFieldKey(key) : "" %>
	  	  		  				) {
		      	  				continue;
		    		  	  	   }
		    	  	  	  
				 	  	   <%
			 	  	   }
                  continue;
                  
            } else if (connectionType == EConnectionType.FLOW_REF) {

                IMetadataTable metadataTable = connection.getMetadataTable();
                if (externalTable != null) {
                    if (externalTable.isInnerJoin()) {
                        inputTablesWithInnerJoin.add(externalTable);
                    }
                    lookupTables.add(externalTable);
                    hExternalInputTableEntries.clear();
                    List<ExternalMapperTableEntry> metadataTableEntries = externalTable.getMetadataTableEntries();
                    if (metadataTableEntries == null) {
                        continue;
                    }
                    for (ExternalMapperTableEntry externalTableEntry : metadataTableEntries) {
                        hExternalInputTableEntries.put(externalTableEntry.getName(), externalTableEntry);
                    }
                    List<IMetadataColumn> listColumns = metadataTable.getListColumns();
                    ArrayList<String> keysNames = new ArrayList<String>();
                    ArrayList<String> keysValues = new ArrayList<String>();
                    for (IMetadataColumn column : listColumns) {
                        String columnName = column.getLabel();
                        ExternalMapperTableEntry externalInputTableEntry = hExternalInputTableEntries.get(columnName);
                        if (externalInputTableEntry != null) {
                            String expressionKey = externalInputTableEntry.getExpression();
                            if (expressionKey != null && !"".equals(expressionKey.trim())) {
                                keysNames.add(columnName);
                                keysValues.add(expressionKey);
                            }
                        }
                    }
                    String[] aKeysNames = keysNames.toArray(new String[0]);
                    String[] aKeysValues = keysValues.toArray(new String[0]);
    		           
    		        String className = tableName + "Struct";

                    hasValidLookupTables = true;
                    
                    if (aKeysValues.length > 0 || checkingSyntax) {
                        sb.append(cr
                                + gm.buildLookupDataInstance(uniqueNameComponent, tableName, aKeysNames, aKeysValues,
                                        indent, checkingSyntax));
                        %>
                        
                        	<%= sb.toString()%>
                          
                     <% 
                     }


                     sb = new StringBuilder();
                     String matchingMode = externalTable.getMatchingMode();
					if(matchingMode == null) {
						if(aKeysValues.length > 0) {
							matchingMode = "UNIQUE_MATCH";
						} else {
							matchingMode = "ALL_ROWS";
						}
					}
                     boolean isMultipleResultMode = matchingMode.equals("ALL_ROWS") || matchingMode.equals("ALL_MATCHES");
                     %>
                            
				  		<%if(isMultipleResultMode) { // T 55 %>
	 					    boolean forceLoop<%= tableName %> = false;
	       		  	    	int sizeResultsFromLookup_<%= tableName %> = -1;
       		  	    	<% } // T 55 %>
       		  	    	
       		  	    	
       		  	    	<%
                        if(aKeysValues.length > 0) { // T 1
                        %>
					  		<%if(isMultipleResultMode) { // T 80 %>
 									 java.util.List<<%= className %>> listFromLookup_<%= tableName %> = null;
 							<% } // T 80 %>
 									 <%= className %> <%= tableName %>ObjectFromLookup = null;
                          
		           		  	    if(!<%= rejectedInnerJoin %>)
		           		  	    { // G 20
		                          		  <%=tableName%>HashKey.hashCodeDirty = true;


						org.talend.commons.utils.time.TimeMeasure.resume("tHash_Lookup");

	  									  tHash_Lookup_<%= tableName %>.get( <%= tableName %>HashKey );

						org.talend.commons.utils.time.TimeMeasure.pause("tHash_Lookup");



	  									  if(tHash_Lookup_<%= tableName %>.hasResult()) { // G 90
  									  
  									  		
  									  
  									  		<%if(isMultipleResultMode) { // T 50 %>
  									  		
		  									  if(tHash_Lookup_<%= tableName %>.resultIsObject()) { // G 49
		  									  
		  									 <% } // T 50 %>
	  									  
	  										  		<%= tableName %>ObjectFromLookup = (<%= tableName %>Struct) tHash_Lookup_<%= tableName %>.getResultObject();

  									  	<%if(isMultipleResultMode) { // T 51 %>

													sizeResultsFromLookup_<%= tableName %> = <%= tableName %>ObjectFromLookup != null ? 1 : -1;
	  									  
		  									  } else { // G 49
	
													listFromLookup_<%= tableName %> = (java.util.List<<%= className %>>) tHash_Lookup_<%= tableName %>.getResultList();
													sizeResultsFromLookup_<%= tableName %> = listFromLookup_<%= tableName %> != null ? listFromLookup_<%= tableName %>.size() : -1;
	  									  
	  										  }
		  								 <% } // T 51 
		  								 %>
		  								  
		  									} // G 90
		  									else { // G 91
		  										<%
		  										if(externalTable.isInnerJoin()) {
		  										%>
		  										  <%= rejectedInnerJoin %> = true;
		  										<%
	  											}
	  											%>
												<%if(isMultipleResultMode) { // T 56 %>
		  											forceLoop<%= tableName %> = true;
	  											<% } // T 56 %>
	  										} // G 91
	  								
			           		  	  } // G 20
			           		  	  
								  <%if(isMultipleResultMode) { // T 57 %>
			           		  	    else { // G 21
   										 forceLoop<%= tableName %> = true;
			           		  	    } // G 21
                    		  	   <%
                    		  	   } // T 57

				           		  	  if(matchingMode.equals("UNIQUE_MATCH")) { // T 52 
				           		  	  %>
				           		  	   	if(tHash_Lookup_<%= tableName %>.getCount(<%= tableName %>HashKey) > 1) {
			  							<%
			  								StringBuilder sbMoreOneResult = new StringBuilder("\"WARNING: UNIQUE MATCH is configured for the lookup '"+ tableName +"' and it contains more one result from keys : ");
			  								for(int iKeys = 0; iKeys < aKeysNames.length; iKeys++) {
			  									if(iKeys > 0) {
					  								sbMoreOneResult.append(",");
			  								 	}
				  								sbMoreOneResult.append( " " + tableName + "."+ aKeysNames[iKeys] + " = '\" + " + tableName + "HashKey."+ aKeysNames[iKeys] + " + \"'");
									 		}
			  								sbMoreOneResult.append( "\"");
									 		%>
									 		System.out.println(<%= sbMoreOneResult.toString()%>);
									 	}
									 <% 
									 } // T 52 
                    		  	 } // T 1 
                    		  	 else { // T 2
                    		  	 %>
                    		  	 
		                      	 boolean hasAtLeastOneValidLookup_<%= tableName %> = false;
		                      	 Object[] <%= tableName %>Array = null;
		                      	 
			           		  	    if(!<%= rejectedInnerJoin %>)
			           		  	    { // G 35
   	                 		  	 	<%= tableName %>Array = tHash_Lookup_<%= tableName %>.getResultArray();
									   
										   if(<%= tableName %>Array.length == 0) {
			  									<%
			  									if(externalTable.isInnerJoin()) {
			  									%>
			  									  <%= rejectedInnerJoin %> = true;
			  									<%
		  										}
		  										%>
		  										forceLoop<%= tableName %> = true;
											}
										} // G 35
										else { // G 36
	  										forceLoop<%= tableName %> = true;
										} // G 36
									   sizeResultsFromLookup_<%= tableName %> = <%= tableName %>Array != null ? <%= tableName %>Array.length : -1;
                    		  	 <%
                    		  	 } // T 2
                    		  	
                    		  	if(isMultipleResultMode) { // T 60
                    		  	 %>

                    		  	  for(int i<%= tableName %> = 0; sizeResultsFromLookup_<%= tableName %> != -1 && i<%= tableName %> < sizeResultsFromLookup_<%= tableName %> || forceLoop<%= tableName %> ;i<%= tableName %>++) { 

										<%
										gm.addBlocksCodeToClose(new BlockCode("close loop of lookup '" + tableName +"'"));
									  	%>
                    		  	 
                    		  	 <% } // T 60 %>   
                    		  	 
                    		  	    <%= tableName %>Struct fromLookup_<%= tableName %> = null;
		                            <%= tableName %>Struct <%= tableName %> = <%= tableName %>Default;
										 
		                          	<%if(isMultipleResultMode) { // T 69 %>
										 if(!forceLoop<%= tableName %>) { // G 46
                    		  	    <%
                    		  	    } // T 69
                    		  	    
		                          	if(aKeysValues.length > 0) { // T 10
		                          	%>
		                          	  
		                          		
		                          		if(<%= tableName %>ObjectFromLookup != null) {
		                          		
	      	              		   	   		fromLookup_<%= tableName %> = <%= tableName %>ObjectFromLookup;
		                    		  	    <%= tableName %> = fromLookup_<%= tableName %>;
			  							} 
			  							
		                          	  <%if(isMultipleResultMode) { // 61 %>
			  							else if(listFromLookup_<%= tableName %> != null) {
	      	              		   	   		fromLookup_<%= tableName %> = listFromLookup_<%= tableName %>.get(i<%= tableName %>);
		                    		  	    <%= tableName %> = fromLookup_<%= tableName %>;
	      	              		   		}
	                    		  	 <% } // 61 %>   
      	              		   	<%
      	              		   	} // T 10
      	              		   	else { // T 11
      	              		   	%>
      	              		   		if(i<%= tableName %> < <%= tableName %>Array.length) {
      	              		   			fromLookup_<%= tableName %> = (<%= tableName %>Struct) <%= tableName %>Array[i<%= tableName %>];
		                    		  	    	<%= tableName %> = fromLookup_<%= tableName %>;
      	              		   		}
      	              		   	<%
      	              		   	} // T 11
                    		  	    	%>
                    		  	    
                    		  	  	   <%
                    		  	  	   if(
                    		  	  	   		(externalTable.isInnerJoin() || matchingMode.equals("ALL_ROWS"))
                    		  	  	   		&& externalTable.isActivateExpressionFilter() 
                    		  	  	   		&& externalTable.getExpressionFilter() != null 
                    		  	  	   		&& !externalTable.getExpressionFilter().trim().equals("")
                    		  	  	   ) { // 12 
                    		  	  	   		
							                String key = CodeGenerationUtils.buildProblemKey(uniqueNameComponent,
			   		                     JavaGenerationManager.PROBLEM_KEY_FIELD.FILTER.toString(), tableName);
                    		  	  	   %>
                    		  	  		
                    		  	  		
							   	  		  if( !<%= rejectedInnerJoin %> && 
					 				  		  			<%= checkingSyntax ? CodeGenerationUtils.buildJavaStartFieldKey(key) : "" %>
					 				  		  			!(
					 				  		  			<%// keep this line to allow comments in filter %>
					 				  		  			<%= externalTable.getExpressionFilter()%>
					 				  		  			<%// keep this line to allow comments in filter %>
					 				  		  			)
					  				  		  			<%= checkingSyntax ? CodeGenerationUtils.buildJavaEndFieldKey(key) : "" %>
						  	  		  			) { // G 16
                    		  	  		  
  		                    		  	    	fromLookup_<%= tableName %> = null;
                    		  	  		  		
	  												<%
				  									if(externalTable.isInnerJoin() && aKeysValues.length > 0) {
				  									%>
		         	            		  	  			<%= rejectedInnerJoin %> = true;
													<%
				  									} else if(externalTable.isInnerJoin() && aKeysValues.length > 0){
				  									%>
					  									<%= tableName %> = <%= tableName %>Default;
				  									<%
				  									} else if(externalTable.isInnerJoin() && aKeysValues.length == 0){
				  									%>
					                    		  	   	if(sizeResultsFromLookup_<%= tableName %> != -1 
					                    		  	   		&& i<%= tableName %> == sizeResultsFromLookup_<%= tableName %> - 1 
					                    		  	   		&& !hasAtLeastOneValidLookup_<%= tableName %>) 
					                    		  	   	{ // G 15
			     	  	            		  	  			<%= rejectedInnerJoin %> = true;
					                    		  	   	} // G 15
														<%
				  									}
				  									%>
     	               		  	  	  } // G 16
     	               		  	  	  <%
    	               		  	  	  if(aKeysValues.length == 0){
     	               		  	  	  %>
			                    		  	 if(fromLookup_<%= tableName %> == null && !<%= rejectedInnerJoin %>) 
			                    		  	 { // 17
				  										continue;
				                    		 } // 17
				                    		 <%
			  									 if(externalTable.isInnerJoin()) {
					  							 %>
					  								// 17
				                    		 	else if(!<%= rejectedInnerJoin %>)
				                    		 	{ // 18
					                    	   	hasAtLeastOneValidLookup_<%= tableName %> = true;
					                    		} // 18
				                    		 <%
				                    		 }
				                    		 %>	
     	               		  	  	  <%
     	               		  	  	  }
     	               		  	  	  %>
     	               		  	  	  
                    		  	  		  
	                    		  	   <%
	                    		  	   } // T 12
	                    		  	   
	                    		  	%>	
	                    		  	
		                        <%if(isMultipleResultMode) { // T 70 %>
	                    		  	} // G 46
	                    		  	
									 	forceLoop<%= tableName %> = false;
									 	
								<% } // T 70 %>
	                    		  	
	  									<%
                } // if(externalTable != null) {
            } // else if(connectionType == EConnectionType.FLOW_REF) {
        } // for (ExternalMapperTable externalTable : inputTables) {
        boolean atLeastOneInputTableWithInnerJoin = !inputTablesWithInnerJoin.isEmpty();

        sb.append(cr);

        sb.append(cr + gm.indent(indent) + "// ###############################");
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // VARIABLES
        // 
        sb.append(cr);
        sb.append(cr + gm.indent(indent) + "{ // start of Var scope");
        indent++;
        sb.append(cr);
        sb.append(cr + gm.indent(indent) + "// ###############################");
        sb.append(cr + gm.indent(indent) + "// # Vars tables");
        for (ExternalMapperTable varsTable : varsTables) {
            List<ExternalMapperTableEntry> varsTableEntries = varsTable.getMetadataTableEntries();
            if (varsTableEntries == null) {
                continue;
            }
            String varsTableName = varsTable.getName();
            String instanceVarName = varsTableName + "__" + uniqueNameComponent;
            String className = instanceVarName + "__Struct";

            sb.append(cr + gm.indent(indent) + className + " " + varsTableName + " = " + instanceVarName + ";");
            for (ExternalMapperTableEntry varsTableEntry : varsTableEntries) {
                String varsColumnName = varsTableEntry.getName();
                String varExpression = varsTableEntry.getExpression();
                if (varExpression == null || varExpression.trim().length() == 0) {
                    varExpression = JavaTypesManager.getDefaultValueFromJavaIdType(varsTableEntry.getType(),
                            varsTableEntry.isNullable());
                }
                TableEntryLocation[] entryLocations = expressionParser.parseTableEntryLocations(varExpression);
                ArrayList<TableEntryLocation> listCoupleForAddTablePrefix = new ArrayList<TableEntryLocation>();
                for (TableEntryLocation location : entryLocations) {
                    if (gm.isInputTable(varExpression)) {
                        listCoupleForAddTablePrefix.add(location);
                    }
                }

                String key = CodeGenerationUtils.buildProblemKey(uniqueNameComponent,
                        JavaGenerationManager.PROBLEM_KEY_FIELD.METADATA_COLUMN.toString(), varsTableName,
                        varsColumnName);

                if (checkingSyntax) {
                    sb.append(cr).append(CodeGenerationUtils.buildJavaStartFieldKey(key));
                }

                String expression = gm.indent(indent)
                        + gm.getGeneratedCodeTableColumnVariable(uniqueNameComponent, varsTableName, varsColumnName, false) + " = " + varExpression
                        + ";";
                sb.append(cr).append(expression);

                if (checkingSyntax) {
                    sb.append(cr).append(CodeGenerationUtils.buildJavaEndFieldKey(key));
                }

            }
        }
        sb.append(cr + gm.indent(indent) + "// ###############################");
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////

        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // /////////////////////////////////////////////////////////////////////////////////////////////////////
        // OUTPUTS
        // 
        sb.append(cr + gm.indent(indent));
        sb.append(cr + gm.indent(indent) + "// ###############################");
        sb.append(cr + gm.indent(indent) + "// # Output tables");

        ArrayList<ExternalMapperTable> outputTablesSortedByReject = new ArrayList<ExternalMapperTable>(outputTables);
        // sorting outputs : rejects tables after not rejects table
        Collections.sort(outputTablesSortedByReject, new Comparator<ExternalMapperTable>() {

            public int compare(ExternalMapperTable o1, ExternalMapperTable o2) {
                if (o1.isReject() != o2.isReject()) {
                    if (o1.isReject()) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
                if (o1.isRejectInnerJoin() != o2.isRejectInnerJoin()) {
                    if (o1.isRejectInnerJoin()) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
                return 0;
            }

        });

        boolean lastValueReject = false;
        boolean oneFilterForNotRejectTable = false;
        boolean allNotRejectTablesHaveFilter = true;
        boolean atLeastOneReject = false;
        boolean atLeastOneRejectInnerJoin = false;
        boolean closeTestInnerJoinConditionsBracket = false;

        Map<String, IConnection> nameToOutputConnection = new HashMap<String, IConnection>();
        for (IConnection outputConnection : outputConnections) {
            nameToOutputConnection.put(outputConnection.getName(), outputConnection);
        }

        int lstSizeOutputs = outputTablesSortedByReject.size();
        // ///////////////////////////////////////////////////////////////////
        // init of allNotRejectTablesHaveFilter and atLeastOneReject
        String lastValidOutputTableName = null;
        for (int i = 0; i < lstSizeOutputs; i++) {
            ExternalMapperTable outputTable = (ExternalMapperTable) outputTablesSortedByReject.get(i);

            String outputTableName = outputTable.getName();

            if (outputTable.isRejectInnerJoin()) {
                atLeastOneRejectInnerJoin = true;
            }
            List<ExternalMapperTableEntry> columnsEntries = outputTable.getMetadataTableEntries();
            List<ExternalMapperTableEntry> filters = outputTable.getConstraintTableEntries();
            boolean hasFilter = filters != null && filters.size() > 0 && !gm.checkFiltersAreEmpty(outputTable) 
            	|| outputTable.isActivateExpressionFilter() && outputTable.getExpressionFilter() != null && !outputTable.getExpressionFilter().trim().equals("");
            if (columnsEntries != null && columnsEntries.size() > 0) {
                if (!hasFilter && !(outputTable.isReject() || outputTable.isRejectInnerJoin())) {
                    allNotRejectTablesHaveFilter = false;
                }
                if (outputTable.isReject()) {
                    atLeastOneReject = true;
                }
            }

			IConnection outputConnection = nameToOutputConnection.get(outputTableName);
            if (outputConnection != null) {
                sb.append(cr + gm.indent(indent) + outputTableName + " = null;");
            }
                if(checkingSyntax 
                || !checkingSyntax && outputConnection != null) {
	            	lastValidOutputTableName = outputTableName;
	            }

        }
        // ///////////////////////////////////////////////////////////////////

		// System.out.println(uniqueNameComponent + " lastValidOutputTableName="+lastValidOutputTableName);

        sb.append(cr);

        if (allNotRejectTablesHaveFilter && atLeastOneReject) {
            // write rejected = false;
            sb.append(cr + gm.indent(indent) + "boolean " + rejected + " = true;");
        }

        // write conditions for inner join reject
        if (lastValidOutputTableName != null && hasValidLookupTables && lstSizeOutputs > 0 && atLeastOneInputTableWithInnerJoin) {
            sb.append(cr + gm.indent(indent) + "if(");
            sb.append("!" + rejectedInnerJoin);
            sb.append(" ) {");
            closeTestInnerJoinConditionsBracket = true;
            indent++;
        }

        // ///////////////////////////////////////////////////////////////////
        // run through output tables list for generating intilization of outputs arrays
        int dummyVarCounter = 0;
        for (int indexCurrentTable = 0; indexCurrentTable < lstSizeOutputs; indexCurrentTable++) {
            ExternalMapperTable outputTable = (ExternalMapperTable) outputTablesSortedByReject.get(indexCurrentTable);
            List<ExternalMapperTableEntry> outputTableEntries = outputTable.getMetadataTableEntries();
            String outputTableName = outputTable.getName();
            boolean connectionExists = true;
            IConnection outputConnection = nameToOutputConnection.get(outputTableName);
            HashedMetadataTable hashedMetadataTable = null;
            if (outputTableEntries == null || outputConnection == null) {
                connectionExists = false;
            } else {
            	hashedMetadataTable = new HashedMetadataTable(outputConnection.getMetadataTable());
            }

			// System.out.println("Output table: (1)" + outputTableName);

            List<ExternalMapperTableEntry> filters = outputTable.getConstraintTableEntries();

            boolean currentIsReject = outputTable.isReject();
            boolean currentIsRejectInnerJoin = outputTable.isRejectInnerJoin();

            boolean hasFilters = filters != null && filters.size() > 0 && !gm.checkFiltersAreEmpty(outputTable);
            boolean hasExpressionFilter = outputTable.isActivateExpressionFilter() && outputTable.getExpressionFilter() != null && !outputTable.getExpressionFilter().trim().equals("");

            boolean rejectValueHasJustChanged = lastValueReject != (currentIsReject || currentIsRejectInnerJoin);

            oneFilterForNotRejectTable = !(currentIsReject || currentIsRejectInnerJoin) && (hasFilters || hasExpressionFilter);

            if (rejectValueHasJustChanged) {

                if (closeTestInnerJoinConditionsBracket) {
                    indent--;
                    sb.append(cr + gm.indent(indent) + "} // closing inner join bracket (1)");
                    if (atLeastOneReject && allNotRejectTablesHaveFilter) {
                        sb.append(cr + " else {");
                        indent++;
                        sb.append(cr + gm.indent(indent) + rejected + " = false;");
                        indent--;
                        sb.append(cr + gm.indent(indent) + "} // closing else inner join bracket (1)");
                    }
                    closeTestInnerJoinConditionsBracket = false;
                }
            }

            // No connection matching and no checking errors
            if (connectionExists || checkingSyntax) {
	            if (rejectValueHasJustChanged) {
	                sb.append(cr + gm.indent(indent) + "// ###### START REJECTS ##### ");
	            }

	            // write filters conditions and code to execute
	            if (!currentIsReject && !currentIsRejectInnerJoin || rejectValueHasJustChanged
	                    && oneFilterForNotRejectTable || currentIsReject && allNotRejectTablesHaveFilter
	                    || currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin || checkingSyntax) {

	                boolean closeFilterOrRejectBracket = false;
	                if (currentIsReject || currentIsRejectInnerJoin) {
	                    sb.append(cr + cr + gm.indent(indent) + "// # Output reject table : '" + outputTableName + "'");
	                } else {
	                    sb.append(cr + cr + gm.indent(indent) + "// # Output table : '" + outputTableName + "'");
	                }
	                if (hasFilters || hasExpressionFilter || currentIsReject || currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin) {
	                    sb.append(cr + gm.indent(indent) + "// # Filter conditions ");
	
	                    String key = CodeGenerationUtils.buildProblemKey(uniqueNameComponent,
	                            JavaGenerationManager.PROBLEM_KEY_FIELD.FILTER.toString(), outputTableName, null);
	                    if (checkingSyntax) {
	                        sb.append("\n").append(CodeGenerationUtils.buildJavaStartFieldKey(key));
	                    }
	
	                    String ifConditions = gm.indent(indent) + "if( ";
	
	                    String rejectedTests = null;
	                    if (allNotRejectTablesHaveFilter && atLeastOneReject && currentIsReject && currentIsRejectInnerJoin
	                            && atLeastOneInputTableWithInnerJoin) {
	                        rejectedTests = rejected + " || " + rejectedInnerJoin;
	                        if (hasFilters || hasExpressionFilter) {
	                            rejectedTests = "(" + rejectedTests + ")";
	                        }
	                    } else if (allNotRejectTablesHaveFilter && atLeastOneReject && currentIsReject) {
	                        rejectedTests = rejected;
	                    } else if (currentIsRejectInnerJoin && atLeastOneInputTableWithInnerJoin) {
	                        rejectedTests = rejectedInnerJoin;
	                    }
	                    if (hasFilters && !hasExpressionFilter || hasExpressionFilter) {
	                        String filtersConditions = null;
	                        if(hasExpressionFilter) {
		                     	filtersConditions = outputTable.getExpressionFilter();
		                     } else {
		                        filtersConditions = gm.buildConditions(filters, expressionParser);
		                     }
	                        if (rejectedTests == null) {
	                            ifConditions += cr + cr + filtersConditions  + cr + cr;
	                        } else {
	                            ifConditions += rejectedTests + " && (" + cr + cr + filtersConditions + cr + cr +")";
	                        }
	                    } else {
	                        ifConditions += rejectedTests;
	                    }
	                    ifConditions += " ) {";
	
	                    sb.append(cr).append(ifConditions);
	
	                    if (checkingSyntax) {
	                        sb.append("\n").append(CodeGenerationUtils.buildJavaEndFieldKey(key));
	                    }
	
	                    indent++;
	                    closeFilterOrRejectBracket = true;
	                    if (allNotRejectTablesHaveFilter && !(currentIsReject || currentIsRejectInnerJoin)
	                            && atLeastOneReject) {
	                        sb.append(cr + gm.indent(indent) + rejected + " = false;");
	                    }
	                }

	                if (!currentIsReject && !currentIsRejectInnerJoin || currentIsReject || currentIsRejectInnerJoin
	                        && atLeastOneInputTableWithInnerJoin || checkingSyntax) {
	                    for (ExternalMapperTableEntry outputTableEntry : outputTableEntries) {
	                        String outputColumnName = outputTableEntry.getName();
	                        IMetadataColumn metadataColumn = null;
	                        if(connectionExists) {
		                        metadataColumn = hashedMetadataTable.getColumn(outputColumnName);
		                    }
	                        
	                        String outputExpression = outputTableEntry.getExpression();
	                        if (outputExpression == null || outputExpression.trim().length() == 0) {
	                        	if(metadataColumn == null) {
		                            outputExpression = JavaTypesManager.getDefaultValueFromJavaIdType(outputTableEntry
	    	                                .getType(), outputTableEntry.isNullable());
	    	                    } else {
		                            outputExpression = JavaTypesManager.getDefaultValueFromJavaIdType(metadataColumn
	    	                                .getTalendType(), metadataColumn.isNullable());
	    	                    }
	                        }
	
	                        String key = CodeGenerationUtils.buildProblemKey(uniqueNameComponent,
	                                JavaGenerationManager.PROBLEM_KEY_FIELD.METADATA_COLUMN.toString(), outputTableName,
	                                outputColumnName);
	                        if (checkingSyntax) {
	                            sb.append("\n").append(CodeGenerationUtils.buildJavaStartFieldKey(key));
	                        }
	
	                        String assignationVar = null;
	                        if (connectionExists) {
	                            assignationVar = gm.getGeneratedCodeTableColumnVariable(uniqueNameComponent, outputTableName + "_tmp",
	                                    outputColumnName, false);
	                        } else {
	                        	if(metadataColumn == null) {
		                            assignationVar = JavaTypesManager.getTypeToGenerate(outputTableEntry.getType(),
	                                    outputTableEntry.isNullable())
	                                    + " dummyVar" + (dummyVarCounter++);
	                            } else {
		                            assignationVar = JavaTypesManager.getTypeToGenerate(metadataColumn
	    	                                .getTalendType(), metadataColumn.isNullable())
	                                    + " dummyVar" + (dummyVarCounter++);
	                            }
	                        }
    	                    String expression = gm.indent(indent) + assignationVar + " = " + outputExpression + ";";
	
	                        sb.append(cr).append(expression);
	
	                        if (checkingSyntax) {
	                            sb.append("\n").append(CodeGenerationUtils.buildJavaEndFieldKey(key));
	                        }
	
	                    } // for entries
	
	                    if (connectionExists) {
	                        sb.append(cr + gm.indent(indent) + outputTableName + " = " + outputTableName + "_tmp;");
	                    }

	                }
	                if (closeFilterOrRejectBracket) {
	                    indent--;
	                    sb.append(cr + gm.indent(indent) + "} // closing filter/reject");
	                }
	
	            }
	            lastValueReject = currentIsReject || currentIsRejectInnerJoin;
	
	         }

			// System.out.println("Output table: (2)" + outputTableName);

            boolean isLastTable = indexCurrentTable == lstSizeOutputs - 1;
            if (closeTestInnerJoinConditionsBracket 
            	&& (isLastTable || !checkingSyntax && (outputTableName.equals(lastValidOutputTableName) || lastValidOutputTableName == null))) {
                indent--;
                sb.append(cr + gm.indent(indent) + "}  // closing inner join bracket (2)");
                closeTestInnerJoinConditionsBracket = false;
            }

        } // for output tables

        sb.append(cr + gm.indent(indent) + "// ###############################");

        
        sb.append(cr);
        indent--;
        sb.append(cr + gm.indent(indent) + "} // end of Var scope");
        
        sb.append(cr + cr + gm.indent(indent) + rejectedInnerJoin + " = false;");
        
        sb.append(cr);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


%>
<%= sb.toString()%>
	
