// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.4.1.r16077).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package java_project_9.test_by_ram_stg_product_attributes_0_1;

import routines.libs;
import routines.routine_tMap_10_persistence_01_types;
import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.4.1.r16077
 * @status DEV
 */
public class TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES {
    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public static String Path;
        public static String hostAMC;
        public static String portAMC;
        public static String userNameAMC;
        public static String passwordAMC;
        public static String databaseAMC;
        public static String schemaAMC;
        public static String ContextFileName;
    }

    private static ContextProperties context = new ContextProperties();
    private static final String jobName = "TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES";
    private static final String projectName = "JAVA_PROJECT_9";
    public static Integer errorCode = null;
    private static String currentComponent = "";
    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
    StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
            "_GKaCYH2JEd2DUIdlI9U7UQ", "0.1");
    MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils(
            "_GKaCYH2JEd2DUIdlI9U7UQ", "0.1");

    private class TalendException extends Exception {
        private Exception e = null;
        private TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES c = null;

        private TalendException(TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES c,
                Exception e) {
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e
                        .getMessage());
                System.err
                        .println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass()
                            .getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                        talendLogs_LOGS.addMessage("Java Exception",
                                currentComponent, 6, e.getMessage(), 1);
                        talendLogs_LOGSProcess();
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                } catch (TalendException e) {
                    // do nothing
                }

            }
        }
    }

    public void tFileInputDelimited_3_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFilterColumns_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFilterColumns_2", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFileOutputDelimited_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFileInputDelimited_4_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFilterColumns_3_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFilterColumns_3", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void vFlowMeter_row_products_error(Exception exception)
            throws TalendException {
        end_Hash.put("vFlowMeter_row_products", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFileInputDelimited_5_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
        talendStats_STATS.addMessage("failure", "tFileInputDelimited_5",
                end_Hash.get("tFileInputDelimited_5")
                        - start_Hash.get("tFileInputDelimited_5"));
        talendStats_STATSProcess();

        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void vFlowMeter_input_Reference_Attribute_error(Exception exception)
            throws TalendException {
        end_Hash.put("vFlowMeter_input_Reference_Attribute", System
                .currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tFileTouch_1_error(Exception exception) throws TalendException {
        end_Hash.put("tFileTouch_1", System.currentTimeMillis());
        tFileTouch_1_onSubJobError(exception);
    }

    public void tAdvancedHash_row_input_Attribute_Values_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHash_row_input_Attribute_Values", System
                .currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tAdvancedHash_row_STG_PEICE_PROCESS_ID_error(Exception exception)
            throws TalendException {
        end_Hash.put("tAdvancedHash_row_STG_PEICE_PROCESS_ID", System
                .currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tMap_2_TMAP_OUT_error(Exception exception)
            throws TalendException {
        end_Hash.put("tMap_2_TMAP_OUT", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tMap_2_TMAP_IN_error(Exception exception)
            throws TalendException {
        end_Hash.put("tMap_2_TMAP_IN", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tSortRow_1_SortOut_error(Exception exception)
            throws TalendException {
        end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void tSortRow_1_SortIn_error(Exception exception)
            throws TalendException {
        end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
        tFileInputDelimited_5_onSubJobError(exception);
    }

    public void talendLogs_LOGS_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
        talendLogs_LOGS_onSubJobError(exception);
    }

    public void talendLogs_CONSOLE_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
        talendLogs_LOGS_onSubJobError(exception);
    }

    public void talendStats_STATS_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendStats_STATS", System.currentTimeMillis());
        talendStats_STATS_onSubJobError(exception);
    }

    public void talendStats_CONSOLE_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
        talendStats_STATS_onSubJobError(exception);
    }

    public void talendMeter_METTER_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendMeter_METTER", System.currentTimeMillis());
        talendMeter_METTER_onSubJobError(exception);
    }

    public void talendMeter_CONSOLE_error(Exception exception)
            throws TalendException {
        end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
        talendMeter_METTER_onSubJobError(exception);
    }

    public void tFileInputDelimited_5_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFileTouch_1_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void talendLogs_LOGS_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void talendStats_STATS_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void talendMeter_METTER_onSubJobError(Exception exception)
            throws TalendException {
    }

    static class row_input_Attribute_ValuesStruct
            implements
            routines.system.IPersistableComparableLookupRow<row_input_Attribute_ValuesStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.ATTRIBUTE_ID == null) ? 0 : this.ATTRIBUTE_ID
                                .hashCode());

                result = prime
                        * result
                        + ((this.ATTRIBUTE_VALUE == null) ? 0
                                : this.ATTRIBUTE_VALUE.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final row_input_Attribute_ValuesStruct other = (row_input_Attribute_ValuesStruct) obj;

            if (this.ATTRIBUTE_ID == null) {
                if (other.ATTRIBUTE_ID != null)
                    return false;
            } else if (!this.ATTRIBUTE_ID.equals(other.ATTRIBUTE_ID))
                return false;

            if (this.ATTRIBUTE_VALUE == null) {
                if (other.ATTRIBUTE_VALUE != null)
                    return false;
            } else if (!this.ATTRIBUTE_VALUE.equals(other.ATTRIBUTE_VALUE))
                return false;

            return true;
        }

        public void copyDataTo(row_input_Attribute_ValuesStruct other) {

            other.ATTRIBUTE_ID = this.ATTRIBUTE_ID;
            other.ATTRIBUTE_VAL_ID = this.ATTRIBUTE_VAL_ID;
            other.ATTRIBUTE_VALUE = this.ATTRIBUTE_VALUE;

        }

        public void copyKeysDataTo(row_input_Attribute_ValuesStruct other) {

            other.ATTRIBUTE_ID = this.ATTRIBUTE_ID;
            other.ATTRIBUTE_VALUE = this.ATTRIBUTE_VALUE;

        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ATTRIBUTE_VAL_ID = null;
                } else {
                    this.ATTRIBUTE_VAL_ID = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_input_Attribute_ValuesStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ATTRIBUTE_ID,
                    other.ATTRIBUTE_ID);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.ATTRIBUTE_VALUE,
                    other.ATTRIBUTE_VALUE);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class input_Attribute_ValuesStruct implements
            routines.system.IPersistableRow<input_Attribute_ValuesStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        int ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE;

        Integer LANG_ID;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        Integer ROWNUM;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.ATTRIBUTE_ID = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ROWNUM = null;
                    } else {
                        this.ROWNUM = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // int

                dos.writeInt(this.ATTRIBUTE_ID);

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

                // Integer

                if (this.ROWNUM == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ROWNUM);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append(", ");

            sb.append("ROWNUM");
            sb.append("=");
            sb.append(String.valueOf(this.ROWNUM));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(input_Attribute_ValuesStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_3Process() throws TalendException {
        globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);
        try {

            input_Attribute_ValuesStruct input_Attribute_Values = new input_Attribute_ValuesStruct();
            row_input_Attribute_ValuesStruct row_input_Attribute_Values = new row_input_Attribute_ValuesStruct();

            /**
             * [tAdvancedHash_row_input_Attribute_Values begin ] start
             */

            ok_Hash.put("tAdvancedHash_row_input_Attribute_Values", false);
            start_Hash.put("tAdvancedHash_row_input_Attribute_Values", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHash_row_input_Attribute_Values";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row_input_Attribute_Values = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.LAST_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<row_input_Attribute_ValuesStruct> tHash_Lookup_row_input_Attribute_Values = new org.talend.designer.components.persistent.PersistentSortedLookupManager<row_input_Attribute_ValuesStruct>(
                    matchingModeEnum_row_input_Attribute_Values,
                    context.Path + "tmp/StgProdAtt/tmap2/" + "/" + jobName
                            + "_tMapData_Lookup_row_input_Attribute_Values_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public row_input_Attribute_ValuesStruct createRowInstance() {
                            return new row_input_Attribute_ValuesStruct();
                        }
                    }

                    , 2000000

            );

            tHash_Lookup_row_input_Attribute_Values.initPut();

            globalMap.put("tHash_Lookup_row_input_Attribute_Values",
                    tHash_Lookup_row_input_Attribute_Values);

            /**
             * [tAdvancedHash_row_input_Attribute_Values begin ] stop
             */

            /**
             * [tFilterColumns_2 begin ] start
             */

            ok_Hash.put("tFilterColumns_2", false);
            start_Hash.put("tFilterColumns_2", System.currentTimeMillis());
            currentComponent = "tFilterColumns_2";

            /**
             * [tFilterColumns_2 begin ] stop
             */

            /**
             * [tFileInputDelimited_3 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_3", false);
            start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_3";

            int nb_line_tFileInputDelimited_3 = 0;
            int footer_tFileInputDelimited_3 = 0;
            int totalLinetFileInputDelimited_3 = 0;
            int limittFileInputDelimited_3 = -1;
            int lastLinetFileInputDelimited_3 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_3 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                                                         * Start field
                                                         * tFileInputDelimited_3:FILENAME
                                                         */
                            context.Path + "DT_ATTRIBUTE_VALUES.txt"/**
                                                                     * End field
                                                                     * tFileInputDelimited_3:FILENAME
                                                                     */
                            ), "UTF-8")), '\t');

            csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
            csvReadertFileInputDelimited_3.setTextQualifier('\"');

            csvReadertFileInputDelimited_3
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_3 = null;

            if (footer_tFileInputDelimited_3 > 0) {

                while (csvReadertFileInputDelimited_3.readRecord()) {

                    totalLinetFileInputDelimited_3++;

                }
                int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
                        - footer_tFileInputDelimited_3 < 0 ? 0
                        : totalLinetFileInputDelimited_3
                                - footer_tFileInputDelimited_3;
                if (lastLinetFileInputDelimited_3 > 0) {
                    lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
                            : lastLineTemptFileInputDelimited_3;
                } else {
                    lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
                }

                csvReadertFileInputDelimited_3.close();

                csvReadertFileInputDelimited_3 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(/**
                                                                     * Start
                                                                     * field
                                                                     * tFileInputDelimited_3:FILENAME
                                                                     */
                                        context.Path
                                                + "DT_ATTRIBUTE_VALUES.txt"/**
                                                                             * End
                                                                             * field
                                                                             * tFileInputDelimited_3:FILENAME
                                                                             */
                                        ), "UTF-8")), '\t');
                csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
                csvReadertFileInputDelimited_3.setTextQualifier('\"');

                csvReadertFileInputDelimited_3
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_3 = 0;
            int outputLinetFileInputDelimited_3 = 0;

            while (csvReadertFileInputDelimited_3.readRecord()) {

                rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
                        .getValues();

                currentLinetFileInputDelimited_3++;
                if (currentLinetFileInputDelimited_3 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_3 > -1
                        && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
                    break;
                }
                outputLinetFileInputDelimited_3++;
                if (limittFileInputDelimited_3 != -1
                        && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
                    break;
                }

                input_Attribute_Values = null;
                boolean whetherReject_tFileInputDelimited_3 = false;
                input_Attribute_Values = new input_Attribute_ValuesStruct();
                try {

                    if (rowtFileInputDelimited_3.length == 1
                            && rowtFileInputDelimited_3[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        input_Attribute_Values.ATTRIBUTE_ID = 0;

                        input_Attribute_Values.ATTRIBUTE_VAL_ID = null;

                        input_Attribute_Values.ATTRIBUTE_VALUE = null;

                        input_Attribute_Values.LANG_ID = null;

                        input_Attribute_Values.ATTRIBUTE_VAL_ORDER_BY = null;

                        input_Attribute_Values.ROWNUM = null;

                    } else {

                        if (0 < rowtFileInputDelimited_3.length) {
                            if (rowtFileInputDelimited_3[0].length() > 0) {

                                input_Attribute_Values.ATTRIBUTE_ID = ParserUtils
                                        .parseTo_int(rowtFileInputDelimited_3[0]);

                            } else {
                                input_Attribute_Values.ATTRIBUTE_ID = 0;
                            }

                        } else {

                            input_Attribute_Values.ATTRIBUTE_ID = 0;

                        }

                        if (1 < rowtFileInputDelimited_3.length) {
                            if (rowtFileInputDelimited_3[1].length() > 0) {

                                input_Attribute_Values.ATTRIBUTE_VAL_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_3[1]);

                            } else {
                                input_Attribute_Values.ATTRIBUTE_VAL_ID = null;
                            }

                        } else {

                            input_Attribute_Values.ATTRIBUTE_VAL_ID = null;

                        }

                        if (2 < rowtFileInputDelimited_3.length) {
                            input_Attribute_Values.ATTRIBUTE_VALUE = rowtFileInputDelimited_3[2];

                        } else {

                            input_Attribute_Values.ATTRIBUTE_VALUE = null;

                        }

                        if (3 < rowtFileInputDelimited_3.length) {
                            if (rowtFileInputDelimited_3[3].length() > 0) {

                                input_Attribute_Values.LANG_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_3[3]);

                            } else {
                                input_Attribute_Values.LANG_ID = null;
                            }

                        } else {

                            input_Attribute_Values.LANG_ID = null;

                        }

                        if (4 < rowtFileInputDelimited_3.length) {
                            if (rowtFileInputDelimited_3[4].length() > 0) {

                                input_Attribute_Values.ATTRIBUTE_VAL_ORDER_BY = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_3[4]);

                            } else {
                                input_Attribute_Values.ATTRIBUTE_VAL_ORDER_BY = null;
                            }

                        } else {

                            input_Attribute_Values.ATTRIBUTE_VAL_ORDER_BY = null;

                        }

                        if (5 < rowtFileInputDelimited_3.length) {
                            if (rowtFileInputDelimited_3[5].length() > 0) {

                                input_Attribute_Values.ROWNUM = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_3[5]);

                            } else {
                                input_Attribute_Values.ROWNUM = null;
                            }

                        } else {

                            input_Attribute_Values.ROWNUM = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_3 = true;
                    System.err.println(e.getMessage());
                    input_Attribute_Values = null;
                }

                /**
                 * [tFileInputDelimited_3 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_3 main ] start
                 */

                currentComponent = "tFileInputDelimited_3";

                /**
                 * [tFileInputDelimited_3 main ] stop
                 */
                // Start of branch "input_Attribute_Values"
                if (input_Attribute_Values != null) {

                    /**
                     * [tFilterColumns_2 main ] start
                     */

                    currentComponent = "tFilterColumns_2";

                    row_input_Attribute_Values.ATTRIBUTE_ID = input_Attribute_Values.ATTRIBUTE_ID;
                    row_input_Attribute_Values.ATTRIBUTE_VAL_ID = input_Attribute_Values.ATTRIBUTE_VAL_ID;
                    row_input_Attribute_Values.ATTRIBUTE_VALUE = input_Attribute_Values.ATTRIBUTE_VALUE;
                    row_input_Attribute_Values.ATTRIBUTE_ID = input_Attribute_Values.ATTRIBUTE_ID;
                    row_input_Attribute_Values.ATTRIBUTE_VAL_ID = input_Attribute_Values.ATTRIBUTE_VAL_ID;
                    row_input_Attribute_Values.ATTRIBUTE_VALUE = input_Attribute_Values.ATTRIBUTE_VALUE;

                    /**
                     * [tFilterColumns_2 main ] stop
                     */

                    /**
                     * [tAdvancedHash_row_input_Attribute_Values main ] start
                     */

                    currentComponent = "tAdvancedHash_row_input_Attribute_Values";

                    row_input_Attribute_ValuesStruct row_input_Attribute_Values_HashRow = tHash_Lookup_row_input_Attribute_Values
                            .getNextFreeRow();

                    row_input_Attribute_Values_HashRow.ATTRIBUTE_ID = row_input_Attribute_Values.ATTRIBUTE_ID;
                    row_input_Attribute_Values_HashRow.ATTRIBUTE_VAL_ID = row_input_Attribute_Values.ATTRIBUTE_VAL_ID;
                    row_input_Attribute_Values_HashRow.ATTRIBUTE_VALUE = row_input_Attribute_Values.ATTRIBUTE_VALUE;
                    tHash_Lookup_row_input_Attribute_Values
                            .put(row_input_Attribute_Values_HashRow);

                    /**
                     * [tAdvancedHash_row_input_Attribute_Values main ] stop
                     */

                } // End of branch "input_Attribute_Values"

                /**
                 * [tFileInputDelimited_3 end ] start
                 */

                currentComponent = "tFileInputDelimited_3";

                nb_line_tFileInputDelimited_3++;
            }
            csvReadertFileInputDelimited_3.close();
            globalMap.put("tFileInputDelimited_3_NB_LINE",
                    nb_line_tFileInputDelimited_3);

            ok_Hash.put("tFileInputDelimited_3", true);
            end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_3 end ] stop
             */

            /**
             * [tFilterColumns_2 end ] start
             */

            currentComponent = "tFilterColumns_2";

            ok_Hash.put("tFilterColumns_2", true);
            end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

            /**
             * [tFilterColumns_2 end ] stop
             */

            /**
             * [tAdvancedHash_row_input_Attribute_Values end ] start
             */

            currentComponent = "tAdvancedHash_row_input_Attribute_Values";

            tHash_Lookup_row_input_Attribute_Values.endPut();

            ok_Hash.put("tAdvancedHash_row_input_Attribute_Values", true);
            end_Hash.put("tAdvancedHash_row_input_Attribute_Values", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHash_row_input_Attribute_Values end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
    }

    static class row_STG_PEICE_PROCESS_IDStruct
            implements
            routines.system.IPersistableComparableLookupRow<row_STG_PEICE_PROCESS_IDStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer FORM_ID;

        Integer PRODUCT_ID;

        String REFERENCE_ID;

        Integer PIECE_PROCESS_ID;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.REFERENCE_ID == null) ? 0 : this.REFERENCE_ID
                                .hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final row_STG_PEICE_PROCESS_IDStruct other = (row_STG_PEICE_PROCESS_IDStruct) obj;

            if (this.REFERENCE_ID == null) {
                if (other.REFERENCE_ID != null)
                    return false;
            } else if (!this.REFERENCE_ID.equals(other.REFERENCE_ID))
                return false;

            return true;
        }

        public void copyDataTo(row_STG_PEICE_PROCESS_IDStruct other) {

            other.FORM_ID = this.FORM_ID;
            other.PRODUCT_ID = this.PRODUCT_ID;
            other.REFERENCE_ID = this.REFERENCE_ID;
            other.PIECE_PROCESS_ID = this.PIECE_PROCESS_ID;

        }

        public void copyKeysDataTo(row_STG_PEICE_PROCESS_IDStruct other) {

            other.REFERENCE_ID = this.REFERENCE_ID;

        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.FORM_ID = null;
                } else {
                    this.FORM_ID = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.PRODUCT_ID = null;
                } else {
                    this.PRODUCT_ID = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.PIECE_PROCESS_ID = null;
                } else {
                    this.PIECE_PROCESS_ID = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

                if (this.FORM_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID);
                }

                if (this.PRODUCT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID);
                }

                if (this.PIECE_PROCESS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("FORM_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID));

            sb.append(", ");

            sb.append("PRODUCT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID));

            sb.append(", ");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_STG_PEICE_PROCESS_IDStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.REFERENCE_ID,
                    other.REFERENCE_ID);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class row_productsStruct implements
            routines.system.IPersistableRow<row_productsStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        Integer FORM_ID;

        String EXT_FAMILY_ID;

        Integer PRODUCT_ID;

        String REFERENCE_ID;

        Integer HAS_ATTRIBUTES;

        Integer MANUFACTURER_ID;

        Integer COUNTRY_ID;

        Integer TOOL_SOURCE_TYPE;

        Integer LANG_ID;

        String PRODUCT_DESC;

        String USER_NAME;

        Integer PRODUCT_TYPE;

        Integer PRODUCT_STATUS_ID;

        String MODEL_NUMBER;

        String PN;

        String UPC;

        String ISBN;

        String EAN;

        Integer CATALOG_NO;

        Integer MERCHANT_ID;

        Integer SRC_ID;

        String OPERATION;

        String ATTRIBUTE_OPERATION;

        Integer FAMILY_ID;

        String STATUS_UPLOAD;

        String PI_STATUS;

        Integer CATEGORY;

        Integer CATEGORY1;

        Integer CATEGORY2;

        Integer CATEGORY3;

        Integer CATEGORY4;

        Integer CATEGORY5;

        Integer CATEGORY6;

        Integer PIECE_PROCESS_ID;

        Integer ROWNUM;

        Long CRC32;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID = null;
                    } else {
                        this.FORM_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.EXT_FAMILY_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.EXT_FAMILY_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID = null;
                    } else {
                        this.PRODUCT_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.HAS_ATTRIBUTES = null;
                    } else {
                        this.HAS_ATTRIBUTES = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.MANUFACTURER_ID = null;
                    } else {
                        this.MANUFACTURER_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.COUNTRY_ID = null;
                    } else {
                        this.COUNTRY_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.TOOL_SOURCE_TYPE = null;
                    } else {
                        this.TOOL_SOURCE_TYPE = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.PRODUCT_DESC = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.PRODUCT_DESC = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.USER_NAME = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.USER_NAME = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_TYPE = null;
                    } else {
                        this.PRODUCT_TYPE = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_STATUS_ID = null;
                    } else {
                        this.PRODUCT_STATUS_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.MODEL_NUMBER = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.MODEL_NUMBER = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.PN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.PN = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.UPC = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.UPC = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ISBN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ISBN = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.EAN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.EAN = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATALOG_NO = null;
                    } else {
                        this.CATALOG_NO = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.MERCHANT_ID = null;
                    } else {
                        this.MERCHANT_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.SRC_ID = null;
                    } else {
                        this.SRC_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.OPERATION = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.OPERATION = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_OPERATION = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_OPERATION = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FAMILY_ID = null;
                    } else {
                        this.FAMILY_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.STATUS_UPLOAD = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.STATUS_UPLOAD = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.PI_STATUS = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.PI_STATUS = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY = null;
                    } else {
                        this.CATEGORY = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY1 = null;
                    } else {
                        this.CATEGORY1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY2 = null;
                    } else {
                        this.CATEGORY2 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY3 = null;
                    } else {
                        this.CATEGORY3 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY4 = null;
                    } else {
                        this.CATEGORY4 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY5 = null;
                    } else {
                        this.CATEGORY5 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CATEGORY6 = null;
                    } else {
                        this.CATEGORY6 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID = null;
                    } else {
                        this.PIECE_PROCESS_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ROWNUM = null;
                    } else {
                        this.ROWNUM = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.CRC32 = null;
                    } else {
                        this.CRC32 = dis.readLong();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.FORM_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID);
                }

                // String

                if (this.EXT_FAMILY_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.EXT_FAMILY_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PRODUCT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID);
                }

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.HAS_ATTRIBUTES == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.HAS_ATTRIBUTES);
                }

                // Integer

                if (this.MANUFACTURER_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.MANUFACTURER_ID);
                }

                // Integer

                if (this.COUNTRY_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.COUNTRY_ID);
                }

                // Integer

                if (this.TOOL_SOURCE_TYPE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.TOOL_SOURCE_TYPE);
                }

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // String

                if (this.PRODUCT_DESC == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.PRODUCT_DESC.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.USER_NAME == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.USER_NAME.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PRODUCT_TYPE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_TYPE);
                }

                // Integer

                if (this.PRODUCT_STATUS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_STATUS_ID);
                }

                // String

                if (this.MODEL_NUMBER == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.MODEL_NUMBER.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.PN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.PN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UPC == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UPC.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.ISBN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ISBN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.EAN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.EAN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.CATALOG_NO == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATALOG_NO);
                }

                // Integer

                if (this.MERCHANT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.MERCHANT_ID);
                }

                // Integer

                if (this.SRC_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.SRC_ID);
                }

                // String

                if (this.OPERATION == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.OPERATION.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.ATTRIBUTE_OPERATION == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_OPERATION.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.FAMILY_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FAMILY_ID);
                }

                // String

                if (this.STATUS_UPLOAD == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.STATUS_UPLOAD.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.PI_STATUS == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.PI_STATUS.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.CATEGORY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY);
                }

                // Integer

                if (this.CATEGORY1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY1);
                }

                // Integer

                if (this.CATEGORY2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY2);
                }

                // Integer

                if (this.CATEGORY3 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY3);
                }

                // Integer

                if (this.CATEGORY4 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY4);
                }

                // Integer

                if (this.CATEGORY5 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY5);
                }

                // Integer

                if (this.CATEGORY6 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.CATEGORY6);
                }

                // Integer

                if (this.PIECE_PROCESS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID);
                }

                // Integer

                if (this.ROWNUM == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ROWNUM);
                }

                // Long

                if (this.CRC32 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.CRC32);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("FORM_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID));

            sb.append(", ");

            sb.append("EXT_FAMILY_ID");
            sb.append("=");
            sb.append(String.valueOf(this.EXT_FAMILY_ID));

            sb.append(", ");

            sb.append("PRODUCT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID));

            sb.append(", ");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("HAS_ATTRIBUTES");
            sb.append("=");
            sb.append(String.valueOf(this.HAS_ATTRIBUTES));

            sb.append(", ");

            sb.append("MANUFACTURER_ID");
            sb.append("=");
            sb.append(String.valueOf(this.MANUFACTURER_ID));

            sb.append(", ");

            sb.append("COUNTRY_ID");
            sb.append("=");
            sb.append(String.valueOf(this.COUNTRY_ID));

            sb.append(", ");

            sb.append("TOOL_SOURCE_TYPE");
            sb.append("=");
            sb.append(String.valueOf(this.TOOL_SOURCE_TYPE));

            sb.append(", ");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("PRODUCT_DESC");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_DESC));

            sb.append(", ");

            sb.append("USER_NAME");
            sb.append("=");
            sb.append(String.valueOf(this.USER_NAME));

            sb.append(", ");

            sb.append("PRODUCT_TYPE");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_TYPE));

            sb.append(", ");

            sb.append("PRODUCT_STATUS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_STATUS_ID));

            sb.append(", ");

            sb.append("MODEL_NUMBER");
            sb.append("=");
            sb.append(String.valueOf(this.MODEL_NUMBER));

            sb.append(", ");

            sb.append("PN");
            sb.append("=");
            sb.append(String.valueOf(this.PN));

            sb.append(", ");

            sb.append("UPC");
            sb.append("=");
            sb.append(String.valueOf(this.UPC));

            sb.append(", ");

            sb.append("ISBN");
            sb.append("=");
            sb.append(String.valueOf(this.ISBN));

            sb.append(", ");

            sb.append("EAN");
            sb.append("=");
            sb.append(String.valueOf(this.EAN));

            sb.append(", ");

            sb.append("CATALOG_NO");
            sb.append("=");
            sb.append(String.valueOf(this.CATALOG_NO));

            sb.append(", ");

            sb.append("MERCHANT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.MERCHANT_ID));

            sb.append(", ");

            sb.append("SRC_ID");
            sb.append("=");
            sb.append(String.valueOf(this.SRC_ID));

            sb.append(", ");

            sb.append("OPERATION");
            sb.append("=");
            sb.append(String.valueOf(this.OPERATION));

            sb.append(", ");

            sb.append("ATTRIBUTE_OPERATION");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_OPERATION));

            sb.append(", ");

            sb.append("FAMILY_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FAMILY_ID));

            sb.append(", ");

            sb.append("STATUS_UPLOAD");
            sb.append("=");
            sb.append(String.valueOf(this.STATUS_UPLOAD));

            sb.append(", ");

            sb.append("PI_STATUS");
            sb.append("=");
            sb.append(String.valueOf(this.PI_STATUS));

            sb.append(", ");

            sb.append("CATEGORY");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY));

            sb.append(", ");

            sb.append("CATEGORY1");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY1));

            sb.append(", ");

            sb.append("CATEGORY2");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY2));

            sb.append(", ");

            sb.append("CATEGORY3");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY3));

            sb.append(", ");

            sb.append("CATEGORY4");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY4));

            sb.append(", ");

            sb.append("CATEGORY5");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY5));

            sb.append(", ");

            sb.append("CATEGORY6");
            sb.append("=");
            sb.append(String.valueOf(this.CATEGORY6));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID));

            sb.append(", ");

            sb.append("ROWNUM");
            sb.append("=");
            sb.append(String.valueOf(this.ROWNUM));

            sb.append(", ");

            sb.append("CRC32");
            sb.append("=");
            sb.append(String.valueOf(this.CRC32));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_productsStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_4Process() throws TalendException {
        globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);
        try {

            row_productsStruct row_products = new row_productsStruct();
            row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_ID = new row_STG_PEICE_PROCESS_IDStruct();

            /**
             * [tAdvancedHash_row_STG_PEICE_PROCESS_ID begin ] start
             */

            ok_Hash.put("tAdvancedHash_row_STG_PEICE_PROCESS_ID", false);
            start_Hash.put("tAdvancedHash_row_STG_PEICE_PROCESS_ID", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHash_row_STG_PEICE_PROCESS_ID";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row_STG_PEICE_PROCESS_ID = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.LAST_MATCH;

            org.talend.designer.components.commons.AdvancedMemoryLookup<row_STG_PEICE_PROCESS_IDStruct> tHash_Lookup_row_STG_PEICE_PROCESS_ID = org.talend.designer.components.commons.AdvancedMemoryLookup
                    .<row_STG_PEICE_PROCESS_IDStruct> getLookup(matchingModeEnum_row_STG_PEICE_PROCESS_ID);

            globalMap.put("tHash_Lookup_row_STG_PEICE_PROCESS_ID",
                    tHash_Lookup_row_STG_PEICE_PROCESS_ID);

            /**
             * [tAdvancedHash_row_STG_PEICE_PROCESS_ID begin ] stop
             */

            /**
             * [tFilterColumns_3 begin ] start
             */

            ok_Hash.put("tFilterColumns_3", false);
            start_Hash.put("tFilterColumns_3", System.currentTimeMillis());
            currentComponent = "tFilterColumns_3";

            /**
             * [tFilterColumns_3 begin ] stop
             */

            /**
             * [vFlowMeter_row_products begin ] start
             */

            ok_Hash.put("vFlowMeter_row_products", false);
            start_Hash.put("vFlowMeter_row_products", System
                    .currentTimeMillis());
            currentComponent = "vFlowMeter_row_products";

            int count_vFlowMeter_row_products = 0;

            /**
             * [vFlowMeter_row_products begin ] stop
             */

            /**
             * [tFileInputDelimited_4 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_4", false);
            start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_4";

            int nb_line_tFileInputDelimited_4 = 0;
            int footer_tFileInputDelimited_4 = 0;
            int totalLinetFileInputDelimited_4 = 0;
            int limittFileInputDelimited_4 = -1;
            int lastLinetFileInputDelimited_4 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_4 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                                                         * Start field
                                                         * tFileInputDelimited_4:FILENAME
                                                         */
                            context.Path + "OUPUT_PRODUCTS.txt"/**
                                                                 * End field
                                                                 * tFileInputDelimited_4:FILENAME
                                                                 */
                            ), "UTF-8")), '\t');

            csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
            csvReadertFileInputDelimited_4.setTextQualifier('\"');

            csvReadertFileInputDelimited_4
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_4 = null;

            if (footer_tFileInputDelimited_4 > 0) {

                while (csvReadertFileInputDelimited_4.readRecord()) {

                    totalLinetFileInputDelimited_4++;

                }
                int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
                        - footer_tFileInputDelimited_4 < 0 ? 0
                        : totalLinetFileInputDelimited_4
                                - footer_tFileInputDelimited_4;
                if (lastLinetFileInputDelimited_4 > 0) {
                    lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
                            : lastLineTemptFileInputDelimited_4;
                } else {
                    lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
                }

                csvReadertFileInputDelimited_4.close();

                csvReadertFileInputDelimited_4 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(/**
                                                                     * Start
                                                                     * field
                                                                     * tFileInputDelimited_4:FILENAME
                                                                     */
                                        context.Path + "OUPUT_PRODUCTS.txt"/**
                                                                             * End
                                                                             * field
                                                                             * tFileInputDelimited_4:FILENAME
                                                                             */
                                        ), "UTF-8")), '\t');
                csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
                csvReadertFileInputDelimited_4.setTextQualifier('\"');

                csvReadertFileInputDelimited_4
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_4 = 0;
            int outputLinetFileInputDelimited_4 = 0;

            while (csvReadertFileInputDelimited_4.readRecord()) {

                rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
                        .getValues();

                currentLinetFileInputDelimited_4++;
                if (currentLinetFileInputDelimited_4 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_4 > -1
                        && currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
                    break;
                }
                outputLinetFileInputDelimited_4++;
                if (limittFileInputDelimited_4 != -1
                        && outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
                    break;
                }

                row_products = null;
                boolean whetherReject_tFileInputDelimited_4 = false;
                row_products = new row_productsStruct();
                try {

                    if (rowtFileInputDelimited_4.length == 1
                            && rowtFileInputDelimited_4[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        row_products.FORM_ID = null;

                        row_products.EXT_FAMILY_ID = null;

                        row_products.PRODUCT_ID = null;

                        row_products.REFERENCE_ID = null;

                        row_products.HAS_ATTRIBUTES = null;

                        row_products.MANUFACTURER_ID = null;

                        row_products.COUNTRY_ID = null;

                        row_products.TOOL_SOURCE_TYPE = null;

                        row_products.LANG_ID = null;

                        row_products.PRODUCT_DESC = null;

                        row_products.USER_NAME = null;

                        row_products.PRODUCT_TYPE = null;

                        row_products.PRODUCT_STATUS_ID = null;

                        row_products.MODEL_NUMBER = null;

                        row_products.PN = null;

                        row_products.UPC = null;

                        row_products.ISBN = null;

                        row_products.EAN = null;

                        row_products.CATALOG_NO = null;

                        row_products.MERCHANT_ID = null;

                        row_products.SRC_ID = null;

                        row_products.OPERATION = null;

                        row_products.ATTRIBUTE_OPERATION = null;

                        row_products.FAMILY_ID = null;

                        row_products.STATUS_UPLOAD = null;

                        row_products.PI_STATUS = null;

                        row_products.CATEGORY = null;

                        row_products.CATEGORY1 = null;

                        row_products.CATEGORY2 = null;

                        row_products.CATEGORY3 = null;

                        row_products.CATEGORY4 = null;

                        row_products.CATEGORY5 = null;

                        row_products.CATEGORY6 = null;

                        row_products.PIECE_PROCESS_ID = null;

                        row_products.ROWNUM = null;

                        row_products.CRC32 = null;

                    } else {

                        if (0 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[0].length() > 0) {

                                row_products.FORM_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[0]);

                            } else {
                                row_products.FORM_ID = null;
                            }

                        } else {

                            row_products.FORM_ID = null;

                        }

                        if (1 < rowtFileInputDelimited_4.length) {
                            row_products.EXT_FAMILY_ID = rowtFileInputDelimited_4[1];

                        } else {

                            row_products.EXT_FAMILY_ID = null;

                        }

                        if (2 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[2].length() > 0) {

                                row_products.PRODUCT_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[2]);

                            } else {
                                row_products.PRODUCT_ID = null;
                            }

                        } else {

                            row_products.PRODUCT_ID = null;

                        }

                        if (3 < rowtFileInputDelimited_4.length) {
                            row_products.REFERENCE_ID = rowtFileInputDelimited_4[3];

                        } else {

                            row_products.REFERENCE_ID = null;

                        }

                        if (4 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[4].length() > 0) {

                                row_products.HAS_ATTRIBUTES = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[4]);

                            } else {
                                row_products.HAS_ATTRIBUTES = null;
                            }

                        } else {

                            row_products.HAS_ATTRIBUTES = null;

                        }

                        if (5 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[5].length() > 0) {

                                row_products.MANUFACTURER_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[5]);

                            } else {
                                row_products.MANUFACTURER_ID = null;
                            }

                        } else {

                            row_products.MANUFACTURER_ID = null;

                        }

                        if (6 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[6].length() > 0) {

                                row_products.COUNTRY_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[6]);

                            } else {
                                row_products.COUNTRY_ID = null;
                            }

                        } else {

                            row_products.COUNTRY_ID = null;

                        }

                        if (7 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[7].length() > 0) {

                                row_products.TOOL_SOURCE_TYPE = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[7]);

                            } else {
                                row_products.TOOL_SOURCE_TYPE = null;
                            }

                        } else {

                            row_products.TOOL_SOURCE_TYPE = null;

                        }

                        if (8 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[8].length() > 0) {

                                row_products.LANG_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[8]);

                            } else {
                                row_products.LANG_ID = null;
                            }

                        } else {

                            row_products.LANG_ID = null;

                        }

                        if (9 < rowtFileInputDelimited_4.length) {
                            row_products.PRODUCT_DESC = rowtFileInputDelimited_4[9];

                        } else {

                            row_products.PRODUCT_DESC = null;

                        }

                        if (10 < rowtFileInputDelimited_4.length) {
                            row_products.USER_NAME = rowtFileInputDelimited_4[10];

                        } else {

                            row_products.USER_NAME = null;

                        }

                        if (11 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[11].length() > 0) {

                                row_products.PRODUCT_TYPE = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[11]);

                            } else {
                                row_products.PRODUCT_TYPE = null;
                            }

                        } else {

                            row_products.PRODUCT_TYPE = null;

                        }

                        if (12 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[12].length() > 0) {

                                row_products.PRODUCT_STATUS_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[12]);

                            } else {
                                row_products.PRODUCT_STATUS_ID = null;
                            }

                        } else {

                            row_products.PRODUCT_STATUS_ID = null;

                        }

                        if (13 < rowtFileInputDelimited_4.length) {
                            row_products.MODEL_NUMBER = rowtFileInputDelimited_4[13];

                        } else {

                            row_products.MODEL_NUMBER = null;

                        }

                        if (14 < rowtFileInputDelimited_4.length) {
                            row_products.PN = rowtFileInputDelimited_4[14];

                        } else {

                            row_products.PN = null;

                        }

                        if (15 < rowtFileInputDelimited_4.length) {
                            row_products.UPC = rowtFileInputDelimited_4[15];

                        } else {

                            row_products.UPC = null;

                        }

                        if (16 < rowtFileInputDelimited_4.length) {
                            row_products.ISBN = rowtFileInputDelimited_4[16];

                        } else {

                            row_products.ISBN = null;

                        }

                        if (17 < rowtFileInputDelimited_4.length) {
                            row_products.EAN = rowtFileInputDelimited_4[17];

                        } else {

                            row_products.EAN = null;

                        }

                        if (18 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[18].length() > 0) {

                                row_products.CATALOG_NO = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[18]);

                            } else {
                                row_products.CATALOG_NO = null;
                            }

                        } else {

                            row_products.CATALOG_NO = null;

                        }

                        if (19 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[19].length() > 0) {

                                row_products.MERCHANT_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[19]);

                            } else {
                                row_products.MERCHANT_ID = null;
                            }

                        } else {

                            row_products.MERCHANT_ID = null;

                        }

                        if (20 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[20].length() > 0) {

                                row_products.SRC_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[20]);

                            } else {
                                row_products.SRC_ID = null;
                            }

                        } else {

                            row_products.SRC_ID = null;

                        }

                        if (21 < rowtFileInputDelimited_4.length) {
                            row_products.OPERATION = rowtFileInputDelimited_4[21];

                        } else {

                            row_products.OPERATION = null;

                        }

                        if (22 < rowtFileInputDelimited_4.length) {
                            row_products.ATTRIBUTE_OPERATION = rowtFileInputDelimited_4[22];

                        } else {

                            row_products.ATTRIBUTE_OPERATION = null;

                        }

                        if (23 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[23].length() > 0) {

                                row_products.FAMILY_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[23]);

                            } else {
                                row_products.FAMILY_ID = null;
                            }

                        } else {

                            row_products.FAMILY_ID = null;

                        }

                        if (24 < rowtFileInputDelimited_4.length) {
                            row_products.STATUS_UPLOAD = rowtFileInputDelimited_4[24];

                        } else {

                            row_products.STATUS_UPLOAD = null;

                        }

                        if (25 < rowtFileInputDelimited_4.length) {
                            row_products.PI_STATUS = rowtFileInputDelimited_4[25];

                        } else {

                            row_products.PI_STATUS = null;

                        }

                        if (26 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[26].length() > 0) {

                                row_products.CATEGORY = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[26]);

                            } else {
                                row_products.CATEGORY = null;
                            }

                        } else {

                            row_products.CATEGORY = null;

                        }

                        if (27 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[27].length() > 0) {

                                row_products.CATEGORY1 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[27]);

                            } else {
                                row_products.CATEGORY1 = null;
                            }

                        } else {

                            row_products.CATEGORY1 = null;

                        }

                        if (28 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[28].length() > 0) {

                                row_products.CATEGORY2 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[28]);

                            } else {
                                row_products.CATEGORY2 = null;
                            }

                        } else {

                            row_products.CATEGORY2 = null;

                        }

                        if (29 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[29].length() > 0) {

                                row_products.CATEGORY3 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[29]);

                            } else {
                                row_products.CATEGORY3 = null;
                            }

                        } else {

                            row_products.CATEGORY3 = null;

                        }

                        if (30 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[30].length() > 0) {

                                row_products.CATEGORY4 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[30]);

                            } else {
                                row_products.CATEGORY4 = null;
                            }

                        } else {

                            row_products.CATEGORY4 = null;

                        }

                        if (31 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[31].length() > 0) {

                                row_products.CATEGORY5 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[31]);

                            } else {
                                row_products.CATEGORY5 = null;
                            }

                        } else {

                            row_products.CATEGORY5 = null;

                        }

                        if (32 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[32].length() > 0) {

                                row_products.CATEGORY6 = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[32]);

                            } else {
                                row_products.CATEGORY6 = null;
                            }

                        } else {

                            row_products.CATEGORY6 = null;

                        }

                        if (33 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[33].length() > 0) {

                                row_products.PIECE_PROCESS_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[33]);

                            } else {
                                row_products.PIECE_PROCESS_ID = null;
                            }

                        } else {

                            row_products.PIECE_PROCESS_ID = null;

                        }

                        if (34 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[34].length() > 0) {

                                row_products.ROWNUM = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_4[34]);

                            } else {
                                row_products.ROWNUM = null;
                            }

                        } else {

                            row_products.ROWNUM = null;

                        }

                        if (35 < rowtFileInputDelimited_4.length) {
                            if (rowtFileInputDelimited_4[35].length() > 0) {

                                row_products.CRC32 = ParserUtils
                                        .parseTo_Long(rowtFileInputDelimited_4[35]);

                            } else {
                                row_products.CRC32 = null;
                            }

                        } else {

                            row_products.CRC32 = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_4 = true;
                    System.err.println(e.getMessage());
                    row_products = null;
                }

                /**
                 * [tFileInputDelimited_4 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_4 main ] start
                 */

                currentComponent = "tFileInputDelimited_4";

                /**
                 * [tFileInputDelimited_4 main ] stop
                 */
                // Start of branch "row_products"
                if (row_products != null) {

                    /**
                     * [vFlowMeter_row_products main ] start
                     */

                    currentComponent = "vFlowMeter_row_products";

                    count_vFlowMeter_row_products++;
                    row_products.FORM_ID = row_products.FORM_ID;
                    row_products.EXT_FAMILY_ID = row_products.EXT_FAMILY_ID;
                    row_products.PRODUCT_ID = row_products.PRODUCT_ID;
                    row_products.REFERENCE_ID = row_products.REFERENCE_ID;
                    row_products.HAS_ATTRIBUTES = row_products.HAS_ATTRIBUTES;
                    row_products.MANUFACTURER_ID = row_products.MANUFACTURER_ID;
                    row_products.COUNTRY_ID = row_products.COUNTRY_ID;
                    row_products.TOOL_SOURCE_TYPE = row_products.TOOL_SOURCE_TYPE;
                    row_products.LANG_ID = row_products.LANG_ID;
                    row_products.PRODUCT_DESC = row_products.PRODUCT_DESC;
                    row_products.USER_NAME = row_products.USER_NAME;
                    row_products.PRODUCT_TYPE = row_products.PRODUCT_TYPE;
                    row_products.PRODUCT_STATUS_ID = row_products.PRODUCT_STATUS_ID;
                    row_products.MODEL_NUMBER = row_products.MODEL_NUMBER;
                    row_products.PN = row_products.PN;
                    row_products.UPC = row_products.UPC;
                    row_products.ISBN = row_products.ISBN;
                    row_products.EAN = row_products.EAN;
                    row_products.CATALOG_NO = row_products.CATALOG_NO;
                    row_products.MERCHANT_ID = row_products.MERCHANT_ID;
                    row_products.SRC_ID = row_products.SRC_ID;
                    row_products.OPERATION = row_products.OPERATION;
                    row_products.ATTRIBUTE_OPERATION = row_products.ATTRIBUTE_OPERATION;
                    row_products.FAMILY_ID = row_products.FAMILY_ID;
                    row_products.STATUS_UPLOAD = row_products.STATUS_UPLOAD;
                    row_products.PI_STATUS = row_products.PI_STATUS;
                    row_products.CATEGORY = row_products.CATEGORY;
                    row_products.CATEGORY1 = row_products.CATEGORY1;
                    row_products.CATEGORY2 = row_products.CATEGORY2;
                    row_products.CATEGORY3 = row_products.CATEGORY3;
                    row_products.CATEGORY4 = row_products.CATEGORY4;
                    row_products.CATEGORY5 = row_products.CATEGORY5;
                    row_products.CATEGORY6 = row_products.CATEGORY6;
                    row_products.PIECE_PROCESS_ID = row_products.PIECE_PROCESS_ID;
                    row_products.ROWNUM = row_products.ROWNUM;
                    row_products.CRC32 = row_products.CRC32;

                    /**
                     * [vFlowMeter_row_products main ] stop
                     */

                    /**
                     * [tFilterColumns_3 main ] start
                     */

                    currentComponent = "tFilterColumns_3";

                    row_STG_PEICE_PROCESS_ID.FORM_ID = row_products.FORM_ID;
                    row_STG_PEICE_PROCESS_ID.PRODUCT_ID = row_products.PRODUCT_ID;
                    row_STG_PEICE_PROCESS_ID.REFERENCE_ID = row_products.REFERENCE_ID;
                    row_STG_PEICE_PROCESS_ID.PIECE_PROCESS_ID = row_products.PIECE_PROCESS_ID;
                    row_STG_PEICE_PROCESS_ID.FORM_ID = row_products.FORM_ID;
                    row_STG_PEICE_PROCESS_ID.PRODUCT_ID = row_products.PRODUCT_ID;
                    row_STG_PEICE_PROCESS_ID.REFERENCE_ID = row_products.REFERENCE_ID;
                    row_STG_PEICE_PROCESS_ID.PIECE_PROCESS_ID = row_products.PIECE_PROCESS_ID;

                    /**
                     * [tFilterColumns_3 main ] stop
                     */

                    /**
                     * [tAdvancedHash_row_STG_PEICE_PROCESS_ID main ] start
                     */

                    currentComponent = "tAdvancedHash_row_STG_PEICE_PROCESS_ID";

                    row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_ID_HashRow = new row_STG_PEICE_PROCESS_IDStruct();

                    row_STG_PEICE_PROCESS_ID_HashRow.FORM_ID = row_STG_PEICE_PROCESS_ID.FORM_ID;
                    row_STG_PEICE_PROCESS_ID_HashRow.PRODUCT_ID = row_STG_PEICE_PROCESS_ID.PRODUCT_ID;
                    row_STG_PEICE_PROCESS_ID_HashRow.REFERENCE_ID = row_STG_PEICE_PROCESS_ID.REFERENCE_ID;
                    row_STG_PEICE_PROCESS_ID_HashRow.PIECE_PROCESS_ID = row_STG_PEICE_PROCESS_ID.PIECE_PROCESS_ID;
                    tHash_Lookup_row_STG_PEICE_PROCESS_ID
                            .put(row_STG_PEICE_PROCESS_ID_HashRow);

                    /**
                     * [tAdvancedHash_row_STG_PEICE_PROCESS_ID main ] stop
                     */

                } // End of branch "row_products"

                /**
                 * [tFileInputDelimited_4 end ] start
                 */

                currentComponent = "tFileInputDelimited_4";

                nb_line_tFileInputDelimited_4++;
            }
            csvReadertFileInputDelimited_4.close();
            globalMap.put("tFileInputDelimited_4_NB_LINE",
                    nb_line_tFileInputDelimited_4);

            ok_Hash.put("tFileInputDelimited_4", true);
            end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_4 end ] stop
             */

            /**
             * [vFlowMeter_row_products end ] start
             */

            currentComponent = "vFlowMeter_row_products";

            talendMeter_METTER.addMessage("row_products", new Integer(
                    count_vFlowMeter_row_products), "null", "",
                    "vFlowMeter_row_products");

            ok_Hash.put("vFlowMeter_row_products", true);
            end_Hash.put("vFlowMeter_row_products", System.currentTimeMillis());

            /**
             * [vFlowMeter_row_products end ] stop
             */

            /**
             * [tFilterColumns_3 end ] start
             */

            currentComponent = "tFilterColumns_3";

            ok_Hash.put("tFilterColumns_3", true);
            end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

            /**
             * [tFilterColumns_3 end ] stop
             */

            /**
             * [tAdvancedHash_row_STG_PEICE_PROCESS_ID end ] start
             */

            currentComponent = "tAdvancedHash_row_STG_PEICE_PROCESS_ID";

            tHash_Lookup_row_STG_PEICE_PROCESS_ID.endPut();

            ok_Hash.put("tAdvancedHash_row_STG_PEICE_PROCESS_ID", true);
            end_Hash.put("tAdvancedHash_row_STG_PEICE_PROCESS_ID", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHash_row_STG_PEICE_PROCESS_ID end ] stop
             */

            talendMeter_METTERProcess();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
    }

    static class row2Struct implements
            routines.system.IPersistableRow<row2Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        Integer LANG_ID;

        Integer PRODUCT_ID;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE_FREE;

        Integer PIECE_PROCESS_ID;

        Integer FORM_ID;

        String REFERENCE_ID;

        Integer ATTRIBUTE_ID_1;

        Integer ATTRIBUTE_VAL_ID_1;

        String ATTRIBUTE_VALUE;

        String IS_FREE;

        Integer LANG_ID_1;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        Integer ATTRIBUTE_ID_2;

        Integer ATTRIBUTE_VAL_ID_2;

        String ATTRIBUTE_VALUE_1;

        Integer FORM_ID_1;

        Integer PRODUCT_ID_1;

        String REFERENCE_ID_1;

        Integer PIECE_PROCESS_ID_1;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID = null;
                    } else {
                        this.PRODUCT_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_FREE = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID = null;
                    } else {
                        this.PIECE_PROCESS_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID = null;
                    } else {
                        this.FORM_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.IS_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.IS_FREE = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID_1 = null;
                    } else {
                        this.LANG_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_ID_2 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_2 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID_1 = null;
                    } else {
                        this.FORM_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID_1 = null;
                    } else {
                        this.PRODUCT_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID_1 = null;
                    } else {
                        this.PIECE_PROCESS_ID_1 = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.PRODUCT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID);
                }

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID);
                }

                // Integer

                if (this.FORM_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID);
                }

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ATTRIBUTE_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_1);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.IS_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.IS_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

                // Integer

                if (this.ATTRIBUTE_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_2);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_2);
                }

                // String

                if (this.ATTRIBUTE_VALUE_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.FORM_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID_1);
                }

                // Integer

                if (this.PRODUCT_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID_1);
                }

                // String

                if (this.REFERENCE_ID_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID_1);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("PRODUCT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_FREE));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID));

            sb.append(", ");

            sb.append("FORM_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID));

            sb.append(", ");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("IS_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.IS_FREE));

            sb.append(", ");

            sb.append("LANG_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_1));

            sb.append(", ");

            sb.append("FORM_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID_1));

            sb.append(", ");

            sb.append("PRODUCT_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID_1));

            sb.append(", ");

            sb.append("REFERENCE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID_1));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID_1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class OnRowsEndStructtSortRow_1 implements
            routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        Integer LANG_ID;

        Integer PRODUCT_ID;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE_FREE;

        Integer PIECE_PROCESS_ID;

        Integer FORM_ID;

        String REFERENCE_ID;

        Integer ATTRIBUTE_ID_1;

        Integer ATTRIBUTE_VAL_ID_1;

        String ATTRIBUTE_VALUE;

        String IS_FREE;

        Integer LANG_ID_1;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        Integer ATTRIBUTE_ID_2;

        Integer ATTRIBUTE_VAL_ID_2;

        String ATTRIBUTE_VALUE_1;

        Integer FORM_ID_1;

        Integer PRODUCT_ID_1;

        String REFERENCE_ID_1;

        Integer PIECE_PROCESS_ID_1;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID = null;
                    } else {
                        this.PRODUCT_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_FREE = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID = null;
                    } else {
                        this.PIECE_PROCESS_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID = null;
                    } else {
                        this.FORM_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.IS_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.IS_FREE = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID_1 = null;
                    } else {
                        this.LANG_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_ID_2 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_2 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID_1 = null;
                    } else {
                        this.FORM_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID_1 = null;
                    } else {
                        this.PRODUCT_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID_1 = null;
                    } else {
                        this.PIECE_PROCESS_ID_1 = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.PRODUCT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID);
                }

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID);
                }

                // Integer

                if (this.FORM_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID);
                }

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ATTRIBUTE_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_1);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.IS_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.IS_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

                // Integer

                if (this.ATTRIBUTE_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_2);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_2);
                }

                // String

                if (this.ATTRIBUTE_VALUE_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.FORM_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID_1);
                }

                // Integer

                if (this.PRODUCT_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID_1);
                }

                // String

                if (this.REFERENCE_ID_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID_1);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("PRODUCT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_FREE));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID));

            sb.append(", ");

            sb.append("FORM_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID));

            sb.append(", ");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("IS_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.IS_FREE));

            sb.append(", ");

            sb.append("LANG_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_1));

            sb.append(", ");

            sb.append("FORM_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID_1));

            sb.append(", ");

            sb.append("PRODUCT_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID_1));

            sb.append(", ");

            sb.append("REFERENCE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID_1));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID_1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(OnRowsEndStructtSortRow_1 other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class output_Products_AttributesStruct implements
            routines.system.IPersistableRow<output_Products_AttributesStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        Integer LANG_ID;

        Integer PRODUCT_ID;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE_FREE;

        Integer PIECE_PROCESS_ID;

        Integer FORM_ID;

        String REFERENCE_ID;

        Integer ATTRIBUTE_ID_1;

        Integer ATTRIBUTE_VAL_ID_1;

        String ATTRIBUTE_VALUE;

        String IS_FREE;

        Integer LANG_ID_1;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        Integer ATTRIBUTE_ID_2;

        Integer ATTRIBUTE_VAL_ID_2;

        String ATTRIBUTE_VALUE_1;

        Integer FORM_ID_1;

        Integer PRODUCT_ID_1;

        String REFERENCE_ID_1;

        Integer PIECE_PROCESS_ID_1;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID = null;
                    } else {
                        this.PRODUCT_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_FREE = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID = null;
                    } else {
                        this.PIECE_PROCESS_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID = null;
                    } else {
                        this.FORM_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_1 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.IS_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.IS_FREE = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID_1 = null;
                    } else {
                        this.LANG_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_ID_2 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID_2 = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID_2 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FORM_ID_1 = null;
                    } else {
                        this.FORM_ID_1 = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRODUCT_ID_1 = null;
                    } else {
                        this.PRODUCT_ID_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID_1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID_1 = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.PIECE_PROCESS_ID_1 = null;
                    } else {
                        this.PIECE_PROCESS_ID_1 = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.PRODUCT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID);
                }

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID);
                }

                // Integer

                if (this.FORM_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID);
                }

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ATTRIBUTE_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_1);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.IS_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.IS_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID_1);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

                // Integer

                if (this.ATTRIBUTE_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID_2);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID_2 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID_2);
                }

                // String

                if (this.ATTRIBUTE_VALUE_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.FORM_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.FORM_ID_1);
                }

                // Integer

                if (this.PRODUCT_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PRODUCT_ID_1);
                }

                // String

                if (this.REFERENCE_ID_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.PIECE_PROCESS_ID_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.PIECE_PROCESS_ID_1);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("PRODUCT_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_FREE));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID));

            sb.append(", ");

            sb.append("FORM_ID");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID));

            sb.append(", ");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("IS_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.IS_FREE));

            sb.append(", ");

            sb.append("LANG_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID_1));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID_2");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID_2));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE_1");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE_1));

            sb.append(", ");

            sb.append("FORM_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.FORM_ID_1));

            sb.append(", ");

            sb.append("PRODUCT_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PRODUCT_ID_1));

            sb.append(", ");

            sb.append("REFERENCE_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID_1));

            sb.append(", ");

            sb.append("PIECE_PROCESS_ID_1");
            sb.append("=");
            sb.append(String.valueOf(this.PIECE_PROCESS_ID_1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(output_Products_AttributesStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class input_Reference_AttributeStruct implements
            routines.system.IPersistableRow<input_Reference_AttributeStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        String REFERENCE_ID;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE;

        String IS_FREE;

        Integer LANG_ID;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.IS_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.IS_FREE = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.IS_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.IS_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("IS_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.IS_FREE));

            sb.append(", ");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(input_Reference_AttributeStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class after_tFileInputDelimited_5Struct implements
            routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        String REFERENCE_ID;

        Integer ATTRIBUTE_ID;

        Integer ATTRIBUTE_VAL_ID;

        String ATTRIBUTE_VALUE;

        String IS_FREE;

        Integer LANG_ID;

        Integer ATTRIBUTE_VAL_ORDER_BY;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.REFERENCE_ID = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.REFERENCE_ID = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_ID = null;
                    } else {
                        this.ATTRIBUTE_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ID = null;
                    } else {
                        this.ATTRIBUTE_VAL_ID = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.ATTRIBUTE_VALUE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.ATTRIBUTE_VALUE = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.IS_FREE = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.IS_FREE = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.LANG_ID = null;
                    } else {
                        this.LANG_ID = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ATTRIBUTE_VAL_ORDER_BY = null;
                    } else {
                        this.ATTRIBUTE_VAL_ORDER_BY = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.REFERENCE_ID == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.REFERENCE_ID.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ATTRIBUTE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ID);
                }

                // String

                if (this.ATTRIBUTE_VALUE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.ATTRIBUTE_VALUE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.IS_FREE == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.IS_FREE.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.LANG_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.LANG_ID);
                }

                // Integer

                if (this.ATTRIBUTE_VAL_ORDER_BY == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ATTRIBUTE_VAL_ORDER_BY);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("REFERENCE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.REFERENCE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ID");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VALUE");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VALUE));

            sb.append(", ");

            sb.append("IS_FREE");
            sb.append("=");
            sb.append(String.valueOf(this.IS_FREE));

            sb.append(", ");

            sb.append("LANG_ID");
            sb.append("=");
            sb.append(String.valueOf(this.LANG_ID));

            sb.append(", ");

            sb.append("ATTRIBUTE_VAL_ORDER_BY");
            sb.append("=");
            sb.append(String.valueOf(this.ATTRIBUTE_VAL_ORDER_BY));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tFileInputDelimited_5Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_5Process() throws TalendException {
        globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);
        try {
            tFileInputDelimited_3Process();
            tFileInputDelimited_4Process();

            input_Reference_AttributeStruct input_Reference_Attribute = new input_Reference_AttributeStruct();
            output_Products_AttributesStruct output_Products_Attributes = new output_Products_AttributesStruct();
            row2Struct row2 = new row2Struct();

            /**
             * [tMap_2_TMAP_OUT begin ] start
             */

            ok_Hash.put("tMap_2_TMAP_OUT", false);
            start_Hash.put("tMap_2_TMAP_OUT", System.currentTimeMillis());
            currentComponent = "tMap_2_TMAP_OUT";

            // ###############################
            // # Lookup's keys initialization

            org.talend.designer.components.persistent.PersistentSortedLookupManager<row_input_Attribute_ValuesStruct> tHash_Lookup_row_input_Attribute_Values = (org.talend.designer.components.persistent.PersistentSortedLookupManager<row_input_Attribute_ValuesStruct>) ((org.talend.designer.components.persistent.PersistentSortedLookupManager<row_input_Attribute_ValuesStruct>) globalMap
                    .get("tHash_Lookup_row_input_Attribute_Values"));

            row_input_Attribute_ValuesStruct row_input_Attribute_ValuesHashKey = new row_input_Attribute_ValuesStruct();
            row_input_Attribute_ValuesStruct row_input_Attribute_ValuesDefault = new row_input_Attribute_ValuesStruct();

            org.talend.designer.components.commons.AdvancedMemoryLookup<row_STG_PEICE_PROCESS_IDStruct> tHash_Lookup_row_STG_PEICE_PROCESS_ID = (org.talend.designer.components.commons.AdvancedMemoryLookup<row_STG_PEICE_PROCESS_IDStruct>) ((org.talend.designer.components.commons.AdvancedMemoryLookup<row_STG_PEICE_PROCESS_IDStruct>) globalMap
                    .get("tHash_Lookup_row_STG_PEICE_PROCESS_ID"));

            row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_IDHashKey = new row_STG_PEICE_PROCESS_IDStruct();
            row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_IDDefault = new row_STG_PEICE_PROCESS_IDStruct();
            // ###############################

            // ###############################
            // # Vars initialization
            class Var__tMap_2_TMAP_OUT__Struct {
                Integer var_Attribute_Val_id;
                String var_Attribute_Value;
            }
            Var__tMap_2_TMAP_OUT__Struct Var__tMap_2_TMAP_OUT = new Var__tMap_2_TMAP_OUT__Struct();
            // ###############################

            // ###############################
            // # Outputs initialization
            // ###############################

            class SortableRow_input_Reference_Attribute
                    implements
                    Comparable<SortableRow_input_Reference_Attribute>,
                    routines.system.IPersistableRow<SortableRow_input_Reference_Attribute> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_row_input_Attribute_Values__ATTRIBUTE_ID;
                String exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE;

                // input_Reference_Attribute
                String input_Reference_Attribute__REFERENCE_ID;
                Integer input_Reference_Attribute__ATTRIBUTE_ID;
                Integer input_Reference_Attribute__ATTRIBUTE_VAL_ID;
                String input_Reference_Attribute__ATTRIBUTE_VALUE;
                String input_Reference_Attribute__IS_FREE;
                Integer input_Reference_Attribute__LANG_ID;
                Integer input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY;

                public void fillFrom(
                        input_Reference_AttributeStruct input_Reference_Attribute,
                        Integer exprKey_row_input_Attribute_Values__ATTRIBUTE_ID,
                        String exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE) {

                    this.input_Reference_Attribute__REFERENCE_ID = input_Reference_Attribute.REFERENCE_ID;
                    this.input_Reference_Attribute__ATTRIBUTE_ID = input_Reference_Attribute.ATTRIBUTE_ID;
                    this.input_Reference_Attribute__ATTRIBUTE_VAL_ID = input_Reference_Attribute.ATTRIBUTE_VAL_ID;
                    this.input_Reference_Attribute__ATTRIBUTE_VALUE = input_Reference_Attribute.ATTRIBUTE_VALUE;
                    this.input_Reference_Attribute__IS_FREE = input_Reference_Attribute.IS_FREE;
                    this.input_Reference_Attribute__LANG_ID = input_Reference_Attribute.LANG_ID;
                    this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY = input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY;
                    this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID = exprKey_row_input_Attribute_Values__ATTRIBUTE_ID;
                    this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE = exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE;

                }

                public void copyDataTo(
                        input_Reference_AttributeStruct input_Reference_Attribute) {

                    input_Reference_Attribute.REFERENCE_ID = this.input_Reference_Attribute__REFERENCE_ID;
                    input_Reference_Attribute.ATTRIBUTE_ID = this.input_Reference_Attribute__ATTRIBUTE_ID;
                    input_Reference_Attribute.ATTRIBUTE_VAL_ID = this.input_Reference_Attribute__ATTRIBUTE_VAL_ID;
                    input_Reference_Attribute.ATTRIBUTE_VALUE = this.input_Reference_Attribute__ATTRIBUTE_VALUE;
                    input_Reference_Attribute.IS_FREE = this.input_Reference_Attribute__IS_FREE;
                    input_Reference_Attribute.LANG_ID = this.input_Reference_Attribute__LANG_ID;
                    input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("input_Reference_Attribute__REFERENCE_ID");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.input_Reference_Attribute__REFERENCE_ID));

                    sb.append(", ");

                    sb.append("input_Reference_Attribute__ATTRIBUTE_ID");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.input_Reference_Attribute__ATTRIBUTE_ID));

                    sb.append(", ");

                    sb.append("input_Reference_Attribute__ATTRIBUTE_VAL_ID");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.input_Reference_Attribute__ATTRIBUTE_VAL_ID));

                    sb.append(", ");

                    sb.append("input_Reference_Attribute__ATTRIBUTE_VALUE");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.input_Reference_Attribute__ATTRIBUTE_VALUE));

                    sb.append(", ");

                    sb.append("input_Reference_Attribute__IS_FREE");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.input_Reference_Attribute__IS_FREE));

                    sb.append(", ");

                    sb.append("input_Reference_Attribute__LANG_ID");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.input_Reference_Attribute__LANG_ID));

                    sb.append(", ");

                    sb
                            .append("input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_input_Reference_Attribute other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(
                            this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID,
                            other.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    returnValue = checkNullsAndCompare(
                            this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE,
                            other.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {
                    int returnValue = 0;
                    if (object1 instanceof Comparable && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(), object2
                                .toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return returnValue;
                }

                private int compareStrings(String string1, String string2) {
//                    boolean ignoreCase = true;
//                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
//                    } else {
//                        return string1.compareTo(string2);
//                    }
                }

                public void readData(ObjectInputStream dis) {

                    synchronized (input_Reference_AttributeStruct.commonByteArrayLock) {

                        try {

                            int length = 0;

                            this.is__rejectedInnerJoin = dis.readBoolean();

                            length = dis.readInt();
                            if (length == -1) {
                                this.input_Reference_Attribute__REFERENCE_ID = null;
                            } else {
                                if (length > input_Reference_AttributeStruct.commonByteArray.length) {
                                    if (length < 1024
                                            && input_Reference_AttributeStruct.commonByteArray.length == 0) {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[1024];
                                    } else {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis
                                        .readFully(
                                                input_Reference_AttributeStruct.commonByteArray,
                                                0, length);
                                this.input_Reference_Attribute__REFERENCE_ID = new String(
                                        input_Reference_AttributeStruct.commonByteArray,
                                        0, length);
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.input_Reference_Attribute__ATTRIBUTE_ID = null;
                            } else {
                                this.input_Reference_Attribute__ATTRIBUTE_ID = dis
                                        .readInt();
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.input_Reference_Attribute__ATTRIBUTE_VAL_ID = null;
                            } else {
                                this.input_Reference_Attribute__ATTRIBUTE_VAL_ID = dis
                                        .readInt();
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.input_Reference_Attribute__ATTRIBUTE_VALUE = null;
                            } else {
                                if (length > input_Reference_AttributeStruct.commonByteArray.length) {
                                    if (length < 1024
                                            && input_Reference_AttributeStruct.commonByteArray.length == 0) {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[1024];
                                    } else {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis
                                        .readFully(
                                                input_Reference_AttributeStruct.commonByteArray,
                                                0, length);
                                this.input_Reference_Attribute__ATTRIBUTE_VALUE = new String(
                                        input_Reference_AttributeStruct.commonByteArray,
                                        0, length);
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.input_Reference_Attribute__IS_FREE = null;
                            } else {
                                if (length > input_Reference_AttributeStruct.commonByteArray.length) {
                                    if (length < 1024
                                            && input_Reference_AttributeStruct.commonByteArray.length == 0) {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[1024];
                                    } else {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis
                                        .readFully(
                                                input_Reference_AttributeStruct.commonByteArray,
                                                0, length);
                                this.input_Reference_Attribute__IS_FREE = new String(
                                        input_Reference_AttributeStruct.commonByteArray,
                                        0, length);
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.input_Reference_Attribute__LANG_ID = null;
                            } else {
                                this.input_Reference_Attribute__LANG_ID = dis
                                        .readInt();
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY = null;
                            } else {
                                this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY = dis
                                        .readInt();
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID = null;
                            } else {
                                this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID = dis
                                        .readInt();
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE = null;
                            } else {
                                if (length > input_Reference_AttributeStruct.commonByteArray.length) {
                                    if (length < 1024
                                            && input_Reference_AttributeStruct.commonByteArray.length == 0) {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[1024];
                                    } else {
                                        input_Reference_AttributeStruct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis
                                        .readFully(
                                                input_Reference_AttributeStruct.commonByteArray,
                                                0, length);
                                this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE = new String(
                                        input_Reference_AttributeStruct.commonByteArray,
                                        0, length);
                            }

                        } catch (IOException e) {
                            throw new RuntimeException(e);

                        }

                    }
                }

                public void writeData(ObjectOutputStream dos) {
                    try {

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.input_Reference_Attribute__REFERENCE_ID == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.input_Reference_Attribute__REFERENCE_ID
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.input_Reference_Attribute__ATTRIBUTE_ID == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.input_Reference_Attribute__ATTRIBUTE_ID);
                        }

                        if (this.input_Reference_Attribute__ATTRIBUTE_VAL_ID == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.input_Reference_Attribute__ATTRIBUTE_VAL_ID);
                        }

                        if (this.input_Reference_Attribute__ATTRIBUTE_VALUE == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.input_Reference_Attribute__ATTRIBUTE_VALUE
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.input_Reference_Attribute__IS_FREE == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.input_Reference_Attribute__IS_FREE
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.input_Reference_Attribute__LANG_ID == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.input_Reference_Attribute__LANG_ID);
                        }

                        if (this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.input_Reference_Attribute__ATTRIBUTE_VAL_ORDER_BY);
                        }

                        if (this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID);
                        }

                        if (this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_input_Reference_Attribute> fsi_input_Reference_Attribute = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_input_Reference_Attribute>(
                    context.Path + "tmp/StgProdAtt/tmap2/" + "/" + jobName
                            + "_tMapData_input_Reference_Attribute", 2000000) {
                public SortableRow_input_Reference_Attribute createRowInstance() {
                    return new SortableRow_input_Reference_Attribute();
                }
            };

            fsi_input_Reference_Attribute.initPut();

            /**
             * [tMap_2_TMAP_OUT begin ] stop
             */

            /**
             * [vFlowMeter_input_Reference_Attribute begin ] start
             */

            ok_Hash.put("vFlowMeter_input_Reference_Attribute", false);
            start_Hash.put("vFlowMeter_input_Reference_Attribute", System
                    .currentTimeMillis());
            currentComponent = "vFlowMeter_input_Reference_Attribute";

            int count_vFlowMeter_input_Reference_Attribute = 0;

            /**
             * [vFlowMeter_input_Reference_Attribute begin ] stop
             */

            /**
             * [tFileInputDelimited_5 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_5", false);
            start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
            talendStats_STATS.addMessage("begin", "tFileInputDelimited_5");
            talendStats_STATSProcess();
            currentComponent = "tFileInputDelimited_5";

            int nb_line_tFileInputDelimited_5 = 0;
            int footer_tFileInputDelimited_5 = 0;
            int totalLinetFileInputDelimited_5 = 0;
            int limittFileInputDelimited_5 = -1;
            int lastLinetFileInputDelimited_5 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_5 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                                                         * Start field
                                                         * tFileInputDelimited_5:FILENAME
                                                         */
                            context.Path + "INPUT_REFERENCE_ATTRIBUTE.txt"/**
                                                                             * End
                                                                             * field
                                                                             * tFileInputDelimited_5:FILENAME
                                                                             */
                            ), "UTF-8")), '\t');

            csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
            csvReadertFileInputDelimited_5.setTextQualifier('\"');

            csvReadertFileInputDelimited_5
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_5 = null;

            if (footer_tFileInputDelimited_5 > 0) {

                while (csvReadertFileInputDelimited_5.readRecord()) {

                    totalLinetFileInputDelimited_5++;

                }
                int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
                        - footer_tFileInputDelimited_5 < 0 ? 0
                        : totalLinetFileInputDelimited_5
                                - footer_tFileInputDelimited_5;
                if (lastLinetFileInputDelimited_5 > 0) {
                    lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
                            : lastLineTemptFileInputDelimited_5;
                } else {
                    lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
                }

                csvReadertFileInputDelimited_5.close();

                csvReadertFileInputDelimited_5 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(
                                                /**
                                                 * Start field
                                                 * tFileInputDelimited_5:FILENAME
                                                 */
                                                context.Path
                                                        + "INPUT_REFERENCE_ATTRIBUTE.txt"/**
                                                                                             * End
                                                                                             * field
                                                                                             * tFileInputDelimited_5:FILENAME
                                                                                             */
                                        ), "UTF-8")), '\t');
                csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
                csvReadertFileInputDelimited_5.setTextQualifier('\"');

                csvReadertFileInputDelimited_5
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_5 = 0;
            int outputLinetFileInputDelimited_5 = 0;

            while (csvReadertFileInputDelimited_5.readRecord()) {

                rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
                        .getValues();

                currentLinetFileInputDelimited_5++;
                if (currentLinetFileInputDelimited_5 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_5 > -1
                        && currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
                    break;
                }
                outputLinetFileInputDelimited_5++;
                if (limittFileInputDelimited_5 != -1
                        && outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
                    break;
                }

                input_Reference_Attribute = null;
                boolean whetherReject_tFileInputDelimited_5 = false;
                input_Reference_Attribute = new input_Reference_AttributeStruct();
                try {

                    if (rowtFileInputDelimited_5.length == 1
                            && rowtFileInputDelimited_5[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        input_Reference_Attribute.REFERENCE_ID = null;

                        input_Reference_Attribute.ATTRIBUTE_ID = null;

                        input_Reference_Attribute.ATTRIBUTE_VAL_ID = null;

                        input_Reference_Attribute.ATTRIBUTE_VALUE = null;

                        input_Reference_Attribute.IS_FREE = null;

                        input_Reference_Attribute.LANG_ID = null;

                        input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = null;

                    } else {

                        if (0 < rowtFileInputDelimited_5.length) {
                            input_Reference_Attribute.REFERENCE_ID = rowtFileInputDelimited_5[0];

                        } else {

                            input_Reference_Attribute.REFERENCE_ID = null;

                        }

                        if (1 < rowtFileInputDelimited_5.length) {
                            if (rowtFileInputDelimited_5[1].length() > 0) {

                                input_Reference_Attribute.ATTRIBUTE_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_5[1]);

                            } else {
                                input_Reference_Attribute.ATTRIBUTE_ID = null;
                            }

                        } else {

                            input_Reference_Attribute.ATTRIBUTE_ID = null;

                        }

                        if (2 < rowtFileInputDelimited_5.length) {
                            if (rowtFileInputDelimited_5[2].length() > 0) {

                                input_Reference_Attribute.ATTRIBUTE_VAL_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_5[2]);

                            } else {
                                input_Reference_Attribute.ATTRIBUTE_VAL_ID = null;
                            }

                        } else {

                            input_Reference_Attribute.ATTRIBUTE_VAL_ID = null;

                        }

                        if (3 < rowtFileInputDelimited_5.length) {
                            input_Reference_Attribute.ATTRIBUTE_VALUE = rowtFileInputDelimited_5[3];

                        } else {

                            input_Reference_Attribute.ATTRIBUTE_VALUE = null;

                        }

                        if (4 < rowtFileInputDelimited_5.length) {
                            input_Reference_Attribute.IS_FREE = rowtFileInputDelimited_5[4];

                        } else {

                            input_Reference_Attribute.IS_FREE = null;

                        }

                        if (5 < rowtFileInputDelimited_5.length) {
                            if (rowtFileInputDelimited_5[5].length() > 0) {

                                input_Reference_Attribute.LANG_ID = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_5[5]);

                            } else {
                                input_Reference_Attribute.LANG_ID = null;
                            }

                        } else {

                            input_Reference_Attribute.LANG_ID = null;

                        }

                        if (6 < rowtFileInputDelimited_5.length) {
                            if (rowtFileInputDelimited_5[6].length() > 0) {

                                input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = ParserUtils
                                        .parseTo_Integer(rowtFileInputDelimited_5[6]);

                            } else {
                                input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = null;
                            }

                        } else {

                            input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_5 = true;
                    System.err.println(e.getMessage());
                    input_Reference_Attribute = null;
                }

                /**
                 * [tFileInputDelimited_5 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_5 main ] start
                 */

                currentComponent = "tFileInputDelimited_5";

                /**
                 * [tFileInputDelimited_5 main ] stop
                 */
                // Start of branch "input_Reference_Attribute"
                if (input_Reference_Attribute != null) {

                    /**
                     * [vFlowMeter_input_Reference_Attribute main ] start
                     */

                    currentComponent = "vFlowMeter_input_Reference_Attribute";

                    count_vFlowMeter_input_Reference_Attribute++;
                    input_Reference_Attribute.REFERENCE_ID = input_Reference_Attribute.REFERENCE_ID;
                    input_Reference_Attribute.ATTRIBUTE_ID = input_Reference_Attribute.ATTRIBUTE_ID;
                    input_Reference_Attribute.ATTRIBUTE_VAL_ID = input_Reference_Attribute.ATTRIBUTE_VAL_ID;
                    input_Reference_Attribute.ATTRIBUTE_VALUE = input_Reference_Attribute.ATTRIBUTE_VALUE;
                    input_Reference_Attribute.IS_FREE = input_Reference_Attribute.IS_FREE;
                    input_Reference_Attribute.LANG_ID = input_Reference_Attribute.LANG_ID;
                    input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY = input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY;

                    /**
                     * [vFlowMeter_input_Reference_Attribute main ] stop
                     */

                    /**
                     * [tMap_2_TMAP_OUT main ] start
                     */

                    currentComponent = "tMap_2_TMAP_OUT";

                    boolean hasCasePrimitiveKeyWithNull_tMap_2_TMAP_OUT = false;

                    hasCasePrimitiveKeyWithNull_tMap_2_TMAP_OUT = false;

                    Integer exprKey_row_input_Attribute_Values__ATTRIBUTE_ID = input_Reference_Attribute.ATTRIBUTE_ID;

                    String exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE = input_Reference_Attribute.ATTRIBUTE_VALUE;

                    SortableRow_input_Reference_Attribute rsc_input_Reference_Attribute = fsi_input_Reference_Attribute
                            .getNextFreeRow();

                    rsc_input_Reference_Attribute
                            .fillFrom(
                                    input_Reference_Attribute,
                                    exprKey_row_input_Attribute_Values__ATTRIBUTE_ID,
                                    exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE);

                    fsi_input_Reference_Attribute
                            .put(rsc_input_Reference_Attribute);

                    // ###############################
                    // # Input tables (lookups)
                    boolean rejectedInnerJoin_tMap_2_TMAP_OUT = false;
                    boolean mainRowRejected_tMap_2_TMAP_OUT = false;

                    // ###############################

                    /**
                     * [tMap_2_TMAP_OUT main ] stop
                     */

                } // End of branch "input_Reference_Attribute"

                /**
                 * [tFileInputDelimited_5 end ] start
                 */

                currentComponent = "tFileInputDelimited_5";

                nb_line_tFileInputDelimited_5++;
            }
            csvReadertFileInputDelimited_5.close();
            globalMap.put("tFileInputDelimited_5_NB_LINE",
                    nb_line_tFileInputDelimited_5);

            ok_Hash.put("tFileInputDelimited_5", true);
            end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

            talendStats_STATS.addMessage("end", "tFileInputDelimited_5",
                    end_Hash.get("tFileInputDelimited_5")
                            - start_Hash.get("tFileInputDelimited_5"));
            talendStats_STATSProcess();

            /**
             * [tFileInputDelimited_5 end ] stop
             */

            /**
             * [vFlowMeter_input_Reference_Attribute end ] start
             */

            currentComponent = "vFlowMeter_input_Reference_Attribute";

            talendMeter_METTER.addMessage("input_Reference_Attribute",
                    new Integer(count_vFlowMeter_input_Reference_Attribute),
                    "null", "", "vFlowMeter_input_Reference_Attribute");

            ok_Hash.put("vFlowMeter_input_Reference_Attribute", true);
            end_Hash.put("vFlowMeter_input_Reference_Attribute", System
                    .currentTimeMillis());

            /**
             * [vFlowMeter_input_Reference_Attribute end ] stop
             */

            /**
             * [tMap_2_TMAP_OUT end ] start
             */

            currentComponent = "tMap_2_TMAP_OUT";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMap_2_TMAP_OUT", true);
            end_Hash.put("tMap_2_TMAP_OUT", System.currentTimeMillis());

            /**
             * [tMap_2_TMAP_OUT end ] stop
             */

            /**
             * [tSortRow_1_SortOut begin ] start
             */

            ok_Hash.put("tSortRow_1_SortOut", false);
            start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
            currentComponent = "tSortRow_1_SortOut";

            class Comparableoutput_Products_AttributesStruct extends
                    output_Products_AttributesStruct implements
                    Comparable<Comparableoutput_Products_AttributesStruct> {

                public int compareTo(
                        Comparableoutput_Products_AttributesStruct other) {

                    if (!this.PRODUCT_ID.equals(other.PRODUCT_ID)) {
                        return this.PRODUCT_ID.compareTo(other.PRODUCT_ID) > 0 ? 1
                                : -1;
                    }
                    if (!this.ATTRIBUTE_ID.equals(other.ATTRIBUTE_ID)) {
                        return this.ATTRIBUTE_ID.compareTo(other.ATTRIBUTE_ID) > 0 ? 1
                                : -1;
                    }
                    if (!this.ATTRIBUTE_VAL_ID.equals(other.ATTRIBUTE_VAL_ID)) {
                        return this.ATTRIBUTE_VAL_ID
                                .compareTo(other.ATTRIBUTE_VAL_ID) > 0 ? 1 : -1;
                    }
                    return 0;
                }
            }

            java.util.List<Comparableoutput_Products_AttributesStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparableoutput_Products_AttributesStruct>();

            /**
             * [tSortRow_1_SortOut begin ] stop
             */

            /**
             * [tMap_2_TMAP_IN begin ] start
             */

            ok_Hash.put("tMap_2_TMAP_IN", false);
            start_Hash.put("tMap_2_TMAP_IN", System.currentTimeMillis());
            currentComponent = "tMap_2_TMAP_IN";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            class Var__tMap_2_TMAP_IN__Struct {
                Integer var_Attribute_Val_id;
                String var_Attribute_Value;
            }
            Var__tMap_2_TMAP_IN__Struct Var__tMap_2_TMAP_IN = new Var__tMap_2_TMAP_IN__Struct();
            // ###############################

            // ###############################
            // # Outputs initialization
            output_Products_AttributesStruct output_Products_Attributes_tmp = new output_Products_AttributesStruct();
            // ###############################

            /**
             * [tMap_2_TMAP_IN begin ] stop
             */
            /**
             * [tMap_2_TMAP_IN main ] start
             */

            currentComponent = "tMap_2_TMAP_IN";

            boolean hasCasePrimitiveKeyWithNull_tMap_2_TMAP_IN = false;

            fsi_input_Reference_Attribute.endPut();

            // ###############################
            // # Input tables (lookups)
            boolean rejectedInnerJoin_tMap_2_TMAP_IN = false;
            boolean mainRowRejected_tMap_2_TMAP_IN = false;

            // /////////////////////////////////////////////
            // Starting Lookup Table "row_input_Attribute_Values"
            // /////////////////////////////////////////////

            SortableRow_input_Reference_Attribute rsc_input_Reference_Attribute;

            tHash_Lookup_row_input_Attribute_Values.initGet();

            fsi_input_Reference_Attribute.initGet();

            // TEST firstLookupIsPersistentSorted=true
            // isFirstPersistentSortedTable=true

            rejectedInnerJoin_tMap_2_TMAP_IN = false;

            while (fsi_input_Reference_Attribute.hasNext()) { // G_TM_M_250
                                                                // loop
                                                                // "input_Reference_Attribute"

                // CALL close loop of lookup 'input_Reference_Attribute'

                rsc_input_Reference_Attribute = (SortableRow_input_Reference_Attribute) fsi_input_Reference_Attribute
                        .next();

//                System.out.println("input_Reference_Attribute.REFERENCE_ID = " +  input_Reference_Attribute.REFERENCE_ID);
                if("1200846_1".equals(input_Reference_Attribute.REFERENCE_ID)) {
                    System.out.println();
                }
                
                if("1001098_1".equals(input_Reference_Attribute.REFERENCE_ID)) {
                    System.out.println();
                }
                
                rsc_input_Reference_Attribute
                        .copyDataTo(input_Reference_Attribute);

                rejectedInnerJoin_tMap_2_TMAP_IN = rsc_input_Reference_Attribute.is__rejectedInnerJoin;

                boolean forceLooprow_input_Attribute_Values = false;

                row_input_Attribute_ValuesStruct row_input_Attribute_ValuesObjectFromLookup = null;

                if (!rejectedInnerJoin_tMap_2_TMAP_IN) { // G_TM_M_020

                    hasCasePrimitiveKeyWithNull_tMap_2_TMAP_IN = false;

                    row_input_Attribute_ValuesHashKey.ATTRIBUTE_ID = rsc_input_Reference_Attribute.exprKey_row_input_Attribute_Values__ATTRIBUTE_ID;

                    row_input_Attribute_ValuesHashKey.ATTRIBUTE_VALUE = rsc_input_Reference_Attribute.exprKey_row_input_Attribute_Values__ATTRIBUTE_VALUE;

                    tHash_Lookup_row_input_Attribute_Values
                            .lookup(row_input_Attribute_ValuesHashKey);

                } // G_TM_M_020

                row_input_Attribute_ValuesStruct row_input_Attribute_Values = null;

                row_input_Attribute_ValuesStruct fromLookup_row_input_Attribute_Values = null;
                row_input_Attribute_Values = row_input_Attribute_ValuesDefault;

                if (tHash_Lookup_row_input_Attribute_Values.hasNext()) { // G
                                                                            // 099

                    fromLookup_row_input_Attribute_Values = tHash_Lookup_row_input_Attribute_Values
                            .next();

                } // G 099

                if (fromLookup_row_input_Attribute_Values != null) {
                    row_input_Attribute_Values = fromLookup_row_input_Attribute_Values;
                }

                // /////////////////////////////////////////////
                // Starting Lookup Table "row_STG_PEICE_PROCESS_ID"
                // /////////////////////////////////////////////

                boolean forceLooprow_STG_PEICE_PROCESS_ID = false;

                row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_IDObjectFromLookup = null;

                if (!rejectedInnerJoin_tMap_2_TMAP_IN) { // G_TM_M_020

                    hasCasePrimitiveKeyWithNull_tMap_2_TMAP_IN = false;

                    row_STG_PEICE_PROCESS_IDHashKey.REFERENCE_ID = input_Reference_Attribute.REFERENCE_ID;

                    row_STG_PEICE_PROCESS_IDHashKey.hashCodeDirty = true;

                    tHash_Lookup_row_STG_PEICE_PROCESS_ID
                            .lookup(row_STG_PEICE_PROCESS_IDHashKey);

                    if (!tHash_Lookup_row_STG_PEICE_PROCESS_ID.hasNext()) { // G_TM_M_090

                        rejectedInnerJoin_tMap_2_TMAP_IN = true;

                    } // G_TM_M_090

                } // G_TM_M_020

                row_STG_PEICE_PROCESS_IDStruct row_STG_PEICE_PROCESS_ID = null;

                row_STG_PEICE_PROCESS_IDStruct fromLookup_row_STG_PEICE_PROCESS_ID = null;
                row_STG_PEICE_PROCESS_ID = row_STG_PEICE_PROCESS_IDDefault;

                if (tHash_Lookup_row_STG_PEICE_PROCESS_ID.hasNext()) { // G 099

                    fromLookup_row_STG_PEICE_PROCESS_ID = tHash_Lookup_row_STG_PEICE_PROCESS_ID
                            .next();

                } // G 099

                if (fromLookup_row_STG_PEICE_PROCESS_ID != null) {
                    row_STG_PEICE_PROCESS_ID = fromLookup_row_STG_PEICE_PROCESS_ID;
                }

                // ###############################
                { // start of Var scope

                    // ###############################
                    // # Vars tables

                    Var__tMap_2_TMAP_IN__Struct Var = Var__tMap_2_TMAP_IN;
                    Var.var_Attribute_Val_id = (row_input_Attribute_Values.ATTRIBUTE_VAL_ID != null) ? row_input_Attribute_Values.ATTRIBUTE_VAL_ID
                            : input_Reference_Attribute.ATTRIBUTE_VAL_ID;
                    Var.var_Attribute_Value = (input_Reference_Attribute.IS_FREE != null && input_Reference_Attribute.IS_FREE
                            .equals("Y")) ? input_Reference_Attribute.ATTRIBUTE_VALUE
                            : null;// ###############################
                    // ###############################
                    // # Output tables

                    output_Products_Attributes = null;

                    if (!rejectedInnerJoin_tMap_2_TMAP_IN) {

                        // # Output table : 'output_Products_Attributes'
                        output_Products_Attributes_tmp.LANG_ID = input_Reference_Attribute.LANG_ID;
                        output_Products_Attributes_tmp.PRODUCT_ID = row_STG_PEICE_PROCESS_ID.PRODUCT_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_ID = input_Reference_Attribute.ATTRIBUTE_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VAL_ID = (Var.var_Attribute_Val_id == null) ? -1
                                : Var.var_Attribute_Val_id;
                        output_Products_Attributes_tmp.ATTRIBUTE_VALUE_FREE = Var.var_Attribute_Value;
                        output_Products_Attributes_tmp.PIECE_PROCESS_ID = row_STG_PEICE_PROCESS_ID.PIECE_PROCESS_ID;
                        output_Products_Attributes_tmp.FORM_ID = row_STG_PEICE_PROCESS_ID.FORM_ID;
                        output_Products_Attributes_tmp.REFERENCE_ID = input_Reference_Attribute.REFERENCE_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_ID_1 = input_Reference_Attribute.ATTRIBUTE_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VAL_ID_1 = input_Reference_Attribute.ATTRIBUTE_VAL_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VALUE = input_Reference_Attribute.ATTRIBUTE_VALUE;
                        output_Products_Attributes_tmp.IS_FREE = input_Reference_Attribute.IS_FREE;
                        output_Products_Attributes_tmp.LANG_ID_1 = input_Reference_Attribute.LANG_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VAL_ORDER_BY = input_Reference_Attribute.ATTRIBUTE_VAL_ORDER_BY;
                        output_Products_Attributes_tmp.ATTRIBUTE_ID_2 = row_input_Attribute_Values.ATTRIBUTE_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VAL_ID_2 = row_input_Attribute_Values.ATTRIBUTE_VAL_ID;
                        output_Products_Attributes_tmp.ATTRIBUTE_VALUE_1 = row_input_Attribute_Values.ATTRIBUTE_VALUE;
                        output_Products_Attributes_tmp.FORM_ID_1 = row_STG_PEICE_PROCESS_ID.FORM_ID;
                        output_Products_Attributes_tmp.PRODUCT_ID_1 = row_STG_PEICE_PROCESS_ID.PRODUCT_ID;
                        output_Products_Attributes_tmp.REFERENCE_ID_1 = row_STG_PEICE_PROCESS_ID.REFERENCE_ID;
                        output_Products_Attributes_tmp.PIECE_PROCESS_ID_1 = row_STG_PEICE_PROCESS_ID.PIECE_PROCESS_ID;
                        output_Products_Attributes = output_Products_Attributes_tmp;
                    } // closing inner join bracket (2)
                    // ###############################

                } // end of Var scope

                rejectedInnerJoin_tMap_2_TMAP_IN = false;

                /**
                 * [tMap_2_TMAP_IN main ] stop
                 */
                // Start of branch "output_Products_Attributes"
                if (output_Products_Attributes != null) {

                    /**
                     * [tSortRow_1_SortOut main ] start
                     */

                    currentComponent = "tSortRow_1_SortOut";

                    Comparableoutput_Products_AttributesStruct arrayRowtSortRow_1_SortOut = new Comparableoutput_Products_AttributesStruct();

                    arrayRowtSortRow_1_SortOut.LANG_ID = output_Products_Attributes.LANG_ID;
                    arrayRowtSortRow_1_SortOut.PRODUCT_ID = output_Products_Attributes.PRODUCT_ID;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_ID = output_Products_Attributes.ATTRIBUTE_ID;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VAL_ID = output_Products_Attributes.ATTRIBUTE_VAL_ID;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VALUE_FREE = output_Products_Attributes.ATTRIBUTE_VALUE_FREE;
                    arrayRowtSortRow_1_SortOut.PIECE_PROCESS_ID = output_Products_Attributes.PIECE_PROCESS_ID;
                    arrayRowtSortRow_1_SortOut.FORM_ID = output_Products_Attributes.FORM_ID;
                    arrayRowtSortRow_1_SortOut.REFERENCE_ID = output_Products_Attributes.REFERENCE_ID;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_ID_1 = output_Products_Attributes.ATTRIBUTE_ID_1;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VAL_ID_1 = output_Products_Attributes.ATTRIBUTE_VAL_ID_1;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VALUE = output_Products_Attributes.ATTRIBUTE_VALUE;
                    arrayRowtSortRow_1_SortOut.IS_FREE = output_Products_Attributes.IS_FREE;
                    arrayRowtSortRow_1_SortOut.LANG_ID_1 = output_Products_Attributes.LANG_ID_1;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VAL_ORDER_BY = output_Products_Attributes.ATTRIBUTE_VAL_ORDER_BY;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_ID_2 = output_Products_Attributes.ATTRIBUTE_ID_2;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VAL_ID_2 = output_Products_Attributes.ATTRIBUTE_VAL_ID_2;
                    arrayRowtSortRow_1_SortOut.ATTRIBUTE_VALUE_1 = output_Products_Attributes.ATTRIBUTE_VALUE_1;
                    arrayRowtSortRow_1_SortOut.FORM_ID_1 = output_Products_Attributes.FORM_ID_1;
                    arrayRowtSortRow_1_SortOut.PRODUCT_ID_1 = output_Products_Attributes.PRODUCT_ID_1;
                    arrayRowtSortRow_1_SortOut.REFERENCE_ID_1 = output_Products_Attributes.REFERENCE_ID_1;
                    arrayRowtSortRow_1_SortOut.PIECE_PROCESS_ID_1 = output_Products_Attributes.PIECE_PROCESS_ID_1;
                    list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

                    /**
                     * [tSortRow_1_SortOut main ] stop
                     */

                } // End of branch "output_Products_Attributes"

            } // G_TM_M_250 close loop read file data
                // 'input_Reference_Attribute'

            /**
             * [tMap_2_TMAP_IN end ] start
             */

            currentComponent = "tMap_2_TMAP_IN";

            // ###############################
            // # Lookup hashes releasing
            fsi_input_Reference_Attribute.endGet();

            tHash_Lookup_row_input_Attribute_Values.endGet();
            globalMap.remove("tHash_Lookup_row_input_Attribute_Values");

            tHash_Lookup_row_STG_PEICE_PROCESS_ID.endGet();
            globalMap.remove("tHash_Lookup_row_STG_PEICE_PROCESS_ID");

            // ###############################

            ok_Hash.put("tMap_2_TMAP_IN", true);
            end_Hash.put("tMap_2_TMAP_IN", System.currentTimeMillis());

            /**
             * [tMap_2_TMAP_IN end ] stop
             */

            /**
             * [tSortRow_1_SortOut end ] start
             */

            currentComponent = "tSortRow_1_SortOut";

            output_Products_AttributesStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
                    .toArray(new Comparableoutput_Products_AttributesStruct[0]);

            java.util.Arrays.sort(array_tSortRow_1_SortOut);

            globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

            ok_Hash.put("tSortRow_1_SortOut", true);
            end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

            /**
             * [tSortRow_1_SortOut end ] stop
             */

            /**
             * [tFileOutputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_2", false);
            start_Hash
                    .put("tFileOutputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_2";

            String fileName_tFileOutputDelimited_2 = (new java.io.File(
                    context.Path + "out2/data_in_disk.csv")).getAbsolutePath()
                    .replace("\\", "/");
            String fullName_tFileOutputDelimited_2 = null;
            String extension_tFileOutputDelimited_2 = null;
            String directory_tFileOutputDelimited_2 = null;
            if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
                        .lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                        .substring(0, fileName_tFileOutputDelimited_2
                                .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                }
                directory_tFileOutputDelimited_2 = "";
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /**
                                                             * Start field
                                                             * tFileOutputDelimited_2:FIELDSEPARATOR
                                                             */
            ","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                                                                     * Start
                                                                     * field
                                                                     * tFileOutputDelimited_2:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_2 != null
                    && directory_tFileOutputDelimited_2.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
                        directory_tFileOutputDelimited_2);
                if (!dir_tFileOutputDelimited_2.exists()) {
                    dir_tFileOutputDelimited_2.mkdirs();
                }
            }

            // routines.system.Row
            java.io.Writer outtFileOutputDelimited_2 = new java.io.BufferedWriter(
                    new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(
                                    fileName_tFileOutputDelimited_2, false),
                            "UTF-8"));
            java.io.File filetFileOutputDelimited_2 = new java.io.File(
                    fileName_tFileOutputDelimited_2);

            if (filetFileOutputDelimited_2.length() == 0) {

                outtFileOutputDelimited_2.write("LANG_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("PRODUCT_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VAL_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VALUE_FREE");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("PIECE_PROCESS_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("FORM_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("REFERENCE_ID");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VAL_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VALUE");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("IS_FREE");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LANG_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VAL_ORDER_BY");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_ID_2");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VAL_ID_2");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ATTRIBUTE_VALUE_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("FORM_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("PRODUCT_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("REFERENCE_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("PIECE_PROCESS_ID_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
            }

            /**
             * [tFileOutputDelimited_2 begin ] stop
             */

            /**
             * [tSortRow_1_SortIn begin ] start
             */

            ok_Hash.put("tSortRow_1_SortIn", false);
            start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
            currentComponent = "tSortRow_1_SortIn";

            output_Products_AttributesStruct[] array_tSortRow_1_SortIn = (output_Products_AttributesStruct[]) globalMap
                    .get("tSortRow_1");

            int nb_line_tSortRow_1_SortIn = 0;

            output_Products_AttributesStruct current_tSortRow_1_SortIn = null;

            for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
                current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
                row2.LANG_ID = current_tSortRow_1_SortIn.LANG_ID;
                row2.PRODUCT_ID = current_tSortRow_1_SortIn.PRODUCT_ID;
                row2.ATTRIBUTE_ID = current_tSortRow_1_SortIn.ATTRIBUTE_ID;
                row2.ATTRIBUTE_VAL_ID = current_tSortRow_1_SortIn.ATTRIBUTE_VAL_ID;
                row2.ATTRIBUTE_VALUE_FREE = current_tSortRow_1_SortIn.ATTRIBUTE_VALUE_FREE;
                row2.PIECE_PROCESS_ID = current_tSortRow_1_SortIn.PIECE_PROCESS_ID;
                row2.FORM_ID = current_tSortRow_1_SortIn.FORM_ID;
                row2.REFERENCE_ID = current_tSortRow_1_SortIn.REFERENCE_ID;
                row2.ATTRIBUTE_ID_1 = current_tSortRow_1_SortIn.ATTRIBUTE_ID_1;
                row2.ATTRIBUTE_VAL_ID_1 = current_tSortRow_1_SortIn.ATTRIBUTE_VAL_ID_1;
                row2.ATTRIBUTE_VALUE = current_tSortRow_1_SortIn.ATTRIBUTE_VALUE;
                row2.IS_FREE = current_tSortRow_1_SortIn.IS_FREE;
                row2.LANG_ID_1 = current_tSortRow_1_SortIn.LANG_ID_1;
                row2.ATTRIBUTE_VAL_ORDER_BY = current_tSortRow_1_SortIn.ATTRIBUTE_VAL_ORDER_BY;
                row2.ATTRIBUTE_ID_2 = current_tSortRow_1_SortIn.ATTRIBUTE_ID_2;
                row2.ATTRIBUTE_VAL_ID_2 = current_tSortRow_1_SortIn.ATTRIBUTE_VAL_ID_2;
                row2.ATTRIBUTE_VALUE_1 = current_tSortRow_1_SortIn.ATTRIBUTE_VALUE_1;
                row2.FORM_ID_1 = current_tSortRow_1_SortIn.FORM_ID_1;
                row2.PRODUCT_ID_1 = current_tSortRow_1_SortIn.PRODUCT_ID_1;
                row2.REFERENCE_ID_1 = current_tSortRow_1_SortIn.REFERENCE_ID_1;
                row2.PIECE_PROCESS_ID_1 = current_tSortRow_1_SortIn.PIECE_PROCESS_ID_1;
                // increase number of line sorted
                nb_line_tSortRow_1_SortIn++;

                /**
                 * [tSortRow_1_SortIn begin ] stop
                 */
                /**
                 * [tSortRow_1_SortIn main ] start
                 */

                currentComponent = "tSortRow_1_SortIn";

                /**
                 * [tSortRow_1_SortIn main ] stop
                 */

                /**
                 * [tFileOutputDelimited_2 main ] start
                 */

                currentComponent = "tFileOutputDelimited_2";

                StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

                if (row2.LANG_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.LANG_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.PRODUCT_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.PRODUCT_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VAL_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VAL_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VALUE_FREE != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VALUE_FREE

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.PIECE_PROCESS_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.PIECE_PROCESS_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.FORM_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.FORM_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.REFERENCE_ID != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.REFERENCE_ID

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VAL_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VAL_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VALUE != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VALUE

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.IS_FREE != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.IS_FREE

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.LANG_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.LANG_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VAL_ORDER_BY != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VAL_ORDER_BY

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_ID_2 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_ID_2

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VAL_ID_2 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VAL_ID_2

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.ATTRIBUTE_VALUE_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.ATTRIBUTE_VALUE_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.FORM_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.FORM_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.PRODUCT_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.PRODUCT_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.REFERENCE_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.REFERENCE_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_tFileOutputDelimited_2);

                if (row2.PIECE_PROCESS_ID_1 != null) {

                    sb_tFileOutputDelimited_2.append(

                    row2.PIECE_PROCESS_ID_1

                    );

                }

                sb_tFileOutputDelimited_2
                        .append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
                        .toString());

                nb_line_tFileOutputDelimited_2++;

                /**
                 * [tFileOutputDelimited_2 main ] stop
                 */

                /**
                 * [tSortRow_1_SortIn end ] start
                 */

                currentComponent = "tSortRow_1_SortIn";

            }

            globalMap.put("tSortRow_1_SortIn_NB_LINE",
                    nb_line_tSortRow_1_SortIn);

            ok_Hash.put("tSortRow_1_SortIn", true);
            end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

            /**
             * [tSortRow_1_SortIn end ] stop
             */

            /**
             * [tFileOutputDelimited_2 end ] start
             */

            currentComponent = "tFileOutputDelimited_2";

            outtFileOutputDelimited_2.close();
            globalMap.put("tFileOutputDelimited_2_NB_LINE",
                    nb_line_tFileOutputDelimited_2);

            ok_Hash.put("tFileOutputDelimited_2", true);
            end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_2 end ] stop
             */

            talendMeter_METTERProcess();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        finally {
            // free memory for "tSortRow_1_SortIn"
            globalMap.put("tSortRow_1", null);

            System.gc();
        }

        globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
    }

    public void tFileTouch_1Process() throws TalendException {
        globalMap.put("tFileTouch_1_SUBPROCESS_STATE", 0);
        try {

            /**
             * [tFileTouch_1 begin ] start
             */

            ok_Hash.put("tFileTouch_1", false);
            start_Hash.put("tFileTouch_1", System.currentTimeMillis());
            currentComponent = "tFileTouch_1";

            /**
             * [tFileTouch_1 begin ] stop
             */
            /**
             * [tFileTouch_1 main ] start
             */

            currentComponent = "tFileTouch_1";

            java.io.File file_tFileTouch_1 = new java.io.File(context.Path
                    + "OUTPUT_PRODUCT_ATTRIBUTES.txt");
            // create new file
            boolean resulttFileTouch_1 = file_tFileTouch_1.createNewFile();
            // if file already exists, modify the last-modified-time of the file
            if (!resulttFileTouch_1) {
                file_tFileTouch_1.setLastModified((new Date()).getTime());
            }

            /**
             * [tFileTouch_1 main ] stop
             */
            /**
             * [tFileTouch_1 end ] start
             */

            currentComponent = "tFileTouch_1";

            ok_Hash.put("tFileTouch_1", true);
            end_Hash.put("tFileTouch_1", System.currentTimeMillis());

            tFileInputDelimited_5Process();

            /**
             * [tFileTouch_1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileTouch_1_SUBPROCESS_STATE", 1);
    }

    static class row_talendLogs_LOGSStruct implements
            routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String root_pid;

        String father_pid;

        String project;

        String job;

        String context;

        Integer priority;

        String type;

        String origin;

        String message;

        Integer code;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.root_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.root_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.father_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.father_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.context = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.context = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.priority = null;
                    } else {
                        this.priority = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.type = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.type = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.message = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.message = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.code = null;
                    } else {
                        this.code = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.root_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.root_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.father_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.father_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.context == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.context.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.priority == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.priority);
                }

                // String

                if (this.type == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.type.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.message == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.message.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.code == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.code);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("root_pid");
            sb.append("=");
            sb.append(String.valueOf(this.root_pid));

            sb.append(", ");

            sb.append("father_pid");
            sb.append("=");
            sb.append(String.valueOf(this.father_pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("context");
            sb.append("=");
            sb.append(String.valueOf(this.context));

            sb.append(", ");

            sb.append("priority");
            sb.append("=");
            sb.append(String.valueOf(this.priority));

            sb.append(", ");

            sb.append("type");
            sb.append("=");
            sb.append(String.valueOf(this.type));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("message");
            sb.append("=");
            sb.append(String.valueOf(this.message));

            sb.append(", ");

            sb.append("code");
            sb.append("=");
            sb.append(String.valueOf(this.code));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_talendLogs_LOGSStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void talendLogs_LOGSProcess() throws TalendException {
        globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);
        try {

            row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

            /**
             * [talendLogs_CONSOLE begin ] start
             */

            ok_Hash.put("talendLogs_CONSOLE", false);
            start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
            currentComponent = "talendLogs_CONSOLE";

            // /////////////////////

            final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
            java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

            int nb_line_talendLogs_CONSOLE = 0;

            // /////////////////////

            /**
             * [talendLogs_CONSOLE begin ] stop
             */

            /**
             * [talendLogs_LOGS begin ] start
             */

            ok_Hash.put("talendLogs_LOGS", false);
            start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
            currentComponent = "talendLogs_LOGS";

            for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
                    .getMessages()) {
                row_talendLogs_LOGS.type = lcm.getType();
                row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
                        || lcm.getOrigin().length() < 1 ? null : lcm
                        .getOrigin());
                row_talendLogs_LOGS.priority = lcm.getPriority();
                row_talendLogs_LOGS.message = lcm.getMessage();
                row_talendLogs_LOGS.code = lcm.getCode();

                row_talendLogs_LOGS.moment = java.util.Calendar.getInstance()
                        .getTime();

                row_talendLogs_LOGS.pid = pid;
                row_talendLogs_LOGS.root_pid = rootPid;
                row_talendLogs_LOGS.father_pid = fatherPid;

                row_talendLogs_LOGS.project = projectName;
                row_talendLogs_LOGS.job = jobName;
                row_talendLogs_LOGS.context = contextStr;

                /**
                 * [talendLogs_LOGS begin ] stop
                 */
                /**
                 * [talendLogs_LOGS main ] start
                 */

                currentComponent = "talendLogs_LOGS";

                /**
                 * [talendLogs_LOGS main ] stop
                 */

                /**
                 * [talendLogs_CONSOLE main ] start
                 */

                currentComponent = "talendLogs_CONSOLE";

                // /////////////////////

                StringBuilder strBuffer_talendLogs_CONSOLE = new StringBuilder();

                if (row_talendLogs_LOGS.moment != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(FormatterUtils
                            .format_Date(row_talendLogs_LOGS.moment,
                                    "yyyy-MM-dd HH:mm:ss"));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.pid != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.pid));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.root_pid != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.root_pid));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.father_pid != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.father_pid));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.project != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.project));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.job != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.job));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.context != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.context));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.priority != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.priority));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.type != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.type));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.origin != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.origin));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.message != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.message));

                } //            

                strBuffer_talendLogs_CONSOLE.append("|");

                if (row_talendLogs_LOGS.code != null) { //              

                    strBuffer_talendLogs_CONSOLE.append(String
                            .valueOf(row_talendLogs_LOGS.code));

                } //            

                if (globalMap.get("tLogRow_CONSOLE") != null) {
                    consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
                            .get("tLogRow_CONSOLE");
                } else {
                    consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
                            new java.io.BufferedOutputStream(System.out));
                    globalMap.put("tLogRow_CONSOLE",
                            consoleOut_talendLogs_CONSOLE);
                }

                consoleOut_talendLogs_CONSOLE
                        .println(strBuffer_talendLogs_CONSOLE.toString());
                consoleOut_talendLogs_CONSOLE.flush();
                nb_line_talendLogs_CONSOLE++;
                // ////

                // ////

                // /////////////////////

                /**
                 * [talendLogs_CONSOLE main ] stop
                 */

                /**
                 * [talendLogs_LOGS end ] start
                 */

                currentComponent = "talendLogs_LOGS";

            }

            ok_Hash.put("talendLogs_LOGS", true);
            end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

            /**
             * [talendLogs_LOGS end ] stop
             */

            /**
             * [talendLogs_CONSOLE end ] start
             */

            currentComponent = "talendLogs_CONSOLE";

            // ////
            // ////
            globalMap.put("talendLogs_CONSOLE_NB_LINE",
                    nb_line_talendLogs_CONSOLE);

            // /////////////////////

            ok_Hash.put("talendLogs_CONSOLE", true);
            end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

            /**
             * [talendLogs_CONSOLE end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
    }

    static class row_talendStats_STATSStruct implements
            routines.system.IPersistableRow<row_talendStats_STATSStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String father_pid;

        String root_pid;

        Long system_pid;

        String project;

        String job;

        String job_repository_id;

        String job_version;

        String context;

        String origin;

        String message_type;

        String message;

        Long duration;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.father_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.father_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.root_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.root_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.system_pid = null;
                    } else {
                        this.system_pid = dis.readLong();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job_repository_id = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job_repository_id = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job_version = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job_version = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.context = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.context = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.message_type = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.message_type = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.message = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.message = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.duration = null;
                    } else {
                        this.duration = dis.readLong();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.father_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.father_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.root_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.root_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Long

                if (this.system_pid == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.system_pid);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job_repository_id == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job_repository_id.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job_version == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job_version.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.context == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.context.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.message_type == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.message_type.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.message == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.message.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Long

                if (this.duration == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.duration);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("father_pid");
            sb.append("=");
            sb.append(String.valueOf(this.father_pid));

            sb.append(", ");

            sb.append("root_pid");
            sb.append("=");
            sb.append(String.valueOf(this.root_pid));

            sb.append(", ");

            sb.append("system_pid");
            sb.append("=");
            sb.append(String.valueOf(this.system_pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("job_repository_id");
            sb.append("=");
            sb.append(String.valueOf(this.job_repository_id));

            sb.append(", ");

            sb.append("job_version");
            sb.append("=");
            sb.append(String.valueOf(this.job_version));

            sb.append(", ");

            sb.append("context");
            sb.append("=");
            sb.append(String.valueOf(this.context));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("message_type");
            sb.append("=");
            sb.append(String.valueOf(this.message_type));

            sb.append(", ");

            sb.append("message");
            sb.append("=");
            sb.append(String.valueOf(this.message));

            sb.append(", ");

            sb.append("duration");
            sb.append("=");
            sb.append(String.valueOf(this.duration));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_talendStats_STATSStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void talendStats_STATSProcess() throws TalendException {
        globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);
        try {

            row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

            /**
             * [talendStats_CONSOLE begin ] start
             */

            ok_Hash.put("talendStats_CONSOLE", false);
            start_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
            currentComponent = "talendStats_CONSOLE";

            // /////////////////////

            final String OUTPUT_FIELD_SEPARATOR_talendStats_CONSOLE = "|";
            java.io.PrintStream consoleOut_talendStats_CONSOLE = null;

            int nb_line_talendStats_CONSOLE = 0;

            // /////////////////////

            /**
             * [talendStats_CONSOLE begin ] stop
             */

            /**
             * [talendStats_STATS begin ] start
             */

            ok_Hash.put("talendStats_STATS", false);
            start_Hash.put("talendStats_STATS", System.currentTimeMillis());
            currentComponent = "talendStats_STATS";

            for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
                    .getMessages()) {
                row_talendStats_STATS.pid = pid;
                row_talendStats_STATS.root_pid = rootPid;
                row_talendStats_STATS.father_pid = fatherPid;
                row_talendStats_STATS.project = projectName;
                row_talendStats_STATS.job = jobName;
                row_talendStats_STATS.context = contextStr;
                row_talendStats_STATS.origin = (scm.getOrigin() == null
                        || scm.getOrigin().length() < 1 ? null : scm
                        .getOrigin());
                row_talendStats_STATS.message = scm.getMessage();
                row_talendStats_STATS.duration = scm.getDuration();
                row_talendStats_STATS.moment = scm.getMoment();
                row_talendStats_STATS.message_type = scm.getMessageType();
                row_talendStats_STATS.job_version = scm.getJobVersion();
                row_talendStats_STATS.job_repository_id = scm.getJobId();
                row_talendStats_STATS.system_pid = scm.getSystemPid();

                /**
                 * [talendStats_STATS begin ] stop
                 */
                /**
                 * [talendStats_STATS main ] start
                 */

                currentComponent = "talendStats_STATS";

                /**
                 * [talendStats_STATS main ] stop
                 */

                /**
                 * [talendStats_CONSOLE main ] start
                 */

                currentComponent = "talendStats_CONSOLE";

                // /////////////////////

                StringBuilder strBuffer_talendStats_CONSOLE = new StringBuilder();

                if (row_talendStats_STATS.moment != null) { //              

                    strBuffer_talendStats_CONSOLE.append(FormatterUtils
                            .format_Date(row_talendStats_STATS.moment,
                                    "yyyy-MM-dd HH:mm:ss"));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.pid != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.pid));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.father_pid != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.father_pid));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.root_pid != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.root_pid));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.system_pid != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.system_pid));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.project != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.project));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.job != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.job));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.job_repository_id != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.job_repository_id));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.job_version != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.job_version));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.context != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.context));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.origin != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.origin));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.message_type != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.message_type));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.message != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.message));

                } //            

                strBuffer_talendStats_CONSOLE.append("|");

                if (row_talendStats_STATS.duration != null) { //              

                    strBuffer_talendStats_CONSOLE.append(String
                            .valueOf(row_talendStats_STATS.duration));

                } //            

                if (globalMap.get("tLogRow_CONSOLE") != null) {
                    consoleOut_talendStats_CONSOLE = (java.io.PrintStream) globalMap
                            .get("tLogRow_CONSOLE");
                } else {
                    consoleOut_talendStats_CONSOLE = new java.io.PrintStream(
                            new java.io.BufferedOutputStream(System.out));
                    globalMap.put("tLogRow_CONSOLE",
                            consoleOut_talendStats_CONSOLE);
                }

                consoleOut_talendStats_CONSOLE
                        .println(strBuffer_talendStats_CONSOLE.toString());
                consoleOut_talendStats_CONSOLE.flush();
                nb_line_talendStats_CONSOLE++;
                // ////

                // ////

                // /////////////////////

                /**
                 * [talendStats_CONSOLE main ] stop
                 */

                /**
                 * [talendStats_STATS end ] start
                 */

                currentComponent = "talendStats_STATS";

            }

            ok_Hash.put("talendStats_STATS", true);
            end_Hash.put("talendStats_STATS", System.currentTimeMillis());

            /**
             * [talendStats_STATS end ] stop
             */

            /**
             * [talendStats_CONSOLE end ] start
             */

            currentComponent = "talendStats_CONSOLE";

            // ////
            // ////
            globalMap.put("talendStats_CONSOLE_NB_LINE",
                    nb_line_talendStats_CONSOLE);

            // /////////////////////

            ok_Hash.put("talendStats_CONSOLE", true);
            end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());

            /**
             * [talendStats_CONSOLE end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
    }

    static class row_talendMeter_METTERStruct implements
            routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String father_pid;

        String root_pid;

        Long system_pid;

        String project;

        String job;

        String job_repository_id;

        String job_version;

        String context;

        String origin;

        String label;

        Integer count;

        Integer reference;

        String thresholds;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.father_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.father_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.root_pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.root_pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.system_pid = null;
                    } else {
                        this.system_pid = dis.readLong();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job_repository_id = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job_repository_id = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job_version = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job_version = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.context = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.context = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.label = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.label = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.count = null;
                    } else {
                        this.count = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.reference = null;
                    } else {
                        this.reference = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.thresholds = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.thresholds = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.father_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.father_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.root_pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.root_pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Long

                if (this.system_pid == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.system_pid);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job_repository_id == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job_repository_id.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job_version == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job_version.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.context == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.context.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.label == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.label.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.count == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.count);
                }

                // Integer

                if (this.reference == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.reference);
                }

                // String

                if (this.thresholds == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.thresholds.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("father_pid");
            sb.append("=");
            sb.append(String.valueOf(this.father_pid));

            sb.append(", ");

            sb.append("root_pid");
            sb.append("=");
            sb.append(String.valueOf(this.root_pid));

            sb.append(", ");

            sb.append("system_pid");
            sb.append("=");
            sb.append(String.valueOf(this.system_pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("job_repository_id");
            sb.append("=");
            sb.append(String.valueOf(this.job_repository_id));

            sb.append(", ");

            sb.append("job_version");
            sb.append("=");
            sb.append(String.valueOf(this.job_version));

            sb.append(", ");

            sb.append("context");
            sb.append("=");
            sb.append(String.valueOf(this.context));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("label");
            sb.append("=");
            sb.append(String.valueOf(this.label));

            sb.append(", ");

            sb.append("count");
            sb.append("=");
            sb.append(String.valueOf(this.count));

            sb.append(", ");

            sb.append("reference");
            sb.append("=");
            sb.append(String.valueOf(this.reference));

            sb.append(", ");

            sb.append("thresholds");
            sb.append("=");
            sb.append(String.valueOf(this.thresholds));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row_talendMeter_METTERStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void talendMeter_METTERProcess() throws TalendException {
        globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);
        try {

            row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();

            /**
             * [talendMeter_CONSOLE begin ] start
             */

            ok_Hash.put("talendMeter_CONSOLE", false);
            start_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
            currentComponent = "talendMeter_CONSOLE";

            // /////////////////////

            final String OUTPUT_FIELD_SEPARATOR_talendMeter_CONSOLE = "|";
            java.io.PrintStream consoleOut_talendMeter_CONSOLE = null;

            int nb_line_talendMeter_CONSOLE = 0;

            // /////////////////////

            /**
             * [talendMeter_CONSOLE begin ] stop
             */

            /**
             * [talendMeter_METTER begin ] start
             */

            ok_Hash.put("talendMeter_METTER", false);
            start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
            currentComponent = "talendMeter_METTER";

            for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER
                    .getMessages()) {
                row_talendMeter_METTER.pid = pid;
                row_talendMeter_METTER.root_pid = rootPid;
                row_talendMeter_METTER.father_pid = fatherPid;
                row_talendMeter_METTER.project = projectName;
                row_talendMeter_METTER.job = jobName;
                row_talendMeter_METTER.context = contextStr;
                row_talendMeter_METTER.origin = (mcm.getOrigin() == null
                        || mcm.getOrigin().length() < 1 ? null : mcm
                        .getOrigin());
                row_talendMeter_METTER.moment = mcm.getMoment();
                row_talendMeter_METTER.job_version = mcm.getJobVersion();
                row_talendMeter_METTER.job_repository_id = mcm.getJobId();
                row_talendMeter_METTER.system_pid = mcm.getSystemPid();
                row_talendMeter_METTER.label = mcm.getLabel();
                row_talendMeter_METTER.count = mcm.getCount();
                row_talendMeter_METTER.reference = MetterCatcherUtils
                        .getConnLinesCount(mcm.getReferense() + "_count");
                row_talendMeter_METTER.thresholds = mcm.getThresholds();

                /**
                 * [talendMeter_METTER begin ] stop
                 */
                /**
                 * [talendMeter_METTER main ] start
                 */

                currentComponent = "talendMeter_METTER";

                /**
                 * [talendMeter_METTER main ] stop
                 */

                /**
                 * [talendMeter_CONSOLE main ] start
                 */

                currentComponent = "talendMeter_CONSOLE";

                // /////////////////////

                StringBuilder strBuffer_talendMeter_CONSOLE = new StringBuilder();

                if (row_talendMeter_METTER.moment != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(FormatterUtils
                            .format_Date(row_talendMeter_METTER.moment,
                                    "yyyy-MM-dd HH:mm:ss"));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.pid != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.pid));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.father_pid != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.father_pid));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.root_pid != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.root_pid));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.system_pid != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.system_pid));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.project != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.project));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.job != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.job));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.job_repository_id != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.job_repository_id));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.job_version != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.job_version));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.context != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.context));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.origin != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.origin));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.label != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.label));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.count != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.count));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.reference != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.reference));

                } //            

                strBuffer_talendMeter_CONSOLE.append("|");

                if (row_talendMeter_METTER.thresholds != null) { //              

                    strBuffer_talendMeter_CONSOLE.append(String
                            .valueOf(row_talendMeter_METTER.thresholds));

                } //            

                if (globalMap.get("tLogRow_CONSOLE") != null) {
                    consoleOut_talendMeter_CONSOLE = (java.io.PrintStream) globalMap
                            .get("tLogRow_CONSOLE");
                } else {
                    consoleOut_talendMeter_CONSOLE = new java.io.PrintStream(
                            new java.io.BufferedOutputStream(System.out));
                    globalMap.put("tLogRow_CONSOLE",
                            consoleOut_talendMeter_CONSOLE);
                }

                consoleOut_talendMeter_CONSOLE
                        .println(strBuffer_talendMeter_CONSOLE.toString());
                consoleOut_talendMeter_CONSOLE.flush();
                nb_line_talendMeter_CONSOLE++;
                // ////

                // ////

                // /////////////////////

                /**
                 * [talendMeter_CONSOLE main ] stop
                 */

                /**
                 * [talendMeter_METTER end ] start
                 */

                currentComponent = "talendMeter_METTER";

            }

            ok_Hash.put("talendMeter_METTER", true);
            end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

            /**
             * [talendMeter_METTER end ] stop
             */

            /**
             * [talendMeter_CONSOLE end ] start
             */

            currentComponent = "talendMeter_CONSOLE";

            // ////
            // ////
            globalMap.put("talendMeter_CONSOLE_NB_LINE",
                    nb_line_talendMeter_CONSOLE);

            // /////////////////////

            ok_Hash.put("talendMeter_CONSOLE", true);
            end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());

            /**
             * [talendMeter_CONSOLE end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
    }

    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "Default";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
    public static long startTime = 0;

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES.class
                    .getClassLoader()
                    .getResourceAsStream(
                            "java_project_9/test_by_ram_stg_product_attributes_0_1/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES.class
                        .getClassLoader().getResourceAsStream(
                                "java_project_9/test_by_ram_stg_product_attributes_0_1/contexts/"
                                        + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            context.Path = (String) context.getProperty("Path");

            context.hostAMC = (String) context.getProperty("hostAMC");

            context.portAMC = (String) context.getProperty("portAMC");

            context.userNameAMC = (String) context.getProperty("userNameAMC");

            context.passwordAMC = (String) context.getProperty("passwordAMC");

            context.databaseAMC = (String) context.getProperty("databaseAMC");

            context.schemaAMC = (String) context.getProperty("schemaAMC");

            context.ContextFileName = (String) context
                    .getProperty("ContextFileName");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass = new TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES();
        TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass.talendStats_STATS
                .addMessage("begin");

        try {
            TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass.talendStats_STATSProcess();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            errorCode = null;
            TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass.tFileTouch_1Process();
            status = "end";
        } catch (TalendException e_tFileTouch_1) {
            status = "failure";
            e_tFileTouch_1.printStackTrace();
            globalMap.put("tFileTouch_1_SUBPROCESS_STATE", -1);

        } finally {
        }

        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out
                    .println((endUsedMemory - startUsedMemory)
                            + " bytes memory increase when running : TEST_BY_RAM_STG_PRODUCT_ATTRIBUTES");
        }
        TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass.talendStats_STATS.addMessage(
                status == "" ? "end" : status, (end - startTime));
        try {
            TEST_BY_RAM_STG_PRODUCT_ATTRIBUTESClass.talendStats_STATSProcess();
        } catch (Exception e) {
            e.printStackTrace();
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue
                        .substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "Default";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/*******************************************************************************
 * 300063 characters generated by Talend OpenStudio on the 9 septembre 2008
 * 13:59:17 CEST
 ******************************************************************************/
