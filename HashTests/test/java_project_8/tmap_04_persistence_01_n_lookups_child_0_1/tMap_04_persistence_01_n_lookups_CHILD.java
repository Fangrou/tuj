// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package java_project_8.tmap_04_persistence_01_n_lookups_child_0_1;

import routines.libs;
import routines.randomGenerator;
import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_2
//import java.util.List;

//the import part of tJavaFlex_3
//import java.util.List;

//the import part of tJavaFlex_4
//import java.util.List;

/**
 * Job: tMap_04_persistence_01_n_lookups_CHILD Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.2.0.qualifier
 * @status
 */
public class tMap_04_persistence_01_n_lookups_CHILD {
    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public static String param_file_path;
        public static String data_dir;
        public static String data_output_dir;
        public static String result_host;
        public static String result_port;
        public static String result_database;
        public static String result_username;
        public static String result_password;
        public static String result_table;
        public static String mysql_host;
        public static String mysql_port;
        public static String mysql_schema;
        public static String mysql_username;
        public static String mysql_password;
        public static String current_job_dir;
        public static String indexMain;
        public static String indexLookup;
    }

    private static ContextProperties context = new ContextProperties();
    private static final String jobName = "tMap_04_persistence_01_n_lookups_CHILD";
    private static final String projectName = "JAVA_PROJECT_8";
    public static Integer errorCode = null;
    private static String currentComponent = "";
    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    private class TalendException extends Exception {
        private Exception e = null;
        private tMap_04_persistence_01_n_lookups_CHILD c = null;

        private TalendException(tMap_04_persistence_01_n_lookups_CHILD c,
                Exception e) {
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e
                        .getMessage());
                System.err
                        .println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass()
                            .getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tFileInputDelimited_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tContextLoad_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tContextLoad_1", System.currentTimeMillis());
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tJavaFlex_3_error(Exception exception) throws TalendException {
        end_Hash.put("tJavaFlex_3", System.currentTimeMillis());
        tJavaFlex_3_onSubJobError(exception);
    }

    public void tFileInputDelimited_8_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileOutputDelimited_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileCompare_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileCompare_1", System.currentTimeMillis());
        tFileCompare_1_onSubJobError(exception);
    }

    public void tJavaFlex_4_error(Exception exception) throws TalendException {
        end_Hash.put("tJavaFlex_4", System.currentTimeMillis());
        tJavaFlex_4_onSubJobError(exception);
    }

    public void tFixedFlowInput_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
        tJavaFlex_4_onSubJobError(exception);
    }

    public void tBufferOutput_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tBufferOutput_1", System.currentTimeMillis());
        tJavaFlex_4_onSubJobError(exception);
    }

    public void tFileInputDelimited_4_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_5_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_6_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_7_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_9_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHashPersistent_lookup_ALL_MATCHES_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHashPersistent_lookup_ALL_MATCHES", System
                .currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHashPersistent_lookup_FIRST_MATCH_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHashPersistent_lookup_FIRST_MATCH", System
                .currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHashPersistent_LOOKUP_LAST_MATCH_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHashPersistent_LOOKUP_LAST_MATCH", System
                .currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHashPersistent_lookup_UNIQUE_MACTH_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHashPersistent_lookup_UNIQUE_MACTH", System
                .currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHashPersistent_lookup_ALL_ROWS_error(
            Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHashPersistent_lookup_ALL_ROWS", System
                .currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMapPersistent_1_TMAP_OUT_error(Exception exception)
            throws TalendException {
        end_Hash.put("tMapPersistent_1_TMAP_OUT", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMapPersistent_1_TMAP_IN_error(Exception exception)
            throws TalendException {
        end_Hash.put("tMapPersistent_1_TMAP_IN", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_2_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tJavaFlex_3_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFileInputDelimited_8_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFileCompare_1_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tJavaFlex_4_onSubJobError(Exception exception)
            throws TalendException {
    }

    private class row6Struct implements
            routines.system.IPersistableRow<row6Struct> {

        String key;

        String value;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.key = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.key = new String(byteArray);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.value = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.value = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.key == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.key.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.value == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.value.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("key");
            sb.append("=");
            sb.append(String.valueOf(this.key));

            sb.append(", ");

            sb.append("value");
            sb.append("=");
            sb.append(String.valueOf(this.value));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row6Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_2Process() throws TalendException {
        try {

            row6Struct row6 = new row6Struct();

            /**
             * [tContextLoad_1 begin ] start
             */

            ok_Hash.put("tContextLoad_1", false);
            start_Hash.put("tContextLoad_1", System.currentTimeMillis());
            currentComponent = "tContextLoad_1";

            java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
            int nb_line_tContextLoad_1 = 0;
            /**
             * [tContextLoad_1 begin ] stop
             */

            /**
             * [tFileInputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_2", false);
            start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_2";

            int nb_line_tFileInputDelimited_2 = 0;
            int footer_tFileInputDelimited_2 = 0;
            int totalLinetFileInputDelimited_2 = 0;
            int limittFileInputDelimited_2 = -1;
            int lastLinetFileInputDelimited_2 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                                                         * Start field
                                                         * tFileInputDelimited_2:FILENAME
                                                         */
                            context.param_file_path/**
                                                     * End field
                                                     * tFileInputDelimited_2:FILENAME
                                                     */
                            ), "ISO-8859-15")), ',');

            csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
            csvReadertFileInputDelimited_2.setTextQualifier('"');

            csvReadertFileInputDelimited_2
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_2 = null;

            if (footer_tFileInputDelimited_2 > 0) {

                while (csvReadertFileInputDelimited_2.readRecord()) {
                    rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                            .getValues();
                    if (!(rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0]
                            .equals("\015"))) {// empty line when row separator
                                                // is '\n'

                        totalLinetFileInputDelimited_2++;

                    }

                }
                int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
                        - footer_tFileInputDelimited_2 < 0 ? 0
                        : totalLinetFileInputDelimited_2
                                - footer_tFileInputDelimited_2;
                if (lastLinetFileInputDelimited_2 > 0) {
                    lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
                            : lastLineTemptFileInputDelimited_2;
                } else {
                    lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
                }

                csvReadertFileInputDelimited_2.close();

                csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(/**
                                                                     * Start
                                                                     * field
                                                                     * tFileInputDelimited_2:FILENAME
                                                                     */
                                        context.param_file_path/**
                                                                 * End field
                                                                 * tFileInputDelimited_2:FILENAME
                                                                 */
                                        ), "ISO-8859-15")), ',');
                csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
                csvReadertFileInputDelimited_2.setTextQualifier('"');

                csvReadertFileInputDelimited_2
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_2 = 0;
            int outputLinetFileInputDelimited_2 = 0;

            while (csvReadertFileInputDelimited_2.readRecord()) {

                rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                        .getValues();

                if (rowtFileInputDelimited_2.length == 1
                        && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                        // line
                                                                        // when
                                                                        // row
                                                                        // separator
                                                                        // is
                                                                        // '\n'
                    continue;
                }

                currentLinetFileInputDelimited_2++;
                if (currentLinetFileInputDelimited_2 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_2 > -1
                        && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
                    break;
                }
                outputLinetFileInputDelimited_2++;
                if (limittFileInputDelimited_2 != -1
                        && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
                    break;
                }

                row6 = null;
                boolean whetherReject_tFileInputDelimited_2 = false;
                row6 = new row6Struct();
                try {

                    if (rowtFileInputDelimited_2.length == 1
                            && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        row6.key = null;

                        row6.value = null;

                    } else {

                        if (0 < rowtFileInputDelimited_2.length) {
                            row6.key = rowtFileInputDelimited_2[0].trim();

                        } else {

                            row6.key = null;

                        }

                        if (1 < rowtFileInputDelimited_2.length) {
                            row6.value = rowtFileInputDelimited_2[1].trim();

                        } else {

                            row6.value = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_2 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_2 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_2 main ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                /**
                 * [tFileInputDelimited_2 main ] stop
                 */
                // Start of branch "row6"
                if (row6 != null) {

                    /**
                     * [tContextLoad_1 main ] start
                     */

                    currentComponent = "tContextLoad_1";

                    // ////////////////////////
                    String key_tContextLoad_1 = null;
                    if (row6.key != null) {
                        key_tContextLoad_1 = row6.key;
                    }
                    String value_tContextLoad_1 = null;
                    if (row6.value != null) {
                        value_tContextLoad_1 = row6.value;
                    }
                    if (context.getProperty(key_tContextLoad_1) != null) {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "indexMain".equals(key_tContextLoad_1)) {
                            context.indexMain = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "indexLookup".equals(key_tContextLoad_1)) {
                            context.indexLookup = value_tContextLoad_1;
                        }

                        assignList_tContextLoad_1.add(key_tContextLoad_1);
                    } else {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "indexMain".equals(key_tContextLoad_1)) {
                            context.indexMain = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "indexLookup".equals(key_tContextLoad_1)) {
                            context.indexLookup = value_tContextLoad_1;

                        }

                        newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
                    }
                    nb_line_tContextLoad_1++;
                    // ////////////////////////
                    /**
                     * [tContextLoad_1 main ] stop
                     */

                } // End of branch "row6"

                /**
                 * [tFileInputDelimited_2 end ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                nb_line_tFileInputDelimited_2++;
            }
            csvReadertFileInputDelimited_2.close();
            globalMap.put("tFileInputDelimited_2_NB_LINE",
                    nb_line_tFileInputDelimited_2);

            ok_Hash.put("tFileInputDelimited_2", true);
            end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_2 end ] stop
             */
            /**
             * [tContextLoad_1 end ] start
             */

            currentComponent = "tContextLoad_1";

            java.util.Enumeration<?> enu_tContextLoad_1 = context
                    .propertyNames();
            while (enu_tContextLoad_1.hasMoreElements()) {
                String key_tContextLoad_1 = (String) enu_tContextLoad_1
                        .nextElement();
                if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
                        && !newPropertyList_tContextLoad_1
                                .contains(key_tContextLoad_1)) {
                    noAssignList_tContextLoad_1.add(key_tContextLoad_1);
                }
            }
            globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

            ok_Hash.put("tContextLoad_1", true);
            end_Hash.put("tContextLoad_1", System.currentTimeMillis());

            /**
             * [tContextLoad_1 end ] stop
             */

            tJavaFlex_3Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public void tJavaFlex_3Process() throws TalendException {
        try {

            /**
             * [tJavaFlex_3 begin ] start
             */

            ok_Hash.put("tJavaFlex_3", false);
            start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
            currentComponent = "tJavaFlex_3";

            // start part of your Java code

            /**
             * [tJavaFlex_3 begin ] stop
             */
            /**
             * [tJavaFlex_3 main ] start
             */

            currentComponent = "tJavaFlex_3";

            // here is the main part of the component,
            // a piece of code executed in the row
            // loop
            // System.out.println("Testing with files 'main_" +
            // context.indexMain + ".csv' and 'lookup_" + context.indexLookup
            // +".csv' ...");

            /**
             * [tJavaFlex_3 main ] stop
             */
            /**
             * [tJavaFlex_3 end ] start
             */

            currentComponent = "tJavaFlex_3";

            // end of the component, outside/closing the loop

            ok_Hash.put("tJavaFlex_3", true);
            end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

            /**
             * [tJavaFlex_3 end ] stop
             */
            tFileInputDelimited_8Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class outStruct implements
            routines.system.IPersistableRow<outStruct> {

        Integer ID_MAIN;

        String LABEL_MAIN;

        Integer ID_LOOKUP_ALL_ROWS;

        String LABEL_LOOKUP_ALL_ROWS;

        Integer ID_LOOKUP_ALL_MATCHES;

        String LABEL_LOOKUP_ALL_MATCHES;

        Integer ID_LOOKUP_FIRST_MATCH;

        String LABEL_LOOKUP_FIRST_MATCH;

        Integer ID_LOOKUP_LAST_MATCH;

        String LABEL_LOOKUP_LAST_MATCH;

        Integer ID_LOOKUP_UNIQUE_MATCH;

        String LABEL_LOOKUP_UNIQUE_MATCH;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_ALL_ROWS = null;
                } else {
                    this.ID_LOOKUP_ALL_ROWS = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_ALL_ROWS = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_ALL_ROWS = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_ALL_MATCHES = null;
                } else {
                    this.ID_LOOKUP_ALL_MATCHES = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_ALL_MATCHES = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_ALL_MATCHES = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_FIRST_MATCH = null;
                } else {
                    this.ID_LOOKUP_FIRST_MATCH = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_FIRST_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_FIRST_MATCH = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_LAST_MATCH = null;
                } else {
                    this.ID_LOOKUP_LAST_MATCH = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_LAST_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_LAST_MATCH = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_UNIQUE_MATCH = null;
                } else {
                    this.ID_LOOKUP_UNIQUE_MATCH = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_UNIQUE_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_UNIQUE_MATCH = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.ID_LOOKUP_ALL_ROWS == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_ALL_ROWS);
                }

                if (this.LABEL_LOOKUP_ALL_ROWS == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_ALL_ROWS.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.ID_LOOKUP_ALL_MATCHES == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_ALL_MATCHES);
                }

                if (this.LABEL_LOOKUP_ALL_MATCHES == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_ALL_MATCHES.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.ID_LOOKUP_FIRST_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_FIRST_MATCH);
                }

                if (this.LABEL_LOOKUP_FIRST_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_FIRST_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.ID_LOOKUP_LAST_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_LAST_MATCH);
                }

                if (this.LABEL_LOOKUP_LAST_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_LAST_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                if (this.ID_LOOKUP_UNIQUE_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_UNIQUE_MATCH);
                }

                if (this.LABEL_LOOKUP_UNIQUE_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_UNIQUE_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append(", ");

            sb.append("ID_LOOKUP_ALL_ROWS");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_ALL_ROWS));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_ALL_ROWS");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_ALL_ROWS));

            sb.append(", ");

            sb.append("ID_LOOKUP_ALL_MATCHES");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_ALL_MATCHES));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_ALL_MATCHES");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_ALL_MATCHES));

            sb.append(", ");

            sb.append("ID_LOOKUP_FIRST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_FIRST_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_FIRST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_FIRST_MATCH));

            sb.append(", ");

            sb.append("ID_LOOKUP_LAST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_LAST_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_LAST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_LAST_MATCH));

            sb.append(", ");

            sb.append("ID_LOOKUP_UNIQUE_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_UNIQUE_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_UNIQUE_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_UNIQUE_MATCH));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(outStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    private class mainStruct implements
            routines.system.IPersistableRow<mainStruct> {

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(mainStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    private class after_tFileInputDelimited_8Struct implements
            routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tFileInputDelimited_8Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_8Process() throws TalendException {
        try {
            tFileInputDelimited_4Process();
            tFileInputDelimited_5Process();
            tFileInputDelimited_6Process();
            tFileInputDelimited_7Process();
            tFileInputDelimited_9Process();

            mainStruct main = new mainStruct();
            outStruct out = new outStruct();

            /**
             * [tMapPersistent_1_TMAP_OUT begin ] start
             */

            ok_Hash.put("tMapPersistent_1_TMAP_OUT", false);
            start_Hash.put("tMapPersistent_1_TMAP_OUT", System
                    .currentTimeMillis());
            currentComponent = "tMapPersistent_1_TMAP_OUT";

            // ###############################
            // # Lookup's keys initialization

            org.talend.designer.components.persistent.PersistentLookupManager<lookup_ALL_ROWSStruct> tHash_Lookup_lookup_ALL_ROWS = (org.talend.designer.components.persistent.PersistentLookupManager<lookup_ALL_ROWSStruct>) globalMap
                    .get("tHash_Lookup_lookup_ALL_ROWS");

            tHash_Lookup_lookup_ALL_ROWS.initGet();

            lookup_ALL_ROWSStruct lookup_ALL_ROWSHashKey = new lookup_ALL_ROWSStruct();
            lookup_ALL_ROWSStruct lookup_ALL_ROWSDefault = new lookup_ALL_ROWSStruct();

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_ALL_MATCHESStruct> tHash_Lookup_lookup_ALL_MATCHES = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_ALL_MATCHESStruct>) globalMap
                    .get("tHash_Lookup_lookup_ALL_MATCHES");

            lookup_ALL_MATCHESStruct lookup_ALL_MATCHESHashKey = new lookup_ALL_MATCHESStruct();
            lookup_ALL_MATCHESStruct lookup_ALL_MATCHESDefault = new lookup_ALL_MATCHESStruct();

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_FIRST_MATCHStruct> tHash_Lookup_lookup_FIRST_MATCH = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_FIRST_MATCHStruct>) globalMap
                    .get("tHash_Lookup_lookup_FIRST_MATCH");

            lookup_FIRST_MATCHStruct lookup_FIRST_MATCHHashKey = new lookup_FIRST_MATCHStruct();
            lookup_FIRST_MATCHStruct lookup_FIRST_MATCHDefault = new lookup_FIRST_MATCHStruct();

            org.talend.designer.components.persistent.PersistentSortedLookupManager<LOOKUP_LAST_MATCHStruct> tHash_Lookup_LOOKUP_LAST_MATCH = (org.talend.designer.components.persistent.PersistentSortedLookupManager<LOOKUP_LAST_MATCHStruct>) globalMap
                    .get("tHash_Lookup_LOOKUP_LAST_MATCH");

            LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCHHashKey = new LOOKUP_LAST_MATCHStruct();
            LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCHDefault = new LOOKUP_LAST_MATCHStruct();

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_UNIQUE_MACTHStruct> tHash_Lookup_lookup_UNIQUE_MACTH = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_UNIQUE_MACTHStruct>) globalMap
                    .get("tHash_Lookup_lookup_UNIQUE_MACTH");

            lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTHHashKey = new lookup_UNIQUE_MACTHStruct();
            lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTHDefault = new lookup_UNIQUE_MACTHStruct();
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            // ###############################

            class SortableRow_main implements Comparable<SortableRow_main>,
                    routines.system.IPersistableRow<SortableRow_main> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                // main
                Integer main__ID_MAIN;
                String main__LABEL_MAIN;

                public void fillFrom(mainStruct main) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;

                }

                public void copyDataTo(mainStruct main) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_main other) {

                    int returnValue = 0;

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1,
                                (String) object2);
                    } else if (object1 instanceof Comparable
                            && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(),
                                object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void loadData(byte[] data) {

                    ByteArrayInputStream bai = null;
                    DataInputStream dis = null;
                    byte[] byteArray = null;
                    try {
                        bai = new ByteArrayInputStream(data);
                        dis = new DataInputStream(bai);

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    } finally {
                        if (dis != null) {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

                public byte[] toData() {
                    ByteArrayOutputStream bao = null;
                    DataOutputStream dos = null;
                    byte[] byteArray = null;
                    try {
                        bao = new ByteArrayOutputStream();
                        dos = new DataOutputStream(bao);

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } finally {
                        if (dos != null) {
                            try {
                                dos.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    return bao.toByteArray();
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main> fsi_main = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main>(
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/tMapData_main") {
                public SortableRow_main createRowInstance() {
                    return new SortableRow_main();
                }
            };

            fsi_main.initPut();

            class SortableRow_main__lookup_ALL_ROWS
                    implements
                    Comparable<SortableRow_main__lookup_ALL_ROWS>,
                    routines.system.IPersistableRow<SortableRow_main__lookup_ALL_ROWS> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;

                // lookup_ALL_ROWS
                Integer main__ID_MAIN;
                String main__LABEL_MAIN;
                Integer lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                String lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;

                public void fillFrom(
                        mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        Integer exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                    this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;

                }

                public void copyDataTo(mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;
                    lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                    lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_main__lookup_ALL_ROWS other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(
                            this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES,
                            other.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1,
                                (String) object2);
                    } else if (object1 instanceof Comparable
                            && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(),
                                object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void loadData(byte[] data) {

                    ByteArrayInputStream bai = null;
                    DataInputStream dis = null;
                    byte[] byteArray = null;
                    try {
                        bai = new ByteArrayInputStream(data);
                        dis = new DataInputStream(bai);

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = null;
                        } else {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = null;
                        } else {
                            this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = dis
                                    .readInt();
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    } finally {
                        if (dis != null) {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

                public byte[] toData() {
                    ByteArrayOutputStream bao = null;
                    DataOutputStream dos = null;
                    byte[] byteArray = null;
                    try {
                        bao = new ByteArrayOutputStream();
                        dos = new DataOutputStream(bao);

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS);
                        }

                        if (this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } finally {
                        if (dos != null) {
                            try {
                                dos.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    return bao.toByteArray();
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS> fsi_main__lookup_ALL_ROWS = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS>(
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/tMapData_main__lookup_ALL_ROWS") {
                public SortableRow_main__lookup_ALL_ROWS createRowInstance() {
                    return new SortableRow_main__lookup_ALL_ROWS();
                }
            };

            fsi_main__lookup_ALL_ROWS.initPut();

            class SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES
                    implements
                    Comparable<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES>,
                    routines.system.IPersistableRow<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;

                // lookup_ALL_MATCHES
                Integer main__ID_MAIN;
                String main__LABEL_MAIN;
                Integer lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                String lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                Integer lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                String lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;

                public void fillFrom(
                        mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES,
                        Integer exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES;
                    this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES;
                    this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;

                }

                public void copyDataTo(mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;
                    lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                    lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                    lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                    lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(
                        SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(
                            this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH,
                            other.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1,
                                (String) object2);
                    } else if (object1 instanceof Comparable
                            && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(),
                                object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void loadData(byte[] data) {

                    ByteArrayInputStream bai = null;
                    DataInputStream dis = null;
                    byte[] byteArray = null;
                    try {
                        bai = new ByteArrayInputStream(data);
                        dis = new DataInputStream(bai);

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = null;
                        } else {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = null;
                        } else {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = null;
                        } else {
                            this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = dis
                                    .readInt();
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    } finally {
                        if (dis != null) {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

                public byte[] toData() {
                    ByteArrayOutputStream bao = null;
                    DataOutputStream dos = null;
                    byte[] byteArray = null;
                    try {
                        bao = new ByteArrayOutputStream();
                        dos = new DataOutputStream(bao);

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS);
                        }

                        if (this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);
                        }

                        if (this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } finally {
                        if (dos != null) {
                            try {
                                dos.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    return bao.toByteArray();
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES> fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES>(
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/tMapData_main__lookup_ALL_ROWS__lookup_ALL_MATCHES") {
                public SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES createRowInstance() {
                    return new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES();
                }
            };

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.initPut();

            class SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                    implements
                    Comparable<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH>,
                    routines.system.IPersistableRow<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH;

                // lookup_FIRST_MATCH
                Integer main__ID_MAIN;
                String main__LABEL_MAIN;
                Integer lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                String lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                Integer lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                String lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;
                Integer lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;
                String lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH;

                public void fillFrom(mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES,
                        lookup_FIRST_MATCHStruct lookup_FIRST_MATCH,
                        Integer exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES;
                    this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES;
                    this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH;
                    this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH;
                    this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH;

                }

                public void copyDataTo(mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES,
                        lookup_FIRST_MATCHStruct lookup_FIRST_MATCH) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;
                    lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                    lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                    lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                    lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;
                    lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH = this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;
                    lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH = this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES));

                    sb.append(", ");

                    sb.append("lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH));

                    sb.append(", ");

                    sb.append("lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(
                        SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(
                            this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH,
                            other.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1,
                                (String) object2);
                    } else if (object1 instanceof Comparable
                            && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(),
                                object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void loadData(byte[] data) {

                    ByteArrayInputStream bai = null;
                    DataInputStream dis = null;
                    byte[] byteArray = null;
                    try {
                        bai = new ByteArrayInputStream(data);
                        dis = new DataInputStream(bai);

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = null;
                        } else {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = null;
                        } else {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = null;
                        } else {
                            this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = null;
                        } else {
                            this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = dis
                                    .readInt();
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    } finally {
                        if (dis != null) {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

                public byte[] toData() {
                    ByteArrayOutputStream bao = null;
                    DataOutputStream dos = null;
                    byte[] byteArray = null;
                    try {
                        bao = new ByteArrayOutputStream();
                        dos = new DataOutputStream(bao);

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS);
                        }

                        if (this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);
                        }

                        if (this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH);
                        }

                        if (this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } finally {
                        if (dos != null) {
                            try {
                                dos.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    return bao.toByteArray();
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH> fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH>(
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/tMapData_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH") {
                public SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH createRowInstance() {
                    return new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH();
                }
            };

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                    .initPut();

            class SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                    implements
                    Comparable<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH>,
                    routines.system.IPersistableRow<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH;

                // LOOKUP_LAST_MATCH
                Integer main__ID_MAIN;
                String main__LABEL_MAIN;
                Integer lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                String lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                Integer lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                String lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;
                Integer lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;
                String lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH;
                Integer LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH;
                String LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH;

                public void fillFrom(
                        mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES,
                        lookup_FIRST_MATCHStruct lookup_FIRST_MATCH,
                        LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH,
                        Integer exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                    this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES;
                    this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES;
                    this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH;
                    this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH;
                    this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH;
                    this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.LABEL_LOOKUP_LAST_MATCH;
                    this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH = exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH;

                }

                public void copyDataTo(mainStruct main,
                        lookup_ALL_ROWSStruct lookup_ALL_ROWS,
                        lookup_ALL_MATCHESStruct lookup_ALL_MATCHES,
                        lookup_FIRST_MATCHStruct lookup_FIRST_MATCH,
                        LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;
                    lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS;
                    lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS;
                    lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;
                    lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES;
                    lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH = this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;
                    lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH = this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH;
                    LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH = this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH;
                    LOOKUP_LAST_MATCH.LABEL_LOOKUP_LAST_MATCH = this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb.append(String
                            .valueOf(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES));

                    sb.append(", ");

                    sb.append("lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES));

                    sb.append(", ");

                    sb.append("lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH));

                    sb.append(", ");

                    sb.append("lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH));

                    sb.append(", ");

                    sb.append("LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH));

                    sb.append(", ");

                    sb.append("LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH");
                    sb.append("=");
                    sb
                            .append(String
                                    .valueOf(this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(
                        SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(
                            this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH,
                            other.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1,
                                (String) object2);
                    } else if (object1 instanceof Comparable
                            && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(),
                                object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void loadData(byte[] data) {

                    ByteArrayInputStream bai = null;
                    DataInputStream dis = null;
                    byte[] byteArray = null;
                    try {
                        bai = new ByteArrayInputStream(data);
                        dis = new DataInputStream(bai);

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = null;
                        } else {
                            this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = null;
                        } else {
                            this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = null;
                        } else {
                            this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = null;
                        } else {
                            this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = dis
                                    .readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH = null;
                        } else {
                            byteArray = new byte[length];
                            dis.read(byteArray);
                            this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH = new String(
                                    byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH = null;
                        } else {
                            this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH = dis
                                    .readInt();
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    } finally {
                        if (dis != null) {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

                public byte[] toData() {
                    ByteArrayOutputStream bao = null;
                    DataOutputStream dos = null;
                    byte[] byteArray = null;
                    try {
                        bao = new ByteArrayOutputStream();
                        dos = new DataOutputStream(bao);

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_ROWS__ID_LOOKUP_ALL_ROWS);
                        }

                        if (this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_ROWS__LABEL_LOOKUP_ALL_ROWS
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);
                        }

                        if (this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_ALL_MATCHES__LABEL_LOOKUP_ALL_MATCHES
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH);
                        }

                        if (this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.lookup_FIRST_MATCH__LABEL_LOOKUP_FIRST_MATCH
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH);
                        }

                        if (this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH == null) {
                            dos.writeInt(-1);
                        } else {
                            byteArray = this.LOOKUP_LAST_MATCH__LABEL_LOOKUP_LAST_MATCH
                                    .getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos
                                    .writeInt(this.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } finally {
                        if (dos != null) {
                            try {
                                dos.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    return bao.toByteArray();
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH> fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH>(
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/tMapData_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH") {
                public SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH createRowInstance() {
                    return new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH();
                }
            };

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                    .initPut();

            /**
             * [tMapPersistent_1_TMAP_OUT begin ] stop
             */

            /**
             * [tFileInputDelimited_8 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_8", false);
            start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_8";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/main_"
                            + context.indexMain + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_8.nextRecord()) {
                main = null;
                boolean whetherReject_tFileInputDelimited_8 = false;
                main = new mainStruct();
                try {
                    String temp_tFileInputDelimited_8 = "";
                    temp_tFileInputDelimited_8 = fid_tFileInputDelimited_8.get(
                            0).trim();
                    if (temp_tFileInputDelimited_8.length() > 0) {
                        main.ID_MAIN = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_8);
                    } else {
                        main.ID_MAIN = null;
                    }
                    main.LABEL_MAIN = fid_tFileInputDelimited_8.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_8 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_8 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_8 main ] start
                 */

                currentComponent = "tFileInputDelimited_8";

                /**
                 * [tFileInputDelimited_8 main ] stop
                 */
                // Start of branch "main"
                if (main != null) {

                    /**
                     * [tMapPersistent_1_TMAP_OUT main ] start
                     */

                    currentComponent = "tMapPersistent_1_TMAP_OUT";

                    // ###############################
                    // # Input tables (lookups)
                    boolean rejectedInnerJoin_tMapPersistent_1_TMAP_OUT = false;
                    boolean mainRowRejected_tMapPersistent_1_TMAP_OUT = false;

                    // /////////////////////////////////////////////
                    // Starting Lookup Table "lookup_ALL_ROWS"
                    // /////////////////////////////////////////////

                    boolean forceLooplookup_ALL_ROWS = false;

                    lookup_ALL_ROWSStruct lookup_ALL_ROWSObjectFromLookup = null;

                    if (!rejectedInnerJoin_tMapPersistent_1_TMAP_OUT) { // G 20

                        tHash_Lookup_lookup_ALL_ROWS
                                .lookup(lookup_ALL_ROWSHashKey);

                        if (!tHash_Lookup_lookup_ALL_ROWS.hasNext()) { // G 090

                            forceLooplookup_ALL_ROWS = true;

                        } // G 090

                    } // G 20

                    else { // G 20 - G 21
                        forceLooplookup_ALL_ROWS = true;
                    } // G 21

                    lookup_ALL_ROWSStruct lookup_ALL_ROWS = null;

                    while (tHash_Lookup_lookup_ALL_ROWS.hasNext()
                            || forceLooplookup_ALL_ROWS) { // G_TM_M_043

                        lookup_ALL_ROWSStruct fromLookup_lookup_ALL_ROWS = null;
                        lookup_ALL_ROWS = lookup_ALL_ROWSDefault;

                        if (!forceLooplookup_ALL_ROWS) { // G 46

                            fromLookup_lookup_ALL_ROWS = tHash_Lookup_lookup_ALL_ROWS
                                    .next();

                            if (fromLookup_lookup_ALL_ROWS != null) {
                                lookup_ALL_ROWS = fromLookup_lookup_ALL_ROWS;
                            }

                        } // G 46

                        forceLooplookup_ALL_ROWS = false;

                        Integer exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = 0;

                        if (!rejectedInnerJoin_tMapPersistent_1_TMAP_OUT) { // G_TM_M_255

                            exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES = main.ID_MAIN;

                        } // G_TM_M_255

                        SortableRow_main__lookup_ALL_ROWS rsc_main__lookup_ALL_ROWS = new SortableRow_main__lookup_ALL_ROWS();

                        rsc_main__lookup_ALL_ROWS
                                .fillFrom(main, lookup_ALL_ROWS,
                                        exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES);

                        rsc_main__lookup_ALL_ROWS.is__rejectedInnerJoin = rejectedInnerJoin_tMapPersistent_1_TMAP_OUT;

                        rejectedInnerJoin_tMapPersistent_1_TMAP_OUT = false;

                        // Sort and store in KeyFile(s) and DataFile(s)
                        fsi_main__lookup_ALL_ROWS
                                .put(rsc_main__lookup_ALL_ROWS);

                        if (forceLooplookup_ALL_ROWS) {
                            break;
                        }

                    } // G_TM_M_043 loop lookup_ALL_ROWS

                    // { // Dummy bracket to open block for "main" ##(1)##

                    // ###############################
                    { // start of Var scope

                        // ###############################
                        // # Vars tables
                        // ###############################
                        // ###############################
                        // # Output tables

                        // ###############################

                    } // end of Var scope

                    rejectedInnerJoin_tMapPersistent_1_TMAP_OUT = false;

                    /**
                     * [tMapPersistent_1_TMAP_OUT main ] stop
                     */

                } // End of branch "main"

                /**
                 * [tFileInputDelimited_8 end ] start
                 */

                currentComponent = "tFileInputDelimited_8";

            }
            fid_tFileInputDelimited_8.close();
            globalMap.put("tFileInputDelimited_8_NB_LINE",
                    fid_tFileInputDelimited_8.getRowNumber());

            ok_Hash.put("tFileInputDelimited_8", true);
            end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_8 end ] stop
             */
            /**
             * [tMapPersistent_1_TMAP_OUT end ] start
             */

            currentComponent = "tMapPersistent_1_TMAP_OUT";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMapPersistent_1_TMAP_OUT", true);
            end_Hash.put("tMapPersistent_1_TMAP_OUT", System
                    .currentTimeMillis());

            /**
             * [tMapPersistent_1_TMAP_OUT end ] stop
             */

            /**
             * [tFileOutputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_2", false);
            start_Hash
                    .put("tFileOutputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_2";

            String fileName_tFileOutputDelimited_2 = (new java.io.File(
                    context.data_output_dir + context.current_job_dir
                            + "out_main_" + context.indexMain + "__lookup_"
                            + context.indexLookup + ".csv")).getAbsolutePath()
                    .replace("\\", "/");
            String fullName_tFileOutputDelimited_2 = null;
            String extension_tFileOutputDelimited_2 = null;
            String directory_tFileOutputDelimited_2 = null;
            if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
                        .lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                        .substring(0, fileName_tFileOutputDelimited_2
                                .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                }
                directory_tFileOutputDelimited_2 = "";
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /**
                                                             * Start field
                                                             * tFileOutputDelimited_2:FIELDSEPARATOR
                                                             */
            ";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                                                                     * Start
                                                                     * field
                                                                     * tFileOutputDelimited_2:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_2 != null
                    && directory_tFileOutputDelimited_2.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
                        directory_tFileOutputDelimited_2);
                if (!dir_tFileOutputDelimited_2.exists()) {
                    dir_tFileOutputDelimited_2.mkdirs();
                }
            }

            java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
                    new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(
                                    fileName_tFileOutputDelimited_2, false),
                            "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_2 = new java.io.File(
                    fileName_tFileOutputDelimited_2);

            if (filetFileOutputDelimited_2.length() == 0) {

                outtFileOutputDelimited_2.write("ID_MAIN");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_MAIN");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ID_LOOKUP_ALL_ROWS");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_LOOKUP_ALL_ROWS");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ID_LOOKUP_ALL_MATCHES");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_LOOKUP_ALL_MATCHES");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ID_LOOKUP_FIRST_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_LOOKUP_FIRST_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ID_LOOKUP_LAST_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_LOOKUP_LAST_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("ID_LOOKUP_UNIQUE_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("LABEL_LOOKUP_UNIQUE_MATCH");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
            }

            /**
             * [tFileOutputDelimited_2 begin ] stop
             */

            /**
             * [tMapPersistent_1_TMAP_IN begin ] start
             */

            ok_Hash.put("tMapPersistent_1_TMAP_IN", false);
            start_Hash.put("tMapPersistent_1_TMAP_IN", System
                    .currentTimeMillis());
            currentComponent = "tMapPersistent_1_TMAP_IN";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            outStruct out_tmp = new outStruct();
            // ###############################

            /**
             * [tMapPersistent_1_TMAP_IN begin ] stop
             */
            /**
             * [tMapPersistent_1_TMAP_IN main ] start
             */

            currentComponent = "tMapPersistent_1_TMAP_IN";

            // ###############################
            // # Input tables (lookups)
            boolean rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;
            boolean mainRowRejected_tMapPersistent_1_TMAP_IN = false;

            // /////////////////////////////////////////////
            // Starting Lookup Table "lookup_ALL_ROWS"
            // /////////////////////////////////////////////

            fsi_main__lookup_ALL_ROWS.endPut();

            // /////////////////////////////////////////////
            // Starting Lookup Table "lookup_ALL_MATCHES"
            // /////////////////////////////////////////////

            SortableRow_main__lookup_ALL_ROWS rsc_main__lookup_ALL_ROWS;

            tHash_Lookup_lookup_ALL_MATCHES.initGet();

            fsi_main__lookup_ALL_ROWS.initGet();

            lookup_ALL_ROWSStruct lookup_ALL_ROWS = new lookup_ALL_ROWSStruct();

            // TEST firstLookupIsPersistentSorted=false
            // isFirstPersistentSortedTable=true

            rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

            while (fsi_main__lookup_ALL_ROWS.hasNext()) { // G_TM_M_250 loop
                                                            // "main__lookup_ALL_ROWS"

                rsc_main__lookup_ALL_ROWS = (SortableRow_main__lookup_ALL_ROWS) fsi_main__lookup_ALL_ROWS
                        .next();
                rsc_main__lookup_ALL_ROWS.copyDataTo(main, lookup_ALL_ROWS);

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = rsc_main__lookup_ALL_ROWS.is__rejectedInnerJoin;

                boolean forceLooplookup_ALL_MATCHES = false;

                lookup_ALL_MATCHESStruct lookup_ALL_MATCHESObjectFromLookup = null;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G 20

                    lookup_ALL_MATCHESHashKey.ID_LOOKUP_ALL_MATCHES = rsc_main__lookup_ALL_ROWS.exprKey_lookup_ALL_MATCHES__ID_LOOKUP_ALL_MATCHES;

                    tHash_Lookup_lookup_ALL_MATCHES
                            .lookup(lookup_ALL_MATCHESHashKey);

                    if (!tHash_Lookup_lookup_ALL_MATCHES.hasNext()) { // G 090

                    } // G 090

                } // G 20

                lookup_ALL_MATCHESStruct lookup_ALL_MATCHES = null;

                lookup_ALL_MATCHESStruct fromLookup_lookup_ALL_MATCHES = null;
                lookup_ALL_MATCHES = lookup_ALL_MATCHESDefault;

                if (tHash_Lookup_lookup_ALL_MATCHES.hasNext()) { // G 099

                    fromLookup_lookup_ALL_MATCHES = tHash_Lookup_lookup_ALL_MATCHES
                            .next();

                } // G 099

                if (fromLookup_lookup_ALL_MATCHES != null) {
                    lookup_ALL_MATCHES = fromLookup_lookup_ALL_MATCHES;
                }

                Integer exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = 0;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G_TM_M_255

                    exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH = main.ID_MAIN;

                } // G_TM_M_255

                SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES = new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES();

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.fillFrom(main,
                        lookup_ALL_ROWS, lookup_ALL_MATCHES,
                        exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH);

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.is__rejectedInnerJoin = rejectedInnerJoin_tMapPersistent_1_TMAP_IN;

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

                // Sort and store in KeyFile(s) and DataFile(s)
                fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES
                        .put(rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES);

            } // G_TM_M_250 loop "main__lookup_ALL_ROWS"

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.endPut();

            // /////////////////////////////////////////////
            // Starting Lookup Table "lookup_FIRST_MATCH"
            // /////////////////////////////////////////////

            SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES;

            tHash_Lookup_lookup_FIRST_MATCH.initGet();

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.initGet();

            lookup_ALL_MATCHESStruct lookup_ALL_MATCHES = new lookup_ALL_MATCHESStruct();

            // TEST firstLookupIsPersistentSorted=false
            // isFirstPersistentSortedTable=false

            rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

            while (fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.hasNext()) { // G_TM_M_250
                                                                                // loop
                                                                                // "main__lookup_ALL_ROWS__lookup_ALL_MATCHES"

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES = (SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES) fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES
                        .next();
                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.copyDataTo(main,
                        lookup_ALL_ROWS, lookup_ALL_MATCHES);

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.is__rejectedInnerJoin;

                boolean forceLooplookup_FIRST_MATCH = false;

                lookup_FIRST_MATCHStruct lookup_FIRST_MATCHObjectFromLookup = null;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G 20

                    lookup_FIRST_MATCHHashKey.ID_LOOKUP_FIRST_MATCH = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES.exprKey_lookup_FIRST_MATCH__ID_LOOKUP_FIRST_MATCH;

                    tHash_Lookup_lookup_FIRST_MATCH
                            .lookup(lookup_FIRST_MATCHHashKey);

                    if (!tHash_Lookup_lookup_FIRST_MATCH.hasNext()) { // G 090

                    } // G 090

                } // G 20

                lookup_FIRST_MATCHStruct lookup_FIRST_MATCH = null;

                lookup_FIRST_MATCHStruct fromLookup_lookup_FIRST_MATCH = null;
                lookup_FIRST_MATCH = lookup_FIRST_MATCHDefault;

                if (tHash_Lookup_lookup_FIRST_MATCH.hasNext()) { // G 099

                    fromLookup_lookup_FIRST_MATCH = tHash_Lookup_lookup_FIRST_MATCH
                            .next();

                } // G 099

                if (fromLookup_lookup_FIRST_MATCH != null) {
                    lookup_FIRST_MATCH = fromLookup_lookup_FIRST_MATCH;
                }

                Integer exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = 0;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G_TM_M_255

                    exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH = main.ID_MAIN;

                } // G_TM_M_255

                SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH = new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH();

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                        .fillFrom(main, lookup_ALL_ROWS, lookup_ALL_MATCHES,
                                lookup_FIRST_MATCH,
                                exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH);

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH.is__rejectedInnerJoin = rejectedInnerJoin_tMapPersistent_1_TMAP_IN;

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

                // Sort and store in KeyFile(s) and DataFile(s)
                fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                        .put(rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH);

            } // G_TM_M_250 loop "main__lookup_ALL_ROWS__lookup_ALL_MATCHES"

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                    .endPut();

            // /////////////////////////////////////////////
            // Starting Lookup Table "LOOKUP_LAST_MATCH"
            // /////////////////////////////////////////////

            SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH;

            tHash_Lookup_LOOKUP_LAST_MATCH.initGet();

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                    .initGet();

            lookup_FIRST_MATCHStruct lookup_FIRST_MATCH = new lookup_FIRST_MATCHStruct();

            // TEST firstLookupIsPersistentSorted=false
            // isFirstPersistentSortedTable=false

            rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

            while (fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                    .hasNext()) { // G_TM_M_250 loop
                                    // "main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH"

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH = (SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH) fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                        .next();
                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH
                        .copyDataTo(main, lookup_ALL_ROWS, lookup_ALL_MATCHES,
                                lookup_FIRST_MATCH);

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH.is__rejectedInnerJoin;

                boolean forceLoopLOOKUP_LAST_MATCH = false;

                LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCHObjectFromLookup = null;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G 20

                    LOOKUP_LAST_MATCHHashKey.ID_LOOKUP_LAST_MATCH = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH.exprKey_LOOKUP_LAST_MATCH__ID_LOOKUP_LAST_MATCH;

                    tHash_Lookup_LOOKUP_LAST_MATCH
                            .lookup(LOOKUP_LAST_MATCHHashKey);

                    if (!tHash_Lookup_LOOKUP_LAST_MATCH.hasNext()) { // G 090

                    } // G 090

                } // G 20

                LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH = null;

                LOOKUP_LAST_MATCHStruct fromLookup_LOOKUP_LAST_MATCH = null;
                LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCHDefault;

                if (tHash_Lookup_LOOKUP_LAST_MATCH.hasNext()) { // G 099

                    fromLookup_LOOKUP_LAST_MATCH = tHash_Lookup_LOOKUP_LAST_MATCH
                            .next();

                } // G 099

                if (fromLookup_LOOKUP_LAST_MATCH != null) {
                    LOOKUP_LAST_MATCH = fromLookup_LOOKUP_LAST_MATCH;
                }

                Integer exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH = 0;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G_TM_M_255

                    exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH = main.ID_MAIN;

                } // G_TM_M_255

                SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH = new SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH();

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                        .fillFrom(main, lookup_ALL_ROWS, lookup_ALL_MATCHES,
                                lookup_FIRST_MATCH, LOOKUP_LAST_MATCH,
                                exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH);

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH.is__rejectedInnerJoin = rejectedInnerJoin_tMapPersistent_1_TMAP_IN;

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

                // Sort and store in KeyFile(s) and DataFile(s)
                fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                        .put(rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH);

            } // G_TM_M_250 loop
                // "main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH"

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                    .endPut();

            // /////////////////////////////////////////////
            // Starting Lookup Table "lookup_UNIQUE_MACTH"
            // /////////////////////////////////////////////

            SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH;

            tHash_Lookup_lookup_UNIQUE_MACTH.initGet();

            fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                    .initGet();

            LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH = new LOOKUP_LAST_MATCHStruct();

            // TEST firstLookupIsPersistentSorted=false
            // isFirstPersistentSortedTable=false

            rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

            while (fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                    .hasNext()) { // G_TM_M_250 loop
                                    // "main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH"

                // CALL close loop of lookup
                // 'main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH'

                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH = (SortableRow_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH) fsi_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                        .next();
                rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH
                        .copyDataTo(main, lookup_ALL_ROWS, lookup_ALL_MATCHES,
                                lookup_FIRST_MATCH, LOOKUP_LAST_MATCH);

                rejectedInnerJoin_tMapPersistent_1_TMAP_IN = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH.is__rejectedInnerJoin;

                boolean forceLooplookup_UNIQUE_MACTH = false;

                lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTHObjectFromLookup = null;

                if (!rejectedInnerJoin_tMapPersistent_1_TMAP_IN) { // G 20

                    lookup_UNIQUE_MACTHHashKey.ID_LOOKUP_UNIQUE_MATCH = rsc_main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH.exprKey_lookup_UNIQUE_MACTH__ID_LOOKUP_UNIQUE_MATCH;

                    tHash_Lookup_lookup_UNIQUE_MACTH
                            .lookup(lookup_UNIQUE_MACTHHashKey);

                    if (!tHash_Lookup_lookup_UNIQUE_MACTH.hasNext()) { // G 090

                        forceLooplookup_UNIQUE_MACTH = true;

                    } // G 090

                } // G 20

                else { // G 20 - G 21
                    forceLooplookup_UNIQUE_MACTH = true;
                } // G 21

                lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTH = null;

                while (tHash_Lookup_lookup_UNIQUE_MACTH.hasNext()
                        || forceLooplookup_UNIQUE_MACTH) { // G_TM_M_043

                    // CALL close loop of lookup 'lookup_UNIQUE_MACTH'

                    lookup_UNIQUE_MACTHStruct fromLookup_lookup_UNIQUE_MACTH = null;
                    lookup_UNIQUE_MACTH = lookup_UNIQUE_MACTHDefault;

                    if (!forceLooplookup_UNIQUE_MACTH) { // G 46

                        fromLookup_lookup_UNIQUE_MACTH = tHash_Lookup_lookup_UNIQUE_MACTH
                                .next();

                        if (fromLookup_lookup_UNIQUE_MACTH != null) {
                            lookup_UNIQUE_MACTH = fromLookup_lookup_UNIQUE_MACTH;
                        }

                    } // G 46

                    forceLooplookup_UNIQUE_MACTH = false;

                    // { // Dummy bracket to open block for "main" ##(1)##

                    // ###############################
                    { // start of Var scope

                        // ###############################
                        // # Vars tables
                        // ###############################
                        // ###############################
                        // # Output tables

                        out = null;

                        // # Output table : 'out'
                        out_tmp.ID_MAIN = main.ID_MAIN;
                        out_tmp.LABEL_MAIN = main.LABEL_MAIN;
                        out_tmp.ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                        out_tmp.LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                        out_tmp.ID_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES;
                        out_tmp.LABEL_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES;
                        out_tmp.ID_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH;
                        out_tmp.LABEL_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH;
                        out_tmp.ID_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH;
                        out_tmp.LABEL_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.LABEL_LOOKUP_LAST_MATCH;
                        out_tmp.ID_LOOKUP_UNIQUE_MATCH = lookup_UNIQUE_MACTH.ID_LOOKUP_UNIQUE_MATCH;
                        out_tmp.LABEL_LOOKUP_UNIQUE_MATCH = lookup_UNIQUE_MACTH.LABEL_LOOKUP_UNIQUE_MATCH;
                        out = out_tmp;
                        // ###############################

                    } // end of Var scope

                    rejectedInnerJoin_tMapPersistent_1_TMAP_IN = false;

                    /**
                     * [tMapPersistent_1_TMAP_IN main ] stop
                     */
                    // Start of branch "out"
                    if (out != null) {

                        /**
                         * [tFileOutputDelimited_2 main ] start
                         */

                        currentComponent = "tFileOutputDelimited_2";

                        StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

                        if (out.ID_MAIN != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_MAIN

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_MAIN != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_MAIN

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.ID_LOOKUP_ALL_ROWS != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_LOOKUP_ALL_ROWS

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_LOOKUP_ALL_ROWS != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_LOOKUP_ALL_ROWS

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.ID_LOOKUP_ALL_MATCHES != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_LOOKUP_ALL_MATCHES

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_LOOKUP_ALL_MATCHES != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_LOOKUP_ALL_MATCHES

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.ID_LOOKUP_FIRST_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_LOOKUP_FIRST_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_LOOKUP_FIRST_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_LOOKUP_FIRST_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.ID_LOOKUP_LAST_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_LOOKUP_LAST_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_LOOKUP_LAST_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_LOOKUP_LAST_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.ID_LOOKUP_UNIQUE_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.ID_LOOKUP_UNIQUE_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out.LABEL_LOOKUP_UNIQUE_MATCH != null) {

                            sb_tFileOutputDelimited_2.append(

                            out.LABEL_LOOKUP_UNIQUE_MATCH

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2
                                .write(sb_tFileOutputDelimited_2.toString());

                        nb_line_tFileOutputDelimited_2++;

                        /**
                         * [tFileOutputDelimited_2 main ] stop
                         */

                    } // End of branch "out"

                } // close loop of lookup 'lookup_UNIQUE_MACTH' // G_TM_M_043
            } // G_TM_M_250 close loop read file data
                // 'main__lookup_ALL_ROWS__lookup_ALL_MATCHES__lookup_FIRST_MATCH__LOOKUP_LAST_MATCH'
            /**
             * [tMapPersistent_1_TMAP_IN end ] start
             */

            currentComponent = "tMapPersistent_1_TMAP_IN";

            // ###############################
            // # Lookup hashes releasing
            fsi_main.endGet();

            tHash_Lookup_lookup_ALL_ROWS.endGet();

            globalMap.remove("tHash_Lookup_lookup_ALL_ROWS");

            tHash_Lookup_lookup_ALL_MATCHES.endGet();

            globalMap.remove("tHash_Lookup_lookup_ALL_MATCHES");

            tHash_Lookup_lookup_FIRST_MATCH.endGet();

            globalMap.remove("tHash_Lookup_lookup_FIRST_MATCH");

            tHash_Lookup_LOOKUP_LAST_MATCH.endGet();

            globalMap.remove("tHash_Lookup_LOOKUP_LAST_MATCH");

            tHash_Lookup_lookup_UNIQUE_MACTH.endGet();

            globalMap.remove("tHash_Lookup_lookup_UNIQUE_MACTH");

            // ###############################

            ok_Hash.put("tMapPersistent_1_TMAP_IN", true);
            end_Hash
                    .put("tMapPersistent_1_TMAP_IN", System.currentTimeMillis());

            /**
             * [tMapPersistent_1_TMAP_IN end ] stop
             */
            /**
             * [tFileOutputDelimited_2 end ] start
             */

            currentComponent = "tFileOutputDelimited_2";

            outtFileOutputDelimited_2.close();
            globalMap.put("tFileOutputDelimited_2_NB_LINE",
                    nb_line_tFileOutputDelimited_2);

            ok_Hash.put("tFileOutputDelimited_2", true);
            end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_2 end ] stop
             */

            tFileCompare_1Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public void tFileCompare_1Process() throws TalendException {
        try {

            /**
             * [tFileCompare_1 begin ] start
             */

            ok_Hash.put("tFileCompare_1", false);
            start_Hash.put("tFileCompare_1", System.currentTimeMillis());
            currentComponent = "tFileCompare_1";

            /**
             * [tFileCompare_1 begin ] stop
             */
            /**
             * [tFileCompare_1 main ] start
             */

            currentComponent = "tFileCompare_1";

            boolean result_tFileCompare_1 = true;

            if (result_tFileCompare_1) {

                java.io.BufferedReader file_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader(context.data_output_dir
                                + context.current_job_dir + "out_main_"
                                + context.indexMain + "__lookup_"
                                + context.indexLookup + ".csv"));
                java.io.BufferedReader fileRef_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader((String) context
                                .getProperty("data_dir")
                                + context.current_job_dir
                                + "ref/out_main_"
                                + context.indexMain
                                + "__lookup_"
                                + context.indexLookup + ".csv"));
                String content_tFileCompare_1 = null, contentRef_tFileCompare_1 = null;
                while ((content_tFileCompare_1 = file_tFileCompare_1.readLine()) != null
                        && (contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                                .readLine()) != null) {
                    if (content_tFileCompare_1
                            .compareTo(contentRef_tFileCompare_1) != 0) {
                        result_tFileCompare_1 = false;
                        break;
                    }
                }

                // Check if files has a different number of lines:
                if (content_tFileCompare_1 == null) {
                    // This step is done in case of the while upper ignore
                    // second part:
                    contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                            .readLine();
                }
                if (content_tFileCompare_1 != null
                        || contentRef_tFileCompare_1 != null) {
                    result_tFileCompare_1 = false;
                }

                file_tFileCompare_1.close();
                fileRef_tFileCompare_1.close();

            }

            String messagetFileCompare_1 = "";
            if (result_tFileCompare_1) {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent
                        + "] 'main_" + context.indexMain + ".csv' and 'lookup_"
                        + context.indexLookup + ".csv', OK";

            } else {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent
                        + "] Files differ: check files 'main_"
                        + context.indexMain + ".csv' and 'lookup_"
                        + context.indexLookup + ".csv', DIFFERENT";
            }
            globalMap.put("tFileCompare_1_DIFFERENCE", result_tFileCompare_1);

            System.out.println(messagetFileCompare_1);

            /**
             * [tFileCompare_1 main ] stop
             */
            /**
             * [tFileCompare_1 end ] start
             */

            currentComponent = "tFileCompare_1";

            ok_Hash.put("tFileCompare_1", true);
            end_Hash.put("tFileCompare_1", System.currentTimeMillis());

            /**
             * [tFileCompare_1 end ] stop
             */
            tJavaFlex_4Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class row4Struct implements
            routines.system.IPersistableRow<row4Struct> {

        Boolean testOk;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.testOk = null;
                } else {
                    this.testOk = dis.readBoolean();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.testOk == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.testOk);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("testOk");
            sb.append("=");
            sb.append(String.valueOf(this.testOk));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row4Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tJavaFlex_4Process() throws TalendException {
        try {

            row4Struct row4 = new row4Struct();
            /**
             * [tJavaFlex_4 begin ] start
             */

            ok_Hash.put("tJavaFlex_4", false);
            start_Hash.put("tJavaFlex_4", System.currentTimeMillis());
            currentComponent = "tJavaFlex_4";

            // start part of your Java code

            /**
             * [tJavaFlex_4 begin ] stop
             */
            /**
             * [tJavaFlex_4 main ] start
             */

            currentComponent = "tJavaFlex_4";

            // here is the main part of the component,
            // a piece of code executed in the row
            // loop

            /**
             * [tJavaFlex_4 main ] stop
             */

            /**
             * [tBufferOutput_1 begin ] start
             */

            ok_Hash.put("tBufferOutput_1", false);
            start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
            currentComponent = "tBufferOutput_1";

            /**
             * [tBufferOutput_1 begin ] stop
             */

            /**
             * [tFixedFlowInput_1 begin ] start
             */

            ok_Hash.put("tFixedFlowInput_1", false);
            start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
            currentComponent = "tFixedFlowInput_1";

            globalMap.put("NB_LINE", 1);
            for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

                row4.testOk = ((Boolean) globalMap
                        .get("tFileCompare_1_DIFFERENCE"));

                /**
                 * [tFixedFlowInput_1 begin ] stop
                 */
                /**
                 * [tFixedFlowInput_1 main ] start
                 */

                currentComponent = "tFixedFlowInput_1";

                /**
                 * [tFixedFlowInput_1 main ] stop
                 */
                /**
                 * [tBufferOutput_1 main ] start
                 */

                currentComponent = "tBufferOutput_1";

                String[] row_tBufferOutput_1 = new String[] { "", };
                if (row4.testOk != null) {

                    row_tBufferOutput_1[0] = String.valueOf(row4.testOk);

                }
                globalBuffer.add(row_tBufferOutput_1);

                /**
                 * [tBufferOutput_1 main ] stop
                 */

                /**
                 * [tFixedFlowInput_1 end ] start
                 */

                currentComponent = "tFixedFlowInput_1";

            }

            ok_Hash.put("tFixedFlowInput_1", true);
            end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

            /**
             * [tFixedFlowInput_1 end ] stop
             */
            /**
             * [tBufferOutput_1 end ] start
             */

            currentComponent = "tBufferOutput_1";

            ok_Hash.put("tBufferOutput_1", true);
            end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

            /**
             * [tBufferOutput_1 end ] stop
             */

            /**
             * [tJavaFlex_4 end ] start
             */

            currentComponent = "tJavaFlex_4";

            // end of the component, outside/closing the loop

            ok_Hash.put("tJavaFlex_4", true);
            end_Hash.put("tJavaFlex_4", System.currentTimeMillis());

            /**
             * [tJavaFlex_4 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class lookup_ALL_MATCHESStruct
            implements
            routines.system.IPersistableComparableLookupRow<lookup_ALL_MATCHESStruct> {
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP_ALL_MATCHES;

        String LABEL_LOOKUP_ALL_MATCHES;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.ID_LOOKUP_ALL_MATCHES == null) ? 0
                                : this.ID_LOOKUP_ALL_MATCHES.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookup_ALL_MATCHESStruct other = (lookup_ALL_MATCHESStruct) obj;

            if (this.ID_LOOKUP_ALL_MATCHES == null) {
                if (other.ID_LOOKUP_ALL_MATCHES != null)
                    return false;
            } else if (!this.ID_LOOKUP_ALL_MATCHES
                    .equals(other.ID_LOOKUP_ALL_MATCHES))
                return false;

            return true;
        }

        public void copyDataTo(lookup_ALL_MATCHESStruct other) {

            other.ID_LOOKUP_ALL_MATCHES = this.ID_LOOKUP_ALL_MATCHES;
            other.LABEL_LOOKUP_ALL_MATCHES = this.LABEL_LOOKUP_ALL_MATCHES;

        }

        public void copyKeysDataTo(lookup_ALL_MATCHESStruct other) {

            other.ID_LOOKUP_ALL_MATCHES = this.ID_LOOKUP_ALL_MATCHES;

        }

        public void loadKeysData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_ALL_MATCHES = null;
                } else {
                    this.ID_LOOKUP_ALL_MATCHES = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toKeysData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_LOOKUP_ALL_MATCHES == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_ALL_MATCHES);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        /**
         * Fill Values data from the given byte array.
         */
        public void loadValuesData(byte[] data) {
            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_ALL_MATCHES = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_ALL_MATCHES = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * Return a byte array which represents Values data.
         */
        public byte[] toValuesData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.LABEL_LOOKUP_ALL_MATCHES == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_ALL_MATCHES.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP_ALL_MATCHES");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_ALL_MATCHES));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_ALL_MATCHES");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_ALL_MATCHES));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup_ALL_MATCHESStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP_ALL_MATCHES,
                    other.ID_LOOKUP_ALL_MATCHES);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_4Process() throws TalendException {
        try {

            lookup_ALL_MATCHESStruct lookup_ALL_MATCHES = new lookup_ALL_MATCHESStruct();

            /**
             * [tAdvancedHashPersistent_lookup_ALL_MATCHES begin ] start
             */

            ok_Hash.put("tAdvancedHashPersistent_lookup_ALL_MATCHES", false);
            start_Hash.put("tAdvancedHashPersistent_lookup_ALL_MATCHES", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHashPersistent_lookup_ALL_MATCHES";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup_ALL_MATCHES = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.FIRST_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_ALL_MATCHESStruct> tHash_Lookup_lookup_ALL_MATCHES = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_ALL_MATCHESStruct>(
                    matchingModeEnum_lookup_ALL_MATCHES,
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/Lookup_lookup_ALL_MATCHES_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public lookup_ALL_MATCHESStruct createRowInstance() {
                            return new lookup_ALL_MATCHESStruct();
                        }
                    });

            tHash_Lookup_lookup_ALL_MATCHES.initPut();

            globalMap.put("tHash_Lookup_lookup_ALL_MATCHES",
                    tHash_Lookup_lookup_ALL_MATCHES);

            /**
             * [tAdvancedHashPersistent_lookup_ALL_MATCHES begin ] stop
             */

            /**
             * [tFileInputDelimited_4 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_4", false);
            start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_4";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/lookup_"
                            + context.indexLookup + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_4.nextRecord()) {
                lookup_ALL_MATCHES = null;
                lookup_ALL_MATCHES = null;
                boolean whetherReject_tFileInputDelimited_4 = false;
                lookup_ALL_MATCHES = new lookup_ALL_MATCHESStruct();
                try {
                    String temp_tFileInputDelimited_4 = "";
                    temp_tFileInputDelimited_4 = fid_tFileInputDelimited_4.get(
                            0).trim();
                    if (temp_tFileInputDelimited_4.length() > 0) {
                        lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_4);
                    } else {
                        lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES = null;
                    }
                    lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES = fid_tFileInputDelimited_4
                            .get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_4 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_4 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_4 main ] start
                 */

                currentComponent = "tFileInputDelimited_4";

                /**
                 * [tFileInputDelimited_4 main ] stop
                 */
                // Start of branch "lookup_ALL_MATCHES"
                if (lookup_ALL_MATCHES != null) {

                    /**
                     * [tAdvancedHashPersistent_lookup_ALL_MATCHES main ] start
                     */

                    currentComponent = "tAdvancedHashPersistent_lookup_ALL_MATCHES";

                    lookup_ALL_MATCHESStruct lookup_ALL_MATCHES_HashRow = tHash_Lookup_lookup_ALL_MATCHES
                            .getNextFreeRow();

                    lookup_ALL_MATCHES_HashRow.ID_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.ID_LOOKUP_ALL_MATCHES;
                    lookup_ALL_MATCHES_HashRow.LABEL_LOOKUP_ALL_MATCHES = lookup_ALL_MATCHES.LABEL_LOOKUP_ALL_MATCHES;
                    tHash_Lookup_lookup_ALL_MATCHES
                            .put(lookup_ALL_MATCHES_HashRow);

                    /**
                     * [tAdvancedHashPersistent_lookup_ALL_MATCHES main ] stop
                     */

                } // End of branch "lookup_ALL_MATCHES"

                /**
                 * [tFileInputDelimited_4 end ] start
                 */

                currentComponent = "tFileInputDelimited_4";

            }
            fid_tFileInputDelimited_4.close();
            globalMap.put("tFileInputDelimited_4_NB_LINE",
                    fid_tFileInputDelimited_4.getRowNumber());

            ok_Hash.put("tFileInputDelimited_4", true);
            end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_4 end ] stop
             */
            /**
             * [tAdvancedHashPersistent_lookup_ALL_MATCHES end ] start
             */

            currentComponent = "tAdvancedHashPersistent_lookup_ALL_MATCHES";

            tHash_Lookup_lookup_ALL_MATCHES.endPut();

            ok_Hash.put("tAdvancedHashPersistent_lookup_ALL_MATCHES", true);
            end_Hash.put("tAdvancedHashPersistent_lookup_ALL_MATCHES", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHashPersistent_lookup_ALL_MATCHES end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class lookup_FIRST_MATCHStruct
            implements
            routines.system.IPersistableComparableLookupRow<lookup_FIRST_MATCHStruct> {
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP_FIRST_MATCH;

        String LABEL_LOOKUP_FIRST_MATCH;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.ID_LOOKUP_FIRST_MATCH == null) ? 0
                                : this.ID_LOOKUP_FIRST_MATCH.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookup_FIRST_MATCHStruct other = (lookup_FIRST_MATCHStruct) obj;

            if (this.ID_LOOKUP_FIRST_MATCH == null) {
                if (other.ID_LOOKUP_FIRST_MATCH != null)
                    return false;
            } else if (!this.ID_LOOKUP_FIRST_MATCH
                    .equals(other.ID_LOOKUP_FIRST_MATCH))
                return false;

            return true;
        }

        public void copyDataTo(lookup_FIRST_MATCHStruct other) {

            other.ID_LOOKUP_FIRST_MATCH = this.ID_LOOKUP_FIRST_MATCH;
            other.LABEL_LOOKUP_FIRST_MATCH = this.LABEL_LOOKUP_FIRST_MATCH;

        }

        public void copyKeysDataTo(lookup_FIRST_MATCHStruct other) {

            other.ID_LOOKUP_FIRST_MATCH = this.ID_LOOKUP_FIRST_MATCH;

        }

        public void loadKeysData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_FIRST_MATCH = null;
                } else {
                    this.ID_LOOKUP_FIRST_MATCH = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toKeysData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_LOOKUP_FIRST_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_FIRST_MATCH);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        /**
         * Fill Values data from the given byte array.
         */
        public void loadValuesData(byte[] data) {
            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_FIRST_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_FIRST_MATCH = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * Return a byte array which represents Values data.
         */
        public byte[] toValuesData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.LABEL_LOOKUP_FIRST_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_FIRST_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP_FIRST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_FIRST_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_FIRST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_FIRST_MATCH));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup_FIRST_MATCHStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP_FIRST_MATCH,
                    other.ID_LOOKUP_FIRST_MATCH);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_5Process() throws TalendException {
        try {

            lookup_FIRST_MATCHStruct lookup_FIRST_MATCH = new lookup_FIRST_MATCHStruct();

            /**
             * [tAdvancedHashPersistent_lookup_FIRST_MATCH begin ] start
             */

            ok_Hash.put("tAdvancedHashPersistent_lookup_FIRST_MATCH", false);
            start_Hash.put("tAdvancedHashPersistent_lookup_FIRST_MATCH", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHashPersistent_lookup_FIRST_MATCH";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup_FIRST_MATCH = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.LAST_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_FIRST_MATCHStruct> tHash_Lookup_lookup_FIRST_MATCH = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_FIRST_MATCHStruct>(
                    matchingModeEnum_lookup_FIRST_MATCH,
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/Lookup_lookup_FIRST_MATCH_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public lookup_FIRST_MATCHStruct createRowInstance() {
                            return new lookup_FIRST_MATCHStruct();
                        }
                    });

            tHash_Lookup_lookup_FIRST_MATCH.initPut();

            globalMap.put("tHash_Lookup_lookup_FIRST_MATCH",
                    tHash_Lookup_lookup_FIRST_MATCH);

            /**
             * [tAdvancedHashPersistent_lookup_FIRST_MATCH begin ] stop
             */

            /**
             * [tFileInputDelimited_5 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_5", false);
            start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_5";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/lookup_"
                            + context.indexLookup + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_5.nextRecord()) {
                lookup_FIRST_MATCH = null;
                lookup_FIRST_MATCH = null;
                boolean whetherReject_tFileInputDelimited_5 = false;
                lookup_FIRST_MATCH = new lookup_FIRST_MATCHStruct();
                try {
                    String temp_tFileInputDelimited_5 = "";
                    temp_tFileInputDelimited_5 = fid_tFileInputDelimited_5.get(
                            0).trim();
                    if (temp_tFileInputDelimited_5.length() > 0) {
                        lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_5);
                    } else {
                        lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH = null;
                    }
                    lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH = fid_tFileInputDelimited_5
                            .get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_5 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_5 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_5 main ] start
                 */

                currentComponent = "tFileInputDelimited_5";

                /**
                 * [tFileInputDelimited_5 main ] stop
                 */
                // Start of branch "lookup_FIRST_MATCH"
                if (lookup_FIRST_MATCH != null) {

                    /**
                     * [tAdvancedHashPersistent_lookup_FIRST_MATCH main ] start
                     */

                    currentComponent = "tAdvancedHashPersistent_lookup_FIRST_MATCH";

                    lookup_FIRST_MATCHStruct lookup_FIRST_MATCH_HashRow = tHash_Lookup_lookup_FIRST_MATCH
                            .getNextFreeRow();

                    lookup_FIRST_MATCH_HashRow.ID_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.ID_LOOKUP_FIRST_MATCH;
                    lookup_FIRST_MATCH_HashRow.LABEL_LOOKUP_FIRST_MATCH = lookup_FIRST_MATCH.LABEL_LOOKUP_FIRST_MATCH;
                    tHash_Lookup_lookup_FIRST_MATCH
                            .put(lookup_FIRST_MATCH_HashRow);

                    /**
                     * [tAdvancedHashPersistent_lookup_FIRST_MATCH main ] stop
                     */

                } // End of branch "lookup_FIRST_MATCH"

                /**
                 * [tFileInputDelimited_5 end ] start
                 */

                currentComponent = "tFileInputDelimited_5";

            }
            fid_tFileInputDelimited_5.close();
            globalMap.put("tFileInputDelimited_5_NB_LINE",
                    fid_tFileInputDelimited_5.getRowNumber());

            ok_Hash.put("tFileInputDelimited_5", true);
            end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_5 end ] stop
             */
            /**
             * [tAdvancedHashPersistent_lookup_FIRST_MATCH end ] start
             */

            currentComponent = "tAdvancedHashPersistent_lookup_FIRST_MATCH";

            tHash_Lookup_lookup_FIRST_MATCH.endPut();

            ok_Hash.put("tAdvancedHashPersistent_lookup_FIRST_MATCH", true);
            end_Hash.put("tAdvancedHashPersistent_lookup_FIRST_MATCH", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHashPersistent_lookup_FIRST_MATCH end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class LOOKUP_LAST_MATCHStruct
            implements
            routines.system.IPersistableComparableLookupRow<LOOKUP_LAST_MATCHStruct> {
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP_LAST_MATCH;

        String LABEL_LOOKUP_LAST_MATCH;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.ID_LOOKUP_LAST_MATCH == null) ? 0
                                : this.ID_LOOKUP_LAST_MATCH.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final LOOKUP_LAST_MATCHStruct other = (LOOKUP_LAST_MATCHStruct) obj;

            if (this.ID_LOOKUP_LAST_MATCH == null) {
                if (other.ID_LOOKUP_LAST_MATCH != null)
                    return false;
            } else if (!this.ID_LOOKUP_LAST_MATCH
                    .equals(other.ID_LOOKUP_LAST_MATCH))
                return false;

            return true;
        }

        public void copyDataTo(LOOKUP_LAST_MATCHStruct other) {

            other.ID_LOOKUP_LAST_MATCH = this.ID_LOOKUP_LAST_MATCH;
            other.LABEL_LOOKUP_LAST_MATCH = this.LABEL_LOOKUP_LAST_MATCH;

        }

        public void copyKeysDataTo(LOOKUP_LAST_MATCHStruct other) {

            other.ID_LOOKUP_LAST_MATCH = this.ID_LOOKUP_LAST_MATCH;

        }

        public void loadKeysData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_LAST_MATCH = null;
                } else {
                    this.ID_LOOKUP_LAST_MATCH = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toKeysData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_LOOKUP_LAST_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_LAST_MATCH);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        /**
         * Fill Values data from the given byte array.
         */
        public void loadValuesData(byte[] data) {
            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_LAST_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_LAST_MATCH = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * Return a byte array which represents Values data.
         */
        public byte[] toValuesData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.LABEL_LOOKUP_LAST_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_LAST_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP_LAST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_LAST_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_LAST_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_LAST_MATCH));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(LOOKUP_LAST_MATCHStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP_LAST_MATCH,
                    other.ID_LOOKUP_LAST_MATCH);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_6Process() throws TalendException {
        try {

            LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH = new LOOKUP_LAST_MATCHStruct();

            /**
             * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH begin ] start
             */

            ok_Hash.put("tAdvancedHashPersistent_LOOKUP_LAST_MATCH", false);
            start_Hash.put("tAdvancedHashPersistent_LOOKUP_LAST_MATCH", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHashPersistent_LOOKUP_LAST_MATCH";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_LOOKUP_LAST_MATCH = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<LOOKUP_LAST_MATCHStruct> tHash_Lookup_LOOKUP_LAST_MATCH = new org.talend.designer.components.persistent.PersistentSortedLookupManager<LOOKUP_LAST_MATCHStruct>(
                    matchingModeEnum_LOOKUP_LAST_MATCH,
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/Lookup_LOOKUP_LAST_MATCH_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public LOOKUP_LAST_MATCHStruct createRowInstance() {
                            return new LOOKUP_LAST_MATCHStruct();
                        }
                    });

            tHash_Lookup_LOOKUP_LAST_MATCH.initPut();

            globalMap.put("tHash_Lookup_LOOKUP_LAST_MATCH",
                    tHash_Lookup_LOOKUP_LAST_MATCH);

            /**
             * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH begin ] stop
             */

            /**
             * [tFileInputDelimited_6 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_6", false);
            start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_6";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/lookup_"
                            + context.indexLookup + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_6.nextRecord()) {
                LOOKUP_LAST_MATCH = null;
                LOOKUP_LAST_MATCH = null;
                boolean whetherReject_tFileInputDelimited_6 = false;
                LOOKUP_LAST_MATCH = new LOOKUP_LAST_MATCHStruct();
                try {
                    String temp_tFileInputDelimited_6 = "";
                    temp_tFileInputDelimited_6 = fid_tFileInputDelimited_6.get(
                            0).trim();
                    if (temp_tFileInputDelimited_6.length() > 0) {
                        LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_6);
                    } else {
                        LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH = null;
                    }
                    LOOKUP_LAST_MATCH.LABEL_LOOKUP_LAST_MATCH = fid_tFileInputDelimited_6
                            .get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_6 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_6 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_6 main ] start
                 */

                currentComponent = "tFileInputDelimited_6";

                /**
                 * [tFileInputDelimited_6 main ] stop
                 */
                // Start of branch "LOOKUP_LAST_MATCH"
                if (LOOKUP_LAST_MATCH != null) {

                    /**
                     * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH main ] start
                     */

                    currentComponent = "tAdvancedHashPersistent_LOOKUP_LAST_MATCH";

                    LOOKUP_LAST_MATCHStruct LOOKUP_LAST_MATCH_HashRow = tHash_Lookup_LOOKUP_LAST_MATCH
                            .getNextFreeRow();

                    LOOKUP_LAST_MATCH_HashRow.ID_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.ID_LOOKUP_LAST_MATCH;
                    LOOKUP_LAST_MATCH_HashRow.LABEL_LOOKUP_LAST_MATCH = LOOKUP_LAST_MATCH.LABEL_LOOKUP_LAST_MATCH;
                    tHash_Lookup_LOOKUP_LAST_MATCH
                            .put(LOOKUP_LAST_MATCH_HashRow);

                    /**
                     * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH main ] stop
                     */

                } // End of branch "LOOKUP_LAST_MATCH"

                /**
                 * [tFileInputDelimited_6 end ] start
                 */

                currentComponent = "tFileInputDelimited_6";

            }
            fid_tFileInputDelimited_6.close();
            globalMap.put("tFileInputDelimited_6_NB_LINE",
                    fid_tFileInputDelimited_6.getRowNumber());

            ok_Hash.put("tFileInputDelimited_6", true);
            end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_6 end ] stop
             */
            /**
             * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH end ] start
             */

            currentComponent = "tAdvancedHashPersistent_LOOKUP_LAST_MATCH";

            tHash_Lookup_LOOKUP_LAST_MATCH.endPut();

            ok_Hash.put("tAdvancedHashPersistent_LOOKUP_LAST_MATCH", true);
            end_Hash.put("tAdvancedHashPersistent_LOOKUP_LAST_MATCH", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHashPersistent_LOOKUP_LAST_MATCH end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class lookup_UNIQUE_MACTHStruct
            implements
            routines.system.IPersistableComparableLookupRow<lookup_UNIQUE_MACTHStruct> {
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP_UNIQUE_MATCH;

        String LABEL_LOOKUP_UNIQUE_MATCH;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime
                        * result
                        + ((this.ID_LOOKUP_UNIQUE_MATCH == null) ? 0
                                : this.ID_LOOKUP_UNIQUE_MATCH.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookup_UNIQUE_MACTHStruct other = (lookup_UNIQUE_MACTHStruct) obj;

            if (this.ID_LOOKUP_UNIQUE_MATCH == null) {
                if (other.ID_LOOKUP_UNIQUE_MATCH != null)
                    return false;
            } else if (!this.ID_LOOKUP_UNIQUE_MATCH
                    .equals(other.ID_LOOKUP_UNIQUE_MATCH))
                return false;

            return true;
        }

        public void copyDataTo(lookup_UNIQUE_MACTHStruct other) {

            other.ID_LOOKUP_UNIQUE_MATCH = this.ID_LOOKUP_UNIQUE_MATCH;
            other.LABEL_LOOKUP_UNIQUE_MATCH = this.LABEL_LOOKUP_UNIQUE_MATCH;

        }

        public void copyKeysDataTo(lookup_UNIQUE_MACTHStruct other) {

            other.ID_LOOKUP_UNIQUE_MATCH = this.ID_LOOKUP_UNIQUE_MATCH;

        }

        public void loadKeysData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_UNIQUE_MATCH = null;
                } else {
                    this.ID_LOOKUP_UNIQUE_MATCH = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toKeysData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_LOOKUP_UNIQUE_MATCH == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_UNIQUE_MATCH);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        /**
         * Fill Values data from the given byte array.
         */
        public void loadValuesData(byte[] data) {
            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_UNIQUE_MATCH = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_UNIQUE_MATCH = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * Return a byte array which represents Values data.
         */
        public byte[] toValuesData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.LABEL_LOOKUP_UNIQUE_MATCH == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_UNIQUE_MATCH.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP_UNIQUE_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_UNIQUE_MATCH));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_UNIQUE_MATCH");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_UNIQUE_MATCH));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup_UNIQUE_MACTHStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP_UNIQUE_MATCH,
                    other.ID_LOOKUP_UNIQUE_MATCH);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_7Process() throws TalendException {
        try {

            lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTH = new lookup_UNIQUE_MACTHStruct();

            /**
             * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH begin ] start
             */

            ok_Hash.put("tAdvancedHashPersistent_lookup_UNIQUE_MACTH", false);
            start_Hash.put("tAdvancedHashPersistent_lookup_UNIQUE_MACTH",
                    System.currentTimeMillis());
            currentComponent = "tAdvancedHashPersistent_lookup_UNIQUE_MACTH";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup_UNIQUE_MACTH = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.ALL_MATCHES;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_UNIQUE_MACTHStruct> tHash_Lookup_lookup_UNIQUE_MACTH = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup_UNIQUE_MACTHStruct>(
                    matchingModeEnum_lookup_UNIQUE_MACTH,
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/Lookup_lookup_UNIQUE_MACTH_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public lookup_UNIQUE_MACTHStruct createRowInstance() {
                            return new lookup_UNIQUE_MACTHStruct();
                        }
                    });

            tHash_Lookup_lookup_UNIQUE_MACTH.initPut();

            globalMap.put("tHash_Lookup_lookup_UNIQUE_MACTH",
                    tHash_Lookup_lookup_UNIQUE_MACTH);

            /**
             * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH begin ] stop
             */

            /**
             * [tFileInputDelimited_7 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_7", false);
            start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_7";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/lookup_"
                            + context.indexLookup + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_7.nextRecord()) {
                lookup_UNIQUE_MACTH = null;
                lookup_UNIQUE_MACTH = null;
                boolean whetherReject_tFileInputDelimited_7 = false;
                lookup_UNIQUE_MACTH = new lookup_UNIQUE_MACTHStruct();
                try {
                    String temp_tFileInputDelimited_7 = "";
                    temp_tFileInputDelimited_7 = fid_tFileInputDelimited_7.get(
                            0).trim();
                    if (temp_tFileInputDelimited_7.length() > 0) {
                        lookup_UNIQUE_MACTH.ID_LOOKUP_UNIQUE_MATCH = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_7);
                    } else {
                        lookup_UNIQUE_MACTH.ID_LOOKUP_UNIQUE_MATCH = null;
                    }
                    lookup_UNIQUE_MACTH.LABEL_LOOKUP_UNIQUE_MATCH = fid_tFileInputDelimited_7
                            .get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_7 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_7 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_7 main ] start
                 */

                currentComponent = "tFileInputDelimited_7";

                /**
                 * [tFileInputDelimited_7 main ] stop
                 */
                // Start of branch "lookup_UNIQUE_MACTH"
                if (lookup_UNIQUE_MACTH != null) {

                    /**
                     * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH main ] start
                     */

                    currentComponent = "tAdvancedHashPersistent_lookup_UNIQUE_MACTH";

                    lookup_UNIQUE_MACTHStruct lookup_UNIQUE_MACTH_HashRow = tHash_Lookup_lookup_UNIQUE_MACTH
                            .getNextFreeRow();

                    lookup_UNIQUE_MACTH_HashRow.ID_LOOKUP_UNIQUE_MATCH = lookup_UNIQUE_MACTH.ID_LOOKUP_UNIQUE_MATCH;
                    lookup_UNIQUE_MACTH_HashRow.LABEL_LOOKUP_UNIQUE_MATCH = lookup_UNIQUE_MACTH.LABEL_LOOKUP_UNIQUE_MATCH;
                    tHash_Lookup_lookup_UNIQUE_MACTH
                            .put(lookup_UNIQUE_MACTH_HashRow);

                    /**
                     * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH main ] stop
                     */

                } // End of branch "lookup_UNIQUE_MACTH"

                /**
                 * [tFileInputDelimited_7 end ] start
                 */

                currentComponent = "tFileInputDelimited_7";

            }
            fid_tFileInputDelimited_7.close();
            globalMap.put("tFileInputDelimited_7_NB_LINE",
                    fid_tFileInputDelimited_7.getRowNumber());

            ok_Hash.put("tFileInputDelimited_7", true);
            end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_7 end ] stop
             */
            /**
             * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH end ] start
             */

            currentComponent = "tAdvancedHashPersistent_lookup_UNIQUE_MACTH";

            tHash_Lookup_lookup_UNIQUE_MACTH.endPut();

            ok_Hash.put("tAdvancedHashPersistent_lookup_UNIQUE_MACTH", true);
            end_Hash.put("tAdvancedHashPersistent_lookup_UNIQUE_MACTH", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHashPersistent_lookup_UNIQUE_MACTH end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class lookup_ALL_ROWSStruct implements
            routines.system.IPersistableRow<lookup_ALL_ROWSStruct> {

        Integer ID_LOOKUP_ALL_ROWS;

        String LABEL_LOOKUP_ALL_ROWS;

        public void loadData(byte[] data) {

            ByteArrayInputStream bai = null;
            ObjectInputStream dis = null;
            byte[] byteArray = null;
            try {
                bai = new ByteArrayInputStream(data);
                dis = new ObjectInputStream(bai);

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP_ALL_ROWS = null;
                } else {
                    this.ID_LOOKUP_ALL_ROWS = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP_ALL_ROWS = null;
                } else {
                    byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP_ALL_ROWS = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            } finally {
                if (dis != null) {
                    try {
                        dis.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public byte[] toData() {
            ByteArrayOutputStream bao = null;
            ObjectOutputStream dos = null;
            byte[] byteArray = null;
            try {
                bao = new ByteArrayOutputStream();
                dos = new ObjectOutputStream(bao);

                if (this.ID_LOOKUP_ALL_ROWS == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_ALL_ROWS);
                }

                if (this.LABEL_LOOKUP_ALL_ROWS == null) {
                    dos.writeInt(-1);
                } else {
                    byteArray = this.LABEL_LOOKUP_ALL_ROWS.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return bao.toByteArray();
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP_ALL_ROWS");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_ALL_ROWS));

            sb.append(", ");

            sb.append("LABEL_LOOKUP_ALL_ROWS");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP_ALL_ROWS));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup_ALL_ROWSStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_9Process() throws TalendException {
        try {

            lookup_ALL_ROWSStruct lookup_ALL_ROWS = new lookup_ALL_ROWSStruct();

            /**
             * [tAdvancedHashPersistent_lookup_ALL_ROWS begin ] start
             */

            ok_Hash.put("tAdvancedHashPersistent_lookup_ALL_ROWS", false);
            start_Hash.put("tAdvancedHashPersistent_lookup_ALL_ROWS", System
                    .currentTimeMillis());
            currentComponent = "tAdvancedHashPersistent_lookup_ALL_ROWS";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup_ALL_ROWS = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.ALL_ROWS;

            org.talend.designer.components.persistent.PersistentLookupManager<lookup_ALL_ROWSStruct> tHash_Lookup_lookup_ALL_ROWS = new org.talend.designer.components.persistent.PersistentLookupManager<lookup_ALL_ROWSStruct>(
                    matchingModeEnum_lookup_ALL_ROWS,
                    "/home/amaumont/data/dev/eclipse/workspaces/runtime-talend.product2"
                            + "/Lookup_lookup_ALL_ROWS_",
                    new org.talend.designer.components.persistent.IRowCreator() {
                        public lookup_ALL_ROWSStruct createRowInstance() {
                            return new lookup_ALL_ROWSStruct();
                        }
                    });

            tHash_Lookup_lookup_ALL_ROWS.initPut();

            globalMap.put("tHash_Lookup_lookup_ALL_ROWS",
                    tHash_Lookup_lookup_ALL_ROWS);

            /**
             * [tAdvancedHashPersistent_lookup_ALL_ROWS begin ] stop
             */

            /**
             * [tFileInputDelimited_9 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_9", false);
            start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_9";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir")
                            + context.current_job_dir + "in/lookup_"
                            + context.indexLookup + ".csv", "ISO-8859-15", ";",
                    "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_9.nextRecord()) {
                lookup_ALL_ROWS = null;
                lookup_ALL_ROWS = null;
                boolean whetherReject_tFileInputDelimited_9 = false;
                lookup_ALL_ROWS = new lookup_ALL_ROWSStruct();
                try {
                    String temp_tFileInputDelimited_9 = "";
                    temp_tFileInputDelimited_9 = fid_tFileInputDelimited_9.get(
                            0).trim();
                    if (temp_tFileInputDelimited_9.length() > 0) {
                        lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = ParserUtils
                                .parseTo_Integer(temp_tFileInputDelimited_9);
                    } else {
                        lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS = null;
                    }
                    lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS = fid_tFileInputDelimited_9
                            .get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_9 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_9 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_9 main ] start
                 */

                currentComponent = "tFileInputDelimited_9";

                /**
                 * [tFileInputDelimited_9 main ] stop
                 */
                // Start of branch "lookup_ALL_ROWS"
                if (lookup_ALL_ROWS != null) {

                    /**
                     * [tAdvancedHashPersistent_lookup_ALL_ROWS main ] start
                     */

                    currentComponent = "tAdvancedHashPersistent_lookup_ALL_ROWS";

                    lookup_ALL_ROWSStruct lookup_ALL_ROWS_HashRow = tHash_Lookup_lookup_ALL_ROWS
                            .getNextFreeRow();

                    lookup_ALL_ROWS_HashRow.ID_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.ID_LOOKUP_ALL_ROWS;
                    lookup_ALL_ROWS_HashRow.LABEL_LOOKUP_ALL_ROWS = lookup_ALL_ROWS.LABEL_LOOKUP_ALL_ROWS;
                    tHash_Lookup_lookup_ALL_ROWS.put(lookup_ALL_ROWS_HashRow);

                    /**
                     * [tAdvancedHashPersistent_lookup_ALL_ROWS main ] stop
                     */

                } // End of branch "lookup_ALL_ROWS"

                /**
                 * [tFileInputDelimited_9 end ] start
                 */

                currentComponent = "tFileInputDelimited_9";

            }
            fid_tFileInputDelimited_9.close();
            globalMap.put("tFileInputDelimited_9_NB_LINE",
                    fid_tFileInputDelimited_9.getRowNumber());

            ok_Hash.put("tFileInputDelimited_9", true);
            end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_9 end ] stop
             */
            /**
             * [tAdvancedHashPersistent_lookup_ALL_ROWS end ] start
             */

            currentComponent = "tAdvancedHashPersistent_lookup_ALL_ROWS";

            tHash_Lookup_lookup_ALL_ROWS.endPut();

            ok_Hash.put("tAdvancedHashPersistent_lookup_ALL_ROWS", true);
            end_Hash.put("tAdvancedHashPersistent_lookup_ALL_ROWS", System
                    .currentTimeMillis());

            /**
             * [tAdvancedHashPersistent_lookup_ALL_ROWS end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "local";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
    public static long startTime = 0;

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][]) globalBuffer
                .toArray(new String[globalBuffer.size()][]);

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = tMap_04_persistence_01_n_lookups_CHILD.class
                    .getClassLoader()
                    .getResourceAsStream(
                            "java_project_8/tmap_04_persistence_01_n_lookups_child_0_1/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = tMap_04_persistence_01_n_lookups_CHILD.class
                        .getClassLoader().getResourceAsStream(
                                "java_project_8/tmap_04_persistence_01_n_lookups_child_0_1/contexts/"
                                        + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            context.param_file_path = (String) context
                    .getProperty("param_file_path");

            context.data_dir = (String) context.getProperty("data_dir");

            context.data_output_dir = (String) context
                    .getProperty("data_output_dir");

            context.result_host = (String) context.getProperty("result_host");

            context.result_port = (String) context.getProperty("result_port");

            context.result_database = (String) context
                    .getProperty("result_database");

            context.result_username = (String) context
                    .getProperty("result_username");

            context.result_password = (String) context
                    .getProperty("result_password");

            context.result_table = (String) context.getProperty("result_table");

            context.mysql_host = (String) context.getProperty("mysql_host");

            context.mysql_port = (String) context.getProperty("mysql_port");

            context.mysql_schema = (String) context.getProperty("mysql_schema");

            context.mysql_username = (String) context
                    .getProperty("mysql_username");

            context.mysql_password = (String) context
                    .getProperty("mysql_password");

            context.current_job_dir = (String) context
                    .getProperty("current_job_dir");

            context.indexMain = (String) context.getProperty("indexMain");

            context.indexLookup = (String) context.getProperty("indexLookup");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final tMap_04_persistence_01_n_lookups_CHILD tMap_04_persistence_01_n_lookups_CHILDClass = new tMap_04_persistence_01_n_lookups_CHILD();
        try {
            errorCode = null;
            tMap_04_persistence_01_n_lookups_CHILDClass
                    .tFileInputDelimited_2Process();
            status = "end";
        } catch (TalendException e_tFileInputDelimited_2) {
            status = "failure";
            e_tFileInputDelimited_2.printStackTrace();

        } finally {
        }
        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out
                    .println((endUsedMemory - startUsedMemory)
                            + " bytes memory increase when running : tMap_04_persistence_01_n_lookups_CHILD");
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue
                        .substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "local";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/*******************************************************************************
 * 215295 characters generated by Talend OpenStudio on the 25 avril 2008
 * 11:38:45 CEST
 ******************************************************************************/
