// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package java_project_8.tmap_10_persistence_02_types_sorteddata_0_1;

import routines.libs;
import routines.randomGenerator;
import routines.routine_tMap_10_persistence_01_types;
import routines.routine_tMap_10_persistence_02_types_sorteddata;
import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

import org.apache.commons.lang.ArrayUtils;

//the import part of tJavaFlex_2
//import java.util.List;

//the import part of tJavaFlex_3
//import java.util.List;

/**
 * Job: tMap_10_persistence_02_types_sorteddata Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.2.0.qualifier
 * @status
 */
public class tMap_10_persistence_02_types_sorteddata {
    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public static String param_file_path;
        public static String data_dir;
        public static String data_output_dir;
        public static String result_host;
        public static String result_port;
        public static String result_database;
        public static String result_username;
        public static String result_password;
        public static String result_table;
        public static String mysql_host;
        public static String mysql_port;
        public static String mysql_schema;
        public static String mysql_username;
        public static String mysql_password;
        public static String current_job_dir;
    }

    private static ContextProperties context = new ContextProperties();
    private static final String jobName = "tMap_10_persistence_02_types_sorteddata";
    private static final String projectName = "JAVA_PROJECT_8";
    public static Integer errorCode = null;
    private static String currentComponent = "";
    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

    private class TalendException extends Exception {
        private Exception e = null;
        private tMap_10_persistence_02_types_sorteddata c = null;

        private TalendException(tMap_10_persistence_02_types_sorteddata c,
                Exception e) {
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e
                        .getMessage());
                System.err
                        .println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass()
                            .getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tAssertCatcher_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tReplicate_1_error(Exception exception) throws TalendException {
        end_Hash.put("tReplicate_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tMysqlOutput_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tFileInputDelimited_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tContextLoad_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tContextLoad_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tJavaFlex_3_error(Exception exception) throws TalendException {
        end_Hash.put("tJavaFlex_3", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tJavaFlex_3_onSubJobError(exception);
    }

    public void tFixedFlowInput_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tMap_1_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tMap_2_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tFileOutputDelimited_2_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tFileCompare_1_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFileCompare_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFileCompare_1_onSubJobError(exception);
    }

    public void tAssert_1_error(Exception exception) throws TalendException {
        end_Hash.put("tAssert_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tAssert_1_onSubJobError(exception);
    }

    public void tFixedFlowInput_4_error(Exception exception)
            throws TalendException {
        end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tAdvancedHash_lookup_error(Exception exception)
            throws TalendException {
        end_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process();
        }
        tFixedFlowInput_2_onSubJobError(exception);
    }

    public void tAssertCatcher_1_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFileInputDelimited_2_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tJavaFlex_3_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFixedFlowInput_2_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tFileCompare_1_onSubJobError(Exception exception)
            throws TalendException {
    }

    public void tAssert_1_onSubJobError(Exception exception)
            throws TalendException {
    }

    static class row4Struct implements
            routines.system.IPersistableRow<row4Struct> {

        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String project;

        String job;

        String language;

        String origin;

        String status;

        String substatus;

        String description;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.moment = null;
                } else {
                    this.moment = new Date(dis.readLong());
                }

                length = dis.readInt();
                if (length == -1) {
                    this.pid = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.pid = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.project = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.project = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.job = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.job = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.language = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.language = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.origin = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.origin = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.status = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.status = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.substatus = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.substatus = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.description = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.description = new String(commonByteArray, 0, length);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.language == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.language.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.status == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.status.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.substatus == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.substatus.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.description == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.description.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("language");
            sb.append("=");
            sb.append(String.valueOf(this.language));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("status");
            sb.append("=");
            sb.append(String.valueOf(this.status));

            sb.append(", ");

            sb.append("substatus");
            sb.append("=");
            sb.append(String.valueOf(this.substatus));

            sb.append(", ");

            sb.append("description");
            sb.append("=");
            sb.append(String.valueOf(this.description));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row4Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class row3Struct implements
            routines.system.IPersistableRow<row3Struct> {

        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String project;

        String job;

        String language;

        String origin;

        String status;

        String substatus;

        String description;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.moment = null;
                } else {
                    this.moment = new Date(dis.readLong());
                }

                length = dis.readInt();
                if (length == -1) {
                    this.pid = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.pid = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.project = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.project = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.job = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.job = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.language = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.language = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.origin = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.origin = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.status = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.status = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.substatus = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.substatus = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.description = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.description = new String(commonByteArray, 0, length);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.language == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.language.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.status == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.status.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.substatus == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.substatus.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.description == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.description.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("language");
            sb.append("=");
            sb.append(String.valueOf(this.language));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("status");
            sb.append("=");
            sb.append(String.valueOf(this.status));

            sb.append(", ");

            sb.append("substatus");
            sb.append("=");
            sb.append(String.valueOf(this.substatus));

            sb.append(", ");

            sb.append("description");
            sb.append("=");
            sb.append(String.valueOf(this.description));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row3Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tAssertCatcher_1Process() throws TalendException {
        try {

            row3Struct row3 = new row3Struct();
            row4Struct row4 = new row4Struct();

            /*******************************************************************
             * / [tMysqlOutput_1 begin ] start
             */

            ok_Hash.put("tMysqlOutput_1", false);
            start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
            currentComponent = "tMysqlOutput_1";

            int nb_line_tMysqlOutput_1 = 0;
            int nb_line_update_tMysqlOutput_1 = 0;
            int nb_line_inserted_tMysqlOutput_1 = 0;
            int nb_line_deleted_tMysqlOutput_1 = 0;

            int deletedCount_tMysqlOutput_1 = 0;
            int updatedCount_tMysqlOutput_1 = 0;
            int insertedCount_tMysqlOutput_1 = 0;

            String tableName_tMysqlOutput_1 = context.result_table;
            boolean whetherReject_tMysqlOutput_1 = false;

            java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
                    .getInstance();
            calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
            long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
                    .getTime();
            calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
            long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
                    .getTime();
            long date_tMysqlOutput_1;

            java.sql.Connection conn_tMysqlOutput_1 = null;
            java.lang.Class.forName("org.gjt.mm.mysql.Driver");

            String url_tMysqlOutput_1 = "jdbc:mysql://" + context.result_host
                    + ":" + context.result_port + "/" + context.result_database
                    + "?" + "noDatetimeStringSync=true";

            String dbUser_tMysqlOutput_1 = context.result_username;
            String dbPwd_tMysqlOutput_1 = context.result_password;
            conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
                    url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
                    dbPwd_tMysqlOutput_1);
            conn_tMysqlOutput_1.setAutoCommit(false);

            java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1
                    .getMetaData();
            java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1
                    .getTables(null, null, null, new String[] { "TABLE" });
            boolean whetherExist_tMysqlOutput_1 = false;
            while (rsTable_tMysqlOutput_1.next()) {
                String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1
                        .getString("TABLE_NAME");
                if (table_tMysqlOutput_1.equalsIgnoreCase(context.result_table)) {
                    whetherExist_tMysqlOutput_1 = true;
                    break;
                }
            }
            if (!whetherExist_tMysqlOutput_1) {
                java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1
                        .createStatement();
                stmtCreate_tMysqlOutput_1
                        .execute("CREATE TABLE `"
                                + tableName_tMysqlOutput_1
                                + "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`project` VARCHAR(50)  ,`job` VARCHAR(50)  ,`language` VARCHAR(5)  ,`origin` VARCHAR(50)  ,`status` VARCHAR(10)  ,`substatus` VARCHAR(255)  ,`description` VARCHAR(255)  )");
            }
            java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
                    .prepareStatement("INSERT INTO `"
                            + context.result_table
                            + "` (`moment`,`pid`,`project`,`job`,`language`,`origin`,`status`,`substatus`,`description`) VALUES (?,?,?,?,?,?,?,?,?)");

            int commitEvery_tMysqlOutput_1 = 100;

            int commitCounter_tMysqlOutput_1 = 0;

            /**
             * [tMysqlOutput_1 begin ] stop
             */

            /*******************************************************************
             * / [tReplicate_1 begin ] start
             */

            ok_Hash.put("tReplicate_1", false);
            start_Hash.put("tReplicate_1", System.currentTimeMillis());
            currentComponent = "tReplicate_1";

            /**
             * [tReplicate_1 begin ] stop
             */

            /*******************************************************************
             * / [tAssertCatcher_1 begin ] start
             */

            ok_Hash.put("tAssertCatcher_1", false);
            start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
            currentComponent = "tAssertCatcher_1";

            for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1
                    .getMessages()) {
                row3.moment = acm.getMoment();
                row3.pid = acm.getPid();
                row3.project = acm.getProject();
                row3.job = acm.getJob();
                row3.language = acm.getLanguage();

                row3.origin = (acm.getOrigin() == null
                        || acm.getOrigin().length() < 1 ? null : acm
                        .getOrigin());

                row3.status = acm.getStatus();
                row3.substatus = acm.getSubstatus();
                row3.description = acm.getDescription();

                /**
                 * [tAssertCatcher_1 begin ] stop
                 */
                /***************************************************************
                 * / [tAssertCatcher_1 main ] start
                 */

                currentComponent = "tAssertCatcher_1";

                /**
                 * [tAssertCatcher_1 main ] stop
                 */
                /***************************************************************
                 * / [tReplicate_1 main ] start
                 */

                currentComponent = "tReplicate_1";

                row4 = new row4Struct();

                row4.moment = row3.moment;
                row4.pid = row3.pid;
                row4.project = row3.project;
                row4.job = row3.job;
                row4.language = row3.language;
                row4.origin = row3.origin;
                row4.status = row3.status;
                row4.substatus = row3.substatus;
                row4.description = row3.description;

                /**
                 * [tReplicate_1 main ] stop
                 */
                /***************************************************************
                 * / [tMysqlOutput_1 main ] start
                 */

                currentComponent = "tMysqlOutput_1";

                whetherReject_tMysqlOutput_1 = false;
                if (row4.moment != null) {
                    date_tMysqlOutput_1 = row4.moment.getTime();
                    if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
                            || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
                        pstmt_tMysqlOutput_1
                                .setString(1, "0000-00-00 00:00:00");
                    } else {
                        pstmt_tMysqlOutput_1.setTimestamp(1,
                                new java.sql.Timestamp(date_tMysqlOutput_1));
                    }
                } else {
                    pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);
                }

                if (row4.pid == null) {
                    pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(2, row4.pid);
                }

                if (row4.project == null) {
                    pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(3, row4.project);
                }

                if (row4.job == null) {
                    pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(4, row4.job);
                }

                if (row4.language == null) {
                    pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(5, row4.language);
                }

                if (row4.origin == null) {
                    pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(6, row4.origin);
                }

                if (row4.status == null) {
                    pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(7, row4.status);
                }

                if (row4.substatus == null) {
                    pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(8, row4.substatus);
                }

                if (row4.description == null) {
                    pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(9, row4.description);
                }

                try {
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
                            + pstmt_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch (Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                    throw (e);
                }
                commitCounter_tMysqlOutput_1++;

                if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();

                    commitCounter_tMysqlOutput_1 = 0;

                }

                /**
                 * [tMysqlOutput_1 main ] stop
                 */

                /***************************************************************
                 * / [tAssertCatcher_1 end ] start
                 */

                currentComponent = "tAssertCatcher_1";

            }

            ok_Hash.put("tAssertCatcher_1", true);
            end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

            /**
             * [tAssertCatcher_1 end ] stop
             */
            /*******************************************************************
             * / [tReplicate_1 end ] start
             */

            currentComponent = "tReplicate_1";

            ok_Hash.put("tReplicate_1", true);
            end_Hash.put("tReplicate_1", System.currentTimeMillis());

            /**
             * [tReplicate_1 end ] stop
             */
            /*******************************************************************
             * / [tMysqlOutput_1 end ] start
             */

            currentComponent = "tMysqlOutput_1";

            if (pstmt_tMysqlOutput_1 != null) {

                pstmt_tMysqlOutput_1.close();

            }

            conn_tMysqlOutput_1.commit();

            conn_tMysqlOutput_1.close();

            nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
                    + deletedCount_tMysqlOutput_1;
            nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
                    + updatedCount_tMysqlOutput_1;
            nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
                    + insertedCount_tMysqlOutput_1;

            globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
                    nb_line_update_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
                    nb_line_inserted_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
                    nb_line_deleted_tMysqlOutput_1);

            ok_Hash.put("tMysqlOutput_1", true);
            end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

            /**
             * [tMysqlOutput_1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    static class row6Struct implements
            routines.system.IPersistableRow<row6Struct> {

        static byte[] commonByteArray = new byte[0];

        String key;

        String value;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.key = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.key = new String(commonByteArray, 0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.value = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.value = new String(commonByteArray, 0, length);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.key == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.key.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.value == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.value.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("key");
            sb.append("=");
            sb.append(String.valueOf(this.key));

            sb.append(", ");

            sb.append("value");
            sb.append("=");
            sb.append(String.valueOf(this.value));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row6Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_2Process() throws TalendException {
        try {

            row6Struct row6 = new row6Struct();

            /*******************************************************************
             * / [tContextLoad_1 begin ] start
             */

            ok_Hash.put("tContextLoad_1", false);
            start_Hash.put("tContextLoad_1", System.currentTimeMillis());
            currentComponent = "tContextLoad_1";

            java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
            int nb_line_tContextLoad_1 = 0;

            /**
             * [tContextLoad_1 begin ] stop
             */

            /*******************************************************************
             * / [tFileInputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_2", false);
            start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_2";

            int nb_line_tFileInputDelimited_2 = 0;
            int footer_tFileInputDelimited_2 = 0;
            int totalLinetFileInputDelimited_2 = 0;
            int limittFileInputDelimited_2 = -1;
            int lastLinetFileInputDelimited_2 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                                                         * Start field
                                                         * tFileInputDelimited_2:FILENAME
                                                         */
                            context.param_file_path/**
                                                     * End field
                                                     * tFileInputDelimited_2:FILENAME
                                                     */
                            ), "ISO-8859-15")), ',');

            csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
            csvReadertFileInputDelimited_2.setTextQualifier('"');

            csvReadertFileInputDelimited_2
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_2 = null;

            if (footer_tFileInputDelimited_2 > 0) {

                while (csvReadertFileInputDelimited_2.readRecord()) {
                    rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                            .getValues();
                    if (!(rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0]
                            .equals("\015"))) {// empty line when row separator
                                                // is '\n'

                        totalLinetFileInputDelimited_2++;

                    }

                }
                int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
                        - footer_tFileInputDelimited_2 < 0 ? 0
                        : totalLinetFileInputDelimited_2
                                - footer_tFileInputDelimited_2;
                if (lastLinetFileInputDelimited_2 > 0) {
                    lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
                            : lastLineTemptFileInputDelimited_2;
                } else {
                    lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
                }

                csvReadertFileInputDelimited_2.close();

                csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(/**
                                                                     * Start
                                                                     * field
                                                                     * tFileInputDelimited_2:FILENAME
                                                                     */
                                        context.param_file_path/**
                                                                 * End field
                                                                 * tFileInputDelimited_2:FILENAME
                                                                 */
                                        ), "ISO-8859-15")), ',');
                csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
                csvReadertFileInputDelimited_2.setTextQualifier('"');

                csvReadertFileInputDelimited_2
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_2 = 0;
            int outputLinetFileInputDelimited_2 = 0;

            while (csvReadertFileInputDelimited_2.readRecord()) {

                rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                        .getValues();

                if (rowtFileInputDelimited_2.length == 1
                        && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                        // line
                                                                        // when
                                                                        // row
                                                                        // separator
                                                                        // is
                                                                        // '\n'
                    continue;
                }

                currentLinetFileInputDelimited_2++;
                if (currentLinetFileInputDelimited_2 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_2 > -1
                        && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
                    break;
                }
                outputLinetFileInputDelimited_2++;
                if (limittFileInputDelimited_2 != -1
                        && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
                    break;
                }

                row6 = null;
                boolean whetherReject_tFileInputDelimited_2 = false;
                row6 = new row6Struct();
                try {

                    if (rowtFileInputDelimited_2.length == 1
                            && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        row6.key = null;

                        row6.value = null;

                    } else {

                        if (0 < rowtFileInputDelimited_2.length) {
                            row6.key = rowtFileInputDelimited_2[0].trim();

                        } else {

                            row6.key = null;

                        }

                        if (1 < rowtFileInputDelimited_2.length) {
                            row6.value = rowtFileInputDelimited_2[1].trim();

                        } else {

                            row6.value = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_2 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_2 begin ] stop
                 */
                /***************************************************************
                 * / [tFileInputDelimited_2 main ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                /**
                 * [tFileInputDelimited_2 main ] stop
                 */
                // Start of branch "row6"
                if (row6 != null) {

                    /***********************************************************
                     * / [tContextLoad_1 main ] start
                     */

                    currentComponent = "tContextLoad_1";

                    // ////////////////////////
                    String key_tContextLoad_1 = null;
                    if (row6.key != null) {
                        key_tContextLoad_1 = row6.key;
                    }
                    String value_tContextLoad_1 = null;
                    if (row6.value != null) {
                        value_tContextLoad_1 = row6.value;
                    }
                    if (context.getProperty(key_tContextLoad_1) != null) {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;
                        }

                        assignList_tContextLoad_1.add(key_tContextLoad_1);
                    } else {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;

                        }

                        newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
                    }
                    nb_line_tContextLoad_1++;
                    // ////////////////////////

                    /**
                     * [tContextLoad_1 main ] stop
                     */

                } // End of branch "row6"

                /***************************************************************
                 * / [tFileInputDelimited_2 end ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                nb_line_tFileInputDelimited_2++;
            }
            csvReadertFileInputDelimited_2.close();
            globalMap.put("tFileInputDelimited_2_NB_LINE",
                    nb_line_tFileInputDelimited_2);

            ok_Hash.put("tFileInputDelimited_2", true);
            end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_2 end ] stop
             */
            /*******************************************************************
             * / [tContextLoad_1 end ] start
             */

            currentComponent = "tContextLoad_1";

            java.util.Enumeration<?> enu_tContextLoad_1 = context
                    .propertyNames();
            while (enu_tContextLoad_1.hasMoreElements()) {
                String key_tContextLoad_1 = (String) enu_tContextLoad_1
                        .nextElement();
                if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
                        && !newPropertyList_tContextLoad_1
                                .contains(key_tContextLoad_1)) {
                    noAssignList_tContextLoad_1.add(key_tContextLoad_1);
                }
            }
            globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

            ok_Hash.put("tContextLoad_1", true);
            end_Hash.put("tContextLoad_1", System.currentTimeMillis());

            /**
             * [tContextLoad_1 end ] stop
             */

            tJavaFlex_3Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public void tJavaFlex_3Process() throws TalendException {
        try {

            /*******************************************************************
             * / [tJavaFlex_3 begin ] start
             */

            ok_Hash.put("tJavaFlex_3", false);
            start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
            currentComponent = "tJavaFlex_3";

            // start part of your Java code

            /**
             * [tJavaFlex_3 begin ] stop
             */
            /*******************************************************************
             * / [tJavaFlex_3 main ] start
             */

            currentComponent = "tJavaFlex_3";

            // here is the main part of the component,
            // a piece of code executed in the row
            // loop
            // System.out.println("Testing with files 'main_" +
            // context.indexMain + ".csv' and 'lookup_" + context.indexLookup
            // +".csv' ...");

            /**
             * [tJavaFlex_3 main ] stop
             */
            /*******************************************************************
             * / [tJavaFlex_3 end ] start
             */

            currentComponent = "tJavaFlex_3";

            // end of the component, outside/closing the loop

            ok_Hash.put("tJavaFlex_3", true);
            end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

            /**
             * [tJavaFlex_3 end ] stop
             */
            tFixedFlowInput_2Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    static class out2Struct implements
            routines.system.IPersistableRow<out2Struct> {

        static byte[] commonByteArray = new byte[0];

        boolean DEFINED_EXP_boolean;

        Boolean DEFINED_EXP_Boolean;

        Boolean UNDEFINED_EXP_Boolean;

        byte DEFINED_EXP_byte;

        Byte DEFINED_EXP_Byte;

        Byte UNDEFINED_EXP_Byte;

        String DEFINED_EXP_byte_array;

        byte[] DEFINED_EXP_byte_array_nullable;

        char DEFINED_EXP_char;

        Character DEFINED_EXP_Character;

        Character UNDEFINED_EXP_Character;

        String DEFINED_EXP_Date;

        java.util.Date UNDEFINED_EXP_Date;

        double DEFINED_EXP_double;

        Double DEFINED_EXP_Double;

        Double UNDEFINED_EXP_Double;

        BigDecimal DEFINED_EXP_BigDecimal_1;

        BigDecimal UNDEFINED_EXP_BigDecimal_1;

        int DEFINED_EXP_int;

        Integer DEFINED_EXP_Integer;

        Integer UNDEFINED_EXP_Integer;

        float DEFINED_EXP_float;

        Float DEFINED_EXP_Float;

        Float UNDEFINED_EXP_Float;

        long DEFINED_EXP_long;

        Long DEFINED_EXP_Long;

        Long UNDEFINED_EXP_Long;

        Object DEFINED_EXP_Object;

        Object UNDEFINED_EXP_Object;

        short DEFINED_EXP_short;

        Short DEFINED_EXP_Short;

        Short UNDEFINED_EXP_Short;

        String DEFINED_EXP_String;

        String UNDEFINED_EXP_String;

        List DEFINED_EXP_List;

        List UNDEFINED_EXP_List;

        boolean DEFINED_EXP_boolean_1;

        Boolean DEFINED_EXP_Boolean_1;

        Boolean UNDEFINED_EXP_Boolean_1;

        byte DEFINED_EXP_byte_1;

        Byte DEFINED_EXP_Byte_1;

        Byte UNDEFINED_EXP_Byte_1;

        String DEFINED_EXP_byte_array_1;

        byte[] DEFINED_EXP_byte_array_nullable_1;

        char DEFINED_EXP_char_1;

        Character DEFINED_EXP_Character_1;

        Character UNDEFINED_EXP_Character_1;

        String DEFINED_EXP_Date_1;

        java.util.Date UNDEFINED_EXP_Date_1;

        double DEFINED_EXP_double_1;

        Double DEFINED_EXP_Double_1;

        Double UNDEFINED_EXP_Double_1;

        BigDecimal DEFINED_EXP_BigDecimal;

        BigDecimal UNDEFINED_EXP_BigDecimal;

        int DEFINED_EXP_int_1;

        Integer DEFINED_EXP_Integer_1;

        Integer UNDEFINED_EXP_Integer_1;

        float DEFINED_EXP_float_1;

        Float DEFINED_EXP_Float_1;

        Float UNDEFINED_EXP_Float_1;

        long DEFINED_EXP_long_1;

        Long DEFINED_EXP_Long_1;

        Long UNDEFINED_EXP_Long_1;

        Object DEFINED_EXP_Object_1;

        Object UNDEFINED_EXP_Object_1;

        short DEFINED_EXP_short_1;

        Short DEFINED_EXP_Short_1;

        Short UNDEFINED_EXP_Short_1;

        String DEFINED_EXP_String_1;

        String UNDEFINED_EXP_String_1;

        List DEFINED_EXP_List_1;

        List UNDEFINED_EXP_List_1;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                this.DEFINED_EXP_boolean = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean = null;
                } else {
                    this.DEFINED_EXP_Boolean = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean = null;
                } else {
                    this.UNDEFINED_EXP_Boolean = dis.readBoolean();
                }

                this.DEFINED_EXP_byte = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte = null;
                } else {
                    this.DEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte = null;
                } else {
                    this.UNDEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_byte_array = new String(commonByteArray,
                            0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable = byteArray;
                }

                this.DEFINED_EXP_char = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character = null;
                } else {
                    this.DEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character = null;
                } else {
                    this.UNDEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_Date = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_Date = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date = null;
                } else {
                    this.UNDEFINED_EXP_Date = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double = null;
                } else {
                    this.DEFINED_EXP_Double = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double = null;
                } else {
                    this.UNDEFINED_EXP_Double = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal_1 = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal_1 = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer = null;
                } else {
                    this.DEFINED_EXP_Integer = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer = null;
                } else {
                    this.UNDEFINED_EXP_Integer = dis.readInt();
                }

                this.DEFINED_EXP_float = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float = null;
                } else {
                    this.DEFINED_EXP_Float = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float = null;
                } else {
                    this.UNDEFINED_EXP_Float = dis.readFloat();
                }

                this.DEFINED_EXP_long = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long = null;
                } else {
                    this.DEFINED_EXP_Long = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long = null;
                } else {
                    this.UNDEFINED_EXP_Long = dis.readLong();
                }

                this.DEFINED_EXP_Object = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object = (Object) dis.readObject();

                this.DEFINED_EXP_short = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short = null;
                } else {
                    this.DEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short = null;
                } else {
                    this.UNDEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                this.DEFINED_EXP_List = (List) dis.readObject();

                this.UNDEFINED_EXP_List = (List) dis.readObject();

                this.DEFINED_EXP_boolean_1 = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean_1 = null;
                } else {
                    this.DEFINED_EXP_Boolean_1 = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean_1 = null;
                } else {
                    this.UNDEFINED_EXP_Boolean_1 = dis.readBoolean();
                }

                this.DEFINED_EXP_byte_1 = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte_1 = null;
                } else {
                    this.DEFINED_EXP_Byte_1 = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte_1 = null;
                } else {
                    this.UNDEFINED_EXP_Byte_1 = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_byte_array_1 = new String(commonByteArray,
                            0, length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable_1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable_1 = byteArray;
                }

                this.DEFINED_EXP_char_1 = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character_1 = null;
                } else {
                    this.DEFINED_EXP_Character_1 = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character_1 = null;
                } else {
                    this.UNDEFINED_EXP_Character_1 = dis.readChar();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_Date_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_Date_1 = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date_1 = null;
                } else {
                    this.UNDEFINED_EXP_Date_1 = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double_1 = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double_1 = null;
                } else {
                    this.DEFINED_EXP_Double_1 = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double_1 = null;
                } else {
                    this.UNDEFINED_EXP_Double_1 = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int_1 = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer_1 = null;
                } else {
                    this.DEFINED_EXP_Integer_1 = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer_1 = null;
                } else {
                    this.UNDEFINED_EXP_Integer_1 = dis.readInt();
                }

                this.DEFINED_EXP_float_1 = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float_1 = null;
                } else {
                    this.DEFINED_EXP_Float_1 = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float_1 = null;
                } else {
                    this.UNDEFINED_EXP_Float_1 = dis.readFloat();
                }

                this.DEFINED_EXP_long_1 = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long_1 = null;
                } else {
                    this.DEFINED_EXP_Long_1 = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long_1 = null;
                } else {
                    this.UNDEFINED_EXP_Long_1 = dis.readLong();
                }

                this.DEFINED_EXP_Object_1 = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object_1 = (Object) dis.readObject();

                this.DEFINED_EXP_short_1 = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short_1 = null;
                } else {
                    this.DEFINED_EXP_Short_1 = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short_1 = null;
                } else {
                    this.UNDEFINED_EXP_Short_1 = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String_1 = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String_1 = new String(commonByteArray,
                            0, length);
                }

                this.DEFINED_EXP_List_1 = (List) dis.readObject();

                this.UNDEFINED_EXP_List_1 = (List) dis.readObject();

            } catch (IOException e) {
                throw new RuntimeException(e);

            } catch (ClassNotFoundException eCNFE) {
                throw new RuntimeException(eCNFE);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean);

                // Boolean

                if (this.DEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte);

                // Byte

                if (this.DEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte);
                }

                // String

                if (this.DEFINED_EXP_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_byte_array.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char);

                // Character

                if (this.DEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character);
                }

                // Character

                if (this.UNDEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character);
                }

                // String

                if (this.DEFINED_EXP_Date == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_Date.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double);

                // Double

                if (this.DEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double);
                }

                // Double

                if (this.UNDEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal_1);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal_1);

                // int

                dos.writeInt(this.DEFINED_EXP_int);

                // Integer

                if (this.DEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float);

                // Float

                if (this.DEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float);
                }

                // Float

                if (this.UNDEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long);

                // Long

                if (this.DEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long);
                }

                // Long

                if (this.UNDEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object);

                // short

                dos.writeShort(this.DEFINED_EXP_short);

                // Short

                if (this.DEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short);
                }

                // Short

                if (this.UNDEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short);
                }

                // String

                if (this.DEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List);

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean_1);

                // Boolean

                if (this.DEFINED_EXP_Boolean_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean_1);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean_1);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte_1);

                // Byte

                if (this.DEFINED_EXP_Byte_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte_1);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte_1);
                }

                // String

                if (this.DEFINED_EXP_byte_array_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_byte_array_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable_1 == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable_1.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable_1);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char_1);

                // Character

                if (this.DEFINED_EXP_Character_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character_1);
                }

                // Character

                if (this.UNDEFINED_EXP_Character_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character_1);
                }

                // String

                if (this.DEFINED_EXP_Date_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_Date_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date_1.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double_1);

                // Double

                if (this.DEFINED_EXP_Double_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double_1);
                }

                // Double

                if (this.UNDEFINED_EXP_Double_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double_1);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal);

                // int

                dos.writeInt(this.DEFINED_EXP_int_1);

                // Integer

                if (this.DEFINED_EXP_Integer_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer_1);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer_1);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float_1);

                // Float

                if (this.DEFINED_EXP_Float_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float_1);
                }

                // Float

                if (this.UNDEFINED_EXP_Float_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float_1);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long_1);

                // Long

                if (this.DEFINED_EXP_Long_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long_1);
                }

                // Long

                if (this.UNDEFINED_EXP_Long_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long_1);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object_1);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object_1);

                // short

                dos.writeShort(this.DEFINED_EXP_short_1);

                // Short

                if (this.DEFINED_EXP_Short_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short_1);
                }

                // Short

                if (this.UNDEFINED_EXP_Short_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short_1);
                }

                // String

                if (this.DEFINED_EXP_String_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List_1);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List_1);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("DEFINED_EXP_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable));

            sb.append(", ");

            sb.append("DEFINED_EXP_char");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date));

            sb.append(", ");

            sb.append("DEFINED_EXP_double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_int");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("DEFINED_EXP_float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float));

            sb.append(", ");

            sb.append("DEFINED_EXP_long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object));

            sb.append(", ");

            sb.append("DEFINED_EXP_short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short));

            sb.append(", ");

            sb.append("DEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String));

            sb.append(", ");

            sb.append("DEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List));

            sb.append(", ");

            sb.append("DEFINED_EXP_boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_char_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_double_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("DEFINED_EXP_int_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_float_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_long_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_short_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_String_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_List_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List_1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(out2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class outStruct implements
            routines.system.IPersistableRow<outStruct> {

        static byte[] commonByteArray = new byte[0];

        boolean DEFINED_EXP_boolean;

        Boolean DEFINED_EXP_Boolean;

        Boolean UNDEFINED_EXP_Boolean;

        byte DEFINED_EXP_byte;

        Byte DEFINED_EXP_Byte;

        Byte UNDEFINED_EXP_Byte;

        byte[] DEFINED_EXP_byte_array;

        byte[] DEFINED_EXP_byte_array_nullable;

        char DEFINED_EXP_char;

        Character DEFINED_EXP_Character;

        Character UNDEFINED_EXP_Character;

        java.util.Date DEFINED_EXP_Date;

        java.util.Date UNDEFINED_EXP_Date;

        double DEFINED_EXP_double;

        Double DEFINED_EXP_Double;

        Double UNDEFINED_EXP_Double;

        BigDecimal DEFINED_EXP_BigDecimal_1;

        BigDecimal UNDEFINED_EXP_BigDecimal_1;

        int DEFINED_EXP_int;

        Integer DEFINED_EXP_Integer;

        Integer UNDEFINED_EXP_Integer;

        float DEFINED_EXP_float;

        Float DEFINED_EXP_Float;

        Float UNDEFINED_EXP_Float;

        long DEFINED_EXP_long;

        Long DEFINED_EXP_Long;

        Long UNDEFINED_EXP_Long;

        Object DEFINED_EXP_Object;

        Object UNDEFINED_EXP_Object;

        short DEFINED_EXP_short;

        Short DEFINED_EXP_Short;

        Short UNDEFINED_EXP_Short;

        String DEFINED_EXP_String;

        String UNDEFINED_EXP_String;

        List DEFINED_EXP_List;

        List UNDEFINED_EXP_List;

        boolean DEFINED_EXP_boolean_1;

        Boolean DEFINED_EXP_Boolean_1;

        Boolean UNDEFINED_EXP_Boolean_1;

        byte DEFINED_EXP_byte_1;

        Byte DEFINED_EXP_Byte_1;

        Byte UNDEFINED_EXP_Byte_1;

        byte[] DEFINED_EXP_byte_array_1;

        byte[] DEFINED_EXP_byte_array_nullable_1;

        char DEFINED_EXP_char_1;

        Character DEFINED_EXP_Character_1;

        Character UNDEFINED_EXP_Character_1;

        java.util.Date DEFINED_EXP_Date_1;

        java.util.Date UNDEFINED_EXP_Date_1;

        double DEFINED_EXP_double_1;

        Double DEFINED_EXP_Double_1;

        Double UNDEFINED_EXP_Double_1;

        BigDecimal DEFINED_EXP_BigDecimal;

        BigDecimal UNDEFINED_EXP_BigDecimal;

        int DEFINED_EXP_int_1;

        Integer DEFINED_EXP_Integer_1;

        Integer UNDEFINED_EXP_Integer_1;

        float DEFINED_EXP_float_1;

        Float DEFINED_EXP_Float_1;

        Float UNDEFINED_EXP_Float_1;

        long DEFINED_EXP_long_1;

        Long DEFINED_EXP_Long_1;

        Long UNDEFINED_EXP_Long_1;

        Object DEFINED_EXP_Object_1;

        Object UNDEFINED_EXP_Object_1;

        short DEFINED_EXP_short_1;

        Short DEFINED_EXP_Short_1;

        Short UNDEFINED_EXP_Short_1;

        String DEFINED_EXP_String_1;

        String UNDEFINED_EXP_String_1;

        List DEFINED_EXP_List_1;

        List UNDEFINED_EXP_List_1;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                this.DEFINED_EXP_boolean = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean = null;
                } else {
                    this.DEFINED_EXP_Boolean = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean = null;
                } else {
                    this.UNDEFINED_EXP_Boolean = dis.readBoolean();
                }

                this.DEFINED_EXP_byte = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte = null;
                } else {
                    this.DEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte = null;
                } else {
                    this.UNDEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array = byteArray;
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable = byteArray;
                }

                this.DEFINED_EXP_char = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character = null;
                } else {
                    this.DEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character = null;
                } else {
                    this.UNDEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Date = null;
                } else {
                    this.DEFINED_EXP_Date = new Date(dis.readLong());
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date = null;
                } else {
                    this.UNDEFINED_EXP_Date = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double = null;
                } else {
                    this.DEFINED_EXP_Double = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double = null;
                } else {
                    this.UNDEFINED_EXP_Double = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal_1 = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal_1 = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer = null;
                } else {
                    this.DEFINED_EXP_Integer = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer = null;
                } else {
                    this.UNDEFINED_EXP_Integer = dis.readInt();
                }

                this.DEFINED_EXP_float = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float = null;
                } else {
                    this.DEFINED_EXP_Float = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float = null;
                } else {
                    this.UNDEFINED_EXP_Float = dis.readFloat();
                }

                this.DEFINED_EXP_long = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long = null;
                } else {
                    this.DEFINED_EXP_Long = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long = null;
                } else {
                    this.UNDEFINED_EXP_Long = dis.readLong();
                }

                this.DEFINED_EXP_Object = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object = (Object) dis.readObject();

                this.DEFINED_EXP_short = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short = null;
                } else {
                    this.DEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short = null;
                } else {
                    this.UNDEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                this.DEFINED_EXP_List = (List) dis.readObject();

                this.UNDEFINED_EXP_List = (List) dis.readObject();

                this.DEFINED_EXP_boolean_1 = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean_1 = null;
                } else {
                    this.DEFINED_EXP_Boolean_1 = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean_1 = null;
                } else {
                    this.UNDEFINED_EXP_Boolean_1 = dis.readBoolean();
                }

                this.DEFINED_EXP_byte_1 = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte_1 = null;
                } else {
                    this.DEFINED_EXP_Byte_1 = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte_1 = null;
                } else {
                    this.UNDEFINED_EXP_Byte_1 = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_1 = byteArray;
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable_1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable_1 = byteArray;
                }

                this.DEFINED_EXP_char_1 = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character_1 = null;
                } else {
                    this.DEFINED_EXP_Character_1 = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character_1 = null;
                } else {
                    this.UNDEFINED_EXP_Character_1 = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Date_1 = null;
                } else {
                    this.DEFINED_EXP_Date_1 = new Date(dis.readLong());
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date_1 = null;
                } else {
                    this.UNDEFINED_EXP_Date_1 = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double_1 = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double_1 = null;
                } else {
                    this.DEFINED_EXP_Double_1 = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double_1 = null;
                } else {
                    this.UNDEFINED_EXP_Double_1 = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int_1 = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer_1 = null;
                } else {
                    this.DEFINED_EXP_Integer_1 = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer_1 = null;
                } else {
                    this.UNDEFINED_EXP_Integer_1 = dis.readInt();
                }

                this.DEFINED_EXP_float_1 = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float_1 = null;
                } else {
                    this.DEFINED_EXP_Float_1 = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float_1 = null;
                } else {
                    this.UNDEFINED_EXP_Float_1 = dis.readFloat();
                }

                this.DEFINED_EXP_long_1 = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long_1 = null;
                } else {
                    this.DEFINED_EXP_Long_1 = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long_1 = null;
                } else {
                    this.UNDEFINED_EXP_Long_1 = dis.readLong();
                }

                this.DEFINED_EXP_Object_1 = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object_1 = (Object) dis.readObject();

                this.DEFINED_EXP_short_1 = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short_1 = null;
                } else {
                    this.DEFINED_EXP_Short_1 = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short_1 = null;
                } else {
                    this.UNDEFINED_EXP_Short_1 = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String_1 = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String_1 = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String_1 = new String(commonByteArray,
                            0, length);
                }

                this.DEFINED_EXP_List_1 = (List) dis.readObject();

                this.UNDEFINED_EXP_List_1 = (List) dis.readObject();

            } catch (IOException e) {
                throw new RuntimeException(e);

            } catch (ClassNotFoundException eCNFE) {
                throw new RuntimeException(eCNFE);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean);

                // Boolean

                if (this.DEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte);

                // Byte

                if (this.DEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array.length);
                    dos.write(this.DEFINED_EXP_byte_array);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char);

                // Character

                if (this.DEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character);
                }

                // Character

                if (this.UNDEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character);
                }

                // java.util.Date

                if (this.DEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Date.getTime());
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double);

                // Double

                if (this.DEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double);
                }

                // Double

                if (this.UNDEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal_1);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal_1);

                // int

                dos.writeInt(this.DEFINED_EXP_int);

                // Integer

                if (this.DEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float);

                // Float

                if (this.DEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float);
                }

                // Float

                if (this.UNDEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long);

                // Long

                if (this.DEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long);
                }

                // Long

                if (this.UNDEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object);

                // short

                dos.writeShort(this.DEFINED_EXP_short);

                // Short

                if (this.DEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short);
                }

                // Short

                if (this.UNDEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short);
                }

                // String

                if (this.DEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List);

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean_1);

                // Boolean

                if (this.DEFINED_EXP_Boolean_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean_1);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean_1);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte_1);

                // Byte

                if (this.DEFINED_EXP_Byte_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte_1);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte_1);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_1 == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_1.length);
                    dos.write(this.DEFINED_EXP_byte_array_1);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable_1 == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable_1.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable_1);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char_1);

                // Character

                if (this.DEFINED_EXP_Character_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character_1);
                }

                // Character

                if (this.UNDEFINED_EXP_Character_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character_1);
                }

                // java.util.Date

                if (this.DEFINED_EXP_Date_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Date_1.getTime());
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date_1.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double_1);

                // Double

                if (this.DEFINED_EXP_Double_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double_1);
                }

                // Double

                if (this.UNDEFINED_EXP_Double_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double_1);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal);

                // int

                dos.writeInt(this.DEFINED_EXP_int_1);

                // Integer

                if (this.DEFINED_EXP_Integer_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer_1);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer_1);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float_1);

                // Float

                if (this.DEFINED_EXP_Float_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float_1);
                }

                // Float

                if (this.UNDEFINED_EXP_Float_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float_1);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long_1);

                // Long

                if (this.DEFINED_EXP_Long_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long_1);
                }

                // Long

                if (this.UNDEFINED_EXP_Long_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long_1);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object_1);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object_1);

                // short

                dos.writeShort(this.DEFINED_EXP_short_1);

                // Short

                if (this.DEFINED_EXP_Short_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short_1);
                }

                // Short

                if (this.UNDEFINED_EXP_Short_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short_1);
                }

                // String

                if (this.DEFINED_EXP_String_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String_1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String_1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List_1);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List_1);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("DEFINED_EXP_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable));

            sb.append(", ");

            sb.append("DEFINED_EXP_char");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date));

            sb.append(", ");

            sb.append("DEFINED_EXP_double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_int");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("DEFINED_EXP_float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float));

            sb.append(", ");

            sb.append("DEFINED_EXP_long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object));

            sb.append(", ");

            sb.append("DEFINED_EXP_short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short));

            sb.append(", ");

            sb.append("DEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String));

            sb.append(", ");

            sb.append("DEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List));

            sb.append(", ");

            sb.append("DEFINED_EXP_boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_char_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_double_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("DEFINED_EXP_int_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_float_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_long_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_short_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_String_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String_1));

            sb.append(", ");

            sb.append("DEFINED_EXP_List_1");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List_1));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List_1");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List_1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(outStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class mainStruct implements
            routines.system.IPersistableRow<mainStruct> {

        static byte[] commonByteArray = new byte[0];

        boolean DEFINED_EXP_boolean;

        Boolean DEFINED_EXP_Boolean;

        Boolean UNDEFINED_EXP_Boolean;

        byte DEFINED_EXP_byte;

        Byte DEFINED_EXP_Byte;

        Byte UNDEFINED_EXP_Byte;

        byte[] DEFINED_EXP_byte_array;

        byte[] DEFINED_EXP_byte_array_nullable;

        char DEFINED_EXP_char;

        Character DEFINED_EXP_Character;

        Character UNDEFINED_EXP_Character;

        java.util.Date DEFINED_EXP_Date;

        java.util.Date UNDEFINED_EXP_Date;

        double DEFINED_EXP_double;

        Double DEFINED_EXP_Double;

        Double UNDEFINED_EXP_Double;

        BigDecimal DEFINED_EXP_BigDecimal;

        BigDecimal UNDEFINED_EXP_BigDecimal;

        int DEFINED_EXP_int;

        Integer DEFINED_EXP_Integer;

        Integer UNDEFINED_EXP_Integer;

        float DEFINED_EXP_float;

        Float DEFINED_EXP_Float;

        Float UNDEFINED_EXP_Float;

        long DEFINED_EXP_long;

        Long DEFINED_EXP_Long;

        Long UNDEFINED_EXP_Long;

        Object DEFINED_EXP_Object;

        Object UNDEFINED_EXP_Object;

        short DEFINED_EXP_short;

        Short DEFINED_EXP_Short;

        Short UNDEFINED_EXP_Short;

        String DEFINED_EXP_String;

        String UNDEFINED_EXP_String;

        List DEFINED_EXP_List;

        List UNDEFINED_EXP_List;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                this.DEFINED_EXP_boolean = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean = null;
                } else {
                    this.DEFINED_EXP_Boolean = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean = null;
                } else {
                    this.UNDEFINED_EXP_Boolean = dis.readBoolean();
                }

                this.DEFINED_EXP_byte = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte = null;
                } else {
                    this.DEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte = null;
                } else {
                    this.UNDEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array = byteArray;
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable = byteArray;
                }

                this.DEFINED_EXP_char = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character = null;
                } else {
                    this.DEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character = null;
                } else {
                    this.UNDEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Date = null;
                } else {
                    this.DEFINED_EXP_Date = new Date(dis.readLong());
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date = null;
                } else {
                    this.UNDEFINED_EXP_Date = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double = null;
                } else {
                    this.DEFINED_EXP_Double = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double = null;
                } else {
                    this.UNDEFINED_EXP_Double = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer = null;
                } else {
                    this.DEFINED_EXP_Integer = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer = null;
                } else {
                    this.UNDEFINED_EXP_Integer = dis.readInt();
                }

                this.DEFINED_EXP_float = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float = null;
                } else {
                    this.DEFINED_EXP_Float = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float = null;
                } else {
                    this.UNDEFINED_EXP_Float = dis.readFloat();
                }

                this.DEFINED_EXP_long = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long = null;
                } else {
                    this.DEFINED_EXP_Long = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long = null;
                } else {
                    this.UNDEFINED_EXP_Long = dis.readLong();
                }

                this.DEFINED_EXP_Object = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object = (Object) dis.readObject();

                this.DEFINED_EXP_short = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short = null;
                } else {
                    this.DEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short = null;
                } else {
                    this.UNDEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                this.DEFINED_EXP_List = (List) dis.readObject();

                this.UNDEFINED_EXP_List = (List) dis.readObject();

            } catch (IOException e) {
                throw new RuntimeException(e);

            } catch (ClassNotFoundException eCNFE) {
                throw new RuntimeException(eCNFE);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean);

                // Boolean

                if (this.DEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte);

                // Byte

                if (this.DEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array.length);
                    dos.write(this.DEFINED_EXP_byte_array);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char);

                // Character

                if (this.DEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character);
                }

                // Character

                if (this.UNDEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character);
                }

                // java.util.Date

                if (this.DEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Date.getTime());
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double);

                // Double

                if (this.DEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double);
                }

                // Double

                if (this.UNDEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal);

                // int

                dos.writeInt(this.DEFINED_EXP_int);

                // Integer

                if (this.DEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float);

                // Float

                if (this.DEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float);
                }

                // Float

                if (this.UNDEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long);

                // Long

                if (this.DEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long);
                }

                // Long

                if (this.UNDEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object);

                // short

                dos.writeShort(this.DEFINED_EXP_short);

                // Short

                if (this.DEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short);
                }

                // Short

                if (this.UNDEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short);
                }

                // String

                if (this.DEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("DEFINED_EXP_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable));

            sb.append(", ");

            sb.append("DEFINED_EXP_char");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date));

            sb.append(", ");

            sb.append("DEFINED_EXP_double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("DEFINED_EXP_int");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("DEFINED_EXP_float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float));

            sb.append(", ");

            sb.append("DEFINED_EXP_long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object));

            sb.append(", ");

            sb.append("DEFINED_EXP_short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short));

            sb.append(", ");

            sb.append("DEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String));

            sb.append(", ");

            sb.append("DEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(mainStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class after_tFixedFlowInput_2Struct implements
            routines.system.IPersistableRow<after_tFixedFlowInput_2Struct> {

        static byte[] commonByteArray = new byte[0];

        boolean DEFINED_EXP_boolean;

        Boolean DEFINED_EXP_Boolean;

        Boolean UNDEFINED_EXP_Boolean;

        byte DEFINED_EXP_byte;

        Byte DEFINED_EXP_Byte;

        Byte UNDEFINED_EXP_Byte;

        byte[] DEFINED_EXP_byte_array;

        byte[] DEFINED_EXP_byte_array_nullable;

        char DEFINED_EXP_char;

        Character DEFINED_EXP_Character;

        Character UNDEFINED_EXP_Character;

        java.util.Date DEFINED_EXP_Date;

        java.util.Date UNDEFINED_EXP_Date;

        double DEFINED_EXP_double;

        Double DEFINED_EXP_Double;

        Double UNDEFINED_EXP_Double;

        BigDecimal DEFINED_EXP_BigDecimal;

        BigDecimal UNDEFINED_EXP_BigDecimal;

        int DEFINED_EXP_int;

        Integer DEFINED_EXP_Integer;

        Integer UNDEFINED_EXP_Integer;

        float DEFINED_EXP_float;

        Float DEFINED_EXP_Float;

        Float UNDEFINED_EXP_Float;

        long DEFINED_EXP_long;

        Long DEFINED_EXP_Long;

        Long UNDEFINED_EXP_Long;

        Object DEFINED_EXP_Object;

        Object UNDEFINED_EXP_Object;

        short DEFINED_EXP_short;

        Short DEFINED_EXP_Short;

        Short UNDEFINED_EXP_Short;

        String DEFINED_EXP_String;

        String UNDEFINED_EXP_String;

        List DEFINED_EXP_List;

        List UNDEFINED_EXP_List;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                this.DEFINED_EXP_boolean = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean = null;
                } else {
                    this.DEFINED_EXP_Boolean = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean = null;
                } else {
                    this.UNDEFINED_EXP_Boolean = dis.readBoolean();
                }

                this.DEFINED_EXP_byte = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte = null;
                } else {
                    this.DEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte = null;
                } else {
                    this.UNDEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array = byteArray;
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable = byteArray;
                }

                this.DEFINED_EXP_char = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character = null;
                } else {
                    this.DEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character = null;
                } else {
                    this.UNDEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Date = null;
                } else {
                    this.DEFINED_EXP_Date = new Date(dis.readLong());
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date = null;
                } else {
                    this.UNDEFINED_EXP_Date = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double = null;
                } else {
                    this.DEFINED_EXP_Double = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double = null;
                } else {
                    this.UNDEFINED_EXP_Double = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer = null;
                } else {
                    this.DEFINED_EXP_Integer = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer = null;
                } else {
                    this.UNDEFINED_EXP_Integer = dis.readInt();
                }

                this.DEFINED_EXP_float = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float = null;
                } else {
                    this.DEFINED_EXP_Float = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float = null;
                } else {
                    this.UNDEFINED_EXP_Float = dis.readFloat();
                }

                this.DEFINED_EXP_long = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long = null;
                } else {
                    this.DEFINED_EXP_Long = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long = null;
                } else {
                    this.UNDEFINED_EXP_Long = dis.readLong();
                }

                this.DEFINED_EXP_Object = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object = (Object) dis.readObject();

                this.DEFINED_EXP_short = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short = null;
                } else {
                    this.DEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short = null;
                } else {
                    this.UNDEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                this.DEFINED_EXP_List = (List) dis.readObject();

                this.UNDEFINED_EXP_List = (List) dis.readObject();

            } catch (IOException e) {
                throw new RuntimeException(e);

            } catch (ClassNotFoundException eCNFE) {
                throw new RuntimeException(eCNFE);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean);

                // Boolean

                if (this.DEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte);

                // Byte

                if (this.DEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array.length);
                    dos.write(this.DEFINED_EXP_byte_array);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char);

                // Character

                if (this.DEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character);
                }

                // Character

                if (this.UNDEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character);
                }

                // java.util.Date

                if (this.DEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Date.getTime());
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double);

                // Double

                if (this.DEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double);
                }

                // Double

                if (this.UNDEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal);

                // int

                dos.writeInt(this.DEFINED_EXP_int);

                // Integer

                if (this.DEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float);

                // Float

                if (this.DEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float);
                }

                // Float

                if (this.UNDEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long);

                // Long

                if (this.DEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long);
                }

                // Long

                if (this.UNDEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object);

                // short

                dos.writeShort(this.DEFINED_EXP_short);

                // Short

                if (this.DEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short);
                }

                // Short

                if (this.UNDEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short);
                }

                // String

                if (this.DEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("DEFINED_EXP_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable));

            sb.append(", ");

            sb.append("DEFINED_EXP_char");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date));

            sb.append(", ");

            sb.append("DEFINED_EXP_double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("DEFINED_EXP_int");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("DEFINED_EXP_float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float));

            sb.append(", ");

            sb.append("DEFINED_EXP_long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object));

            sb.append(", ");

            sb.append("DEFINED_EXP_short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short));

            sb.append(", ");

            sb.append("DEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String));

            sb.append(", ");

            sb.append("DEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tFixedFlowInput_2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFixedFlowInput_2Process() throws TalendException {
        try {
            tFixedFlowInput_4Process();

            mainStruct main = new mainStruct();
            outStruct out = new outStruct();
            out2Struct out2 = new out2Struct();

            /*******************************************************************
             * / [tFileOutputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_2", false);
            start_Hash
                    .put("tFileOutputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_2";

            String fileName_tFileOutputDelimited_2 = (new java.io.File(
                    context.data_output_dir + context.current_job_dir
                            + "out.csv")).getAbsolutePath().replace("\\", "/");
            String fullName_tFileOutputDelimited_2 = null;
            String extension_tFileOutputDelimited_2 = null;
            String directory_tFileOutputDelimited_2 = null;
            if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
                        .lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                        .substring(0, fileName_tFileOutputDelimited_2
                                .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(0, fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2
                                    .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                }
                directory_tFileOutputDelimited_2 = "";
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /**
                                                             * Start field
                                                             * tFileOutputDelimited_2:FIELDSEPARATOR
                                                             */
            ";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                                                                     * Start
                                                                     * field
                                                                     * tFileOutputDelimited_2:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_2 != null
                    && directory_tFileOutputDelimited_2.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
                        directory_tFileOutputDelimited_2);
                if (!dir_tFileOutputDelimited_2.exists()) {
                    dir_tFileOutputDelimited_2.mkdirs();
                }
            }

            java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
                    new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(
                                    fileName_tFileOutputDelimited_2, false),
                            "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_2 = new java.io.File(
                    fileName_tFileOutputDelimited_2);

            if (filetFileOutputDelimited_2.length() == 0) {

                outtFileOutputDelimited_2.write("DEFINED_EXP_boolean");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Boolean");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Boolean");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_byte");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Byte");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Byte");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_byte_array");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2
                        .write("DEFINED_EXP_byte_array_nullable");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_char");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Character");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Character");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Date");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Date");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_double");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Double");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Double");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_BigDecimal_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_BigDecimal_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_int");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Integer");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Integer");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_float");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Float");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Float");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_long");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Long");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Long");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Object");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Object");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_short");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Short");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Short");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_String");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_String");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_List");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_List");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_boolean_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Boolean_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Boolean_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_byte_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Byte_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Byte_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_byte_array_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2
                        .write("DEFINED_EXP_byte_array_nullable_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_char_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Character_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Character_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Date_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Date_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_double_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Double_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Double_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_BigDecimal");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_BigDecimal");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_int_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Integer_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Integer_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_float_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Float_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Float_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_long_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Long_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Long_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Object_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Object_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_short_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_Short_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_Short_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_String_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_String_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("DEFINED_EXP_List_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_tFileOutputDelimited_2);

                outtFileOutputDelimited_2.write("UNDEFINED_EXP_List_1");

                outtFileOutputDelimited_2
                        .write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
            }

            /**
             * [tFileOutputDelimited_2 begin ] stop
             */

            /*******************************************************************
             * / [tMap_2 begin ] start
             */

            ok_Hash.put("tMap_2", false);
            start_Hash.put("tMap_2", System.currentTimeMillis());
            currentComponent = "tMap_2";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            out2Struct out2_tmp = new out2Struct();
            // ###############################

            /**
             * [tMap_2 begin ] stop
             */

            /*******************************************************************
             * / [tMap_1 begin ] start
             */

            ok_Hash.put("tMap_1", false);
            start_Hash.put("tMap_1", System.currentTimeMillis());
            currentComponent = "tMap_1";

            // ###############################
            // # Lookup's keys initialization

            org.talend.designer.components.commons.AdvancedMemoryLookup<lookupStruct> tHash_Lookup_lookup = (org.talend.designer.components.commons.AdvancedMemoryLookup<lookupStruct>) globalMap
                    .get("tHash_Lookup_lookup");

            lookupStruct lookupHashKey = new lookupStruct();
            lookupStruct lookupDefault = new lookupStruct();
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            outStruct out_tmp = new outStruct();
            // ###############################

            /**
             * [tMap_1 begin ] stop
             */

            /*******************************************************************
             * / [tFixedFlowInput_2 begin ] start
             */

            ok_Hash.put("tFixedFlowInput_2", false);
            start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
            currentComponent = "tFixedFlowInput_2";

            globalMap.put("NB_LINE", 5);
            for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 5; i_tFixedFlowInput_2++) {

                main.DEFINED_EXP_boolean = true;

                main.DEFINED_EXP_Boolean = false;

                main.UNDEFINED_EXP_Boolean = null;

                main.DEFINED_EXP_byte = Byte.MAX_VALUE;

                main.DEFINED_EXP_Byte = Byte.MIN_VALUE;

                main.UNDEFINED_EXP_Byte = null;

                main.DEFINED_EXP_byte_array = new byte[] { Byte.MAX_VALUE,
                        Byte.MIN_VALUE };

                main.DEFINED_EXP_byte_array_nullable = null;

                main.DEFINED_EXP_char = '0';

                main.DEFINED_EXP_Character = new Character('9');

                main.UNDEFINED_EXP_Character = null;

                main.DEFINED_EXP_Date = new Date(0);

                main.UNDEFINED_EXP_Date = null;

                main.DEFINED_EXP_double = Double.MAX_VALUE;

                main.DEFINED_EXP_Double = Double.MIN_VALUE;

                main.UNDEFINED_EXP_Double = null;

                main.DEFINED_EXP_BigDecimal = new BigDecimal(
                        "123456789.123456789");

                main.UNDEFINED_EXP_BigDecimal = null;

                main.DEFINED_EXP_int = Integer.MAX_VALUE;

                main.DEFINED_EXP_Integer = Integer.MIN_VALUE;

                main.UNDEFINED_EXP_Integer = null;

                main.DEFINED_EXP_float = Float.MAX_VALUE;

                main.DEFINED_EXP_Float = Float.MIN_VALUE;

                main.UNDEFINED_EXP_Float = null;

                main.DEFINED_EXP_long = Long.MAX_VALUE;

                main.DEFINED_EXP_Long = Long.MIN_VALUE;

                main.UNDEFINED_EXP_Long = null;

                main.DEFINED_EXP_Object = routine_tMap_10_persistence_02_types_sorteddata
                        .getCustomObject(i_tFixedFlowInput_2);

                main.UNDEFINED_EXP_Object = null;

                main.DEFINED_EXP_short = Short.MAX_VALUE;

                main.DEFINED_EXP_Short = Short.MIN_VALUE;

                main.UNDEFINED_EXP_Short = null;

                main.DEFINED_EXP_String = "A";

                main.UNDEFINED_EXP_String = null;

                main.DEFINED_EXP_List = new java.util.ArrayList();

                main.UNDEFINED_EXP_List = null;

                /**
                 * [tFixedFlowInput_2 begin ] stop
                 */
                /***************************************************************
                 * / [tFixedFlowInput_2 main ] start
                 */

                currentComponent = "tFixedFlowInput_2";

                /**
                 * [tFixedFlowInput_2 main ] stop
                 */
                /***************************************************************
                 * / [tMap_1 main ] start
                 */

                currentComponent = "tMap_1";

                // ###############################
                // # Input tables (lookups)
                boolean rejectedInnerJoin_tMap_1 = false;
                boolean mainRowRejected_tMap_1 = false;

                // /////////////////////////////////////////////
                // Starting Lookup Table "lookup"
                // /////////////////////////////////////////////

                boolean forceLooplookup = false;

                lookupStruct lookupObjectFromLookup = null;

                if (!rejectedInnerJoin_tMap_1) { // G 20

                    lookupHashKey.DEFINED_EXP_boolean = main.DEFINED_EXP_boolean;

                    lookupHashKey.DEFINED_EXP_Boolean = main.DEFINED_EXP_Boolean;

                    lookupHashKey.UNDEFINED_EXP_Boolean = main.UNDEFINED_EXP_Boolean;

                    lookupHashKey.DEFINED_EXP_byte = main.DEFINED_EXP_byte;

                    lookupHashKey.DEFINED_EXP_Byte = main.DEFINED_EXP_Byte;

                    lookupHashKey.UNDEFINED_EXP_Byte = main.UNDEFINED_EXP_Byte;

                    lookupHashKey.DEFINED_EXP_byte_array = main.DEFINED_EXP_byte_array;

                    lookupHashKey.DEFINED_EXP_byte_array_nullable = main.DEFINED_EXP_byte_array_nullable;

                    lookupHashKey.DEFINED_EXP_char = main.DEFINED_EXP_char;

                    lookupHashKey.DEFINED_EXP_Character = main.DEFINED_EXP_Character;

                    lookupHashKey.UNDEFINED_EXP_Character = main.UNDEFINED_EXP_Character;

                    lookupHashKey.DEFINED_EXP_Date = main.DEFINED_EXP_Date;

                    lookupHashKey.UNDEFINED_EXP_Date = main.UNDEFINED_EXP_Date;

                    lookupHashKey.DEFINED_EXP_double = main.DEFINED_EXP_double;

                    lookupHashKey.DEFINED_EXP_Double = main.DEFINED_EXP_Double;

                    lookupHashKey.UNDEFINED_EXP_Double = main.UNDEFINED_EXP_Double;

                    lookupHashKey.DEFINED_EXP_BigDecimal = main.DEFINED_EXP_BigDecimal;

                    lookupHashKey.UNDEFINED_EXP_BigDecimal = main.UNDEFINED_EXP_BigDecimal;

                    lookupHashKey.DEFINED_EXP_int = main.DEFINED_EXP_int;

                    lookupHashKey.DEFINED_EXP_Integer = main.DEFINED_EXP_Integer;

                    lookupHashKey.UNDEFINED_EXP_Integer = main.UNDEFINED_EXP_Integer;

                    lookupHashKey.DEFINED_EXP_float = main.DEFINED_EXP_float;

                    lookupHashKey.DEFINED_EXP_Float = main.DEFINED_EXP_Float;

                    lookupHashKey.UNDEFINED_EXP_Float = main.UNDEFINED_EXP_Float;

                    lookupHashKey.DEFINED_EXP_long = main.DEFINED_EXP_long;

                    lookupHashKey.DEFINED_EXP_Long = main.DEFINED_EXP_Long;

                    lookupHashKey.UNDEFINED_EXP_Long = main.UNDEFINED_EXP_Long;

                    lookupHashKey.DEFINED_EXP_Object = main.DEFINED_EXP_Object;

                    lookupHashKey.UNDEFINED_EXP_Object = main.UNDEFINED_EXP_Object;

                    lookupHashKey.DEFINED_EXP_short = main.DEFINED_EXP_short;

                    lookupHashKey.DEFINED_EXP_Short = main.DEFINED_EXP_Short;

                    lookupHashKey.UNDEFINED_EXP_Short = main.UNDEFINED_EXP_Short;

                    lookupHashKey.DEFINED_EXP_String = main.DEFINED_EXP_String;

                    lookupHashKey.UNDEFINED_EXP_String = main.UNDEFINED_EXP_String;

                    lookupHashKey.DEFINED_EXP_List = main.DEFINED_EXP_List;

                    lookupHashKey.UNDEFINED_EXP_List = main.UNDEFINED_EXP_List;

                    lookupHashKey.hashCodeDirty = true;

                    tHash_Lookup_lookup.lookup(lookupHashKey);

                    if (!tHash_Lookup_lookup.hasNext()) { // G 090

                    } // G 090

                } // G 20

                if (tHash_Lookup_lookup.getCount(lookupHashKey) > 1) { // G 071

                    // System.out.println("WARNING: UNIQUE MATCH is configured
                    // for the lookup 'lookup' and it contains more one result
                    // from keys : lookup.DEFINED_EXP_boolean = '" +
                    // lookupHashKey.DEFINED_EXP_boolean + "',
                    // lookup.DEFINED_EXP_Boolean = '" +
                    // lookupHashKey.DEFINED_EXP_Boolean + "',
                    // lookup.UNDEFINED_EXP_Boolean = '" +
                    // lookupHashKey.UNDEFINED_EXP_Boolean + "',
                    // lookup.DEFINED_EXP_byte = '" +
                    // lookupHashKey.DEFINED_EXP_byte + "',
                    // lookup.DEFINED_EXP_Byte = '" +
                    // lookupHashKey.DEFINED_EXP_Byte + "',
                    // lookup.UNDEFINED_EXP_Byte = '" +
                    // lookupHashKey.UNDEFINED_EXP_Byte + "',
                    // lookup.DEFINED_EXP_byte_array = '" +
                    // lookupHashKey.DEFINED_EXP_byte_array + "',
                    // lookup.DEFINED_EXP_byte_array_nullable = '" +
                    // lookupHashKey.DEFINED_EXP_byte_array_nullable + "',
                    // lookup.DEFINED_EXP_char = '" +
                    // lookupHashKey.DEFINED_EXP_char + "',
                    // lookup.DEFINED_EXP_Character = '" +
                    // lookupHashKey.DEFINED_EXP_Character + "',
                    // lookup.UNDEFINED_EXP_Character = '" +
                    // lookupHashKey.UNDEFINED_EXP_Character + "',
                    // lookup.DEFINED_EXP_Date = '" +
                    // lookupHashKey.DEFINED_EXP_Date + "',
                    // lookup.UNDEFINED_EXP_Date = '" +
                    // lookupHashKey.UNDEFINED_EXP_Date + "',
                    // lookup.DEFINED_EXP_double = '" +
                    // lookupHashKey.DEFINED_EXP_double + "',
                    // lookup.DEFINED_EXP_Double = '" +
                    // lookupHashKey.DEFINED_EXP_Double + "',
                    // lookup.UNDEFINED_EXP_Double = '" +
                    // lookupHashKey.UNDEFINED_EXP_Double + "',
                    // lookup.DEFINED_EXP_BigDecimal = '" +
                    // lookupHashKey.DEFINED_EXP_BigDecimal + "',
                    // lookup.UNDEFINED_EXP_BigDecimal = '" +
                    // lookupHashKey.UNDEFINED_EXP_BigDecimal + "',
                    // lookup.DEFINED_EXP_int = '" +
                    // lookupHashKey.DEFINED_EXP_int + "',
                    // lookup.DEFINED_EXP_Integer = '" +
                    // lookupHashKey.DEFINED_EXP_Integer + "',
                    // lookup.UNDEFINED_EXP_Integer = '" +
                    // lookupHashKey.UNDEFINED_EXP_Integer + "',
                    // lookup.DEFINED_EXP_float = '" +
                    // lookupHashKey.DEFINED_EXP_float + "',
                    // lookup.DEFINED_EXP_Float = '" +
                    // lookupHashKey.DEFINED_EXP_Float + "',
                    // lookup.UNDEFINED_EXP_Float = '" +
                    // lookupHashKey.UNDEFINED_EXP_Float + "',
                    // lookup.DEFINED_EXP_long = '" +
                    // lookupHashKey.DEFINED_EXP_long + "',
                    // lookup.DEFINED_EXP_Long = '" +
                    // lookupHashKey.DEFINED_EXP_Long + "',
                    // lookup.UNDEFINED_EXP_Long = '" +
                    // lookupHashKey.UNDEFINED_EXP_Long + "',
                    // lookup.DEFINED_EXP_Object = '" +
                    // lookupHashKey.DEFINED_EXP_Object + "',
                    // lookup.UNDEFINED_EXP_Object = '" +
                    // lookupHashKey.UNDEFINED_EXP_Object + "',
                    // lookup.DEFINED_EXP_short = '" +
                    // lookupHashKey.DEFINED_EXP_short + "',
                    // lookup.DEFINED_EXP_Short = '" +
                    // lookupHashKey.DEFINED_EXP_Short + "',
                    // lookup.UNDEFINED_EXP_Short = '" +
                    // lookupHashKey.UNDEFINED_EXP_Short + "',
                    // lookup.DEFINED_EXP_String = '" +
                    // lookupHashKey.DEFINED_EXP_String + "',
                    // lookup.UNDEFINED_EXP_String = '" +
                    // lookupHashKey.UNDEFINED_EXP_String + "',
                    // lookup.DEFINED_EXP_List = '" +
                    // lookupHashKey.DEFINED_EXP_List + "',
                    // lookup.UNDEFINED_EXP_List = '" +
                    // lookupHashKey.UNDEFINED_EXP_List + "'");
                } // G 071

                lookupStruct lookup = null;

                lookupStruct fromLookup_lookup = null;
                lookup = lookupDefault;

                if (tHash_Lookup_lookup.hasNext()) { // G 099

                    fromLookup_lookup = tHash_Lookup_lookup.next();

                } // G 099

                if (fromLookup_lookup != null) {
                    lookup = fromLookup_lookup;
                }

                // { // Dummy bracket to open block for "main" ##(1)##

                // ###############################
                { // start of Var scope

                    // ###############################
                    // # Vars tables
                    // ###############################
                    // ###############################
                    // # Output tables

                    out = null;

                    // # Output table : 'out'
                    out_tmp.DEFINED_EXP_boolean = main.DEFINED_EXP_boolean;
                    out_tmp.DEFINED_EXP_Boolean = main.DEFINED_EXP_Boolean;
                    out_tmp.UNDEFINED_EXP_Boolean = main.UNDEFINED_EXP_Boolean;
                    out_tmp.DEFINED_EXP_byte = main.DEFINED_EXP_byte;
                    out_tmp.DEFINED_EXP_Byte = main.DEFINED_EXP_Byte;
                    out_tmp.UNDEFINED_EXP_Byte = main.UNDEFINED_EXP_Byte;
                    out_tmp.DEFINED_EXP_byte_array = main.DEFINED_EXP_byte_array;
                    out_tmp.DEFINED_EXP_byte_array_nullable = main.DEFINED_EXP_byte_array_nullable;
                    out_tmp.DEFINED_EXP_char = main.DEFINED_EXP_char;
                    out_tmp.DEFINED_EXP_Character = main.DEFINED_EXP_Character;
                    out_tmp.UNDEFINED_EXP_Character = main.UNDEFINED_EXP_Character;
                    out_tmp.DEFINED_EXP_Date = main.DEFINED_EXP_Date;
                    out_tmp.UNDEFINED_EXP_Date = main.UNDEFINED_EXP_Date;
                    out_tmp.DEFINED_EXP_double = main.DEFINED_EXP_double;
                    out_tmp.DEFINED_EXP_Double = main.DEFINED_EXP_Double;
                    out_tmp.UNDEFINED_EXP_Double = main.UNDEFINED_EXP_Double;
                    out_tmp.DEFINED_EXP_BigDecimal_1 = main.DEFINED_EXP_BigDecimal;
                    out_tmp.UNDEFINED_EXP_BigDecimal_1 = main.UNDEFINED_EXP_BigDecimal;
                    out_tmp.DEFINED_EXP_int = main.DEFINED_EXP_int;
                    out_tmp.DEFINED_EXP_Integer = main.DEFINED_EXP_Integer;
                    out_tmp.UNDEFINED_EXP_Integer = main.UNDEFINED_EXP_Integer;
                    out_tmp.DEFINED_EXP_float = main.DEFINED_EXP_float;
                    out_tmp.DEFINED_EXP_Float = main.DEFINED_EXP_Float;
                    out_tmp.UNDEFINED_EXP_Float = main.UNDEFINED_EXP_Float;
                    out_tmp.DEFINED_EXP_long = main.DEFINED_EXP_long;
                    out_tmp.DEFINED_EXP_Long = main.DEFINED_EXP_Long;
                    out_tmp.UNDEFINED_EXP_Long = main.UNDEFINED_EXP_Long;
                    out_tmp.DEFINED_EXP_Object = main.DEFINED_EXP_Object;
                    out_tmp.UNDEFINED_EXP_Object = main.UNDEFINED_EXP_Object;
                    out_tmp.DEFINED_EXP_short = main.DEFINED_EXP_short;
                    out_tmp.DEFINED_EXP_Short = main.DEFINED_EXP_Short;
                    out_tmp.UNDEFINED_EXP_Short = main.UNDEFINED_EXP_Short;
                    out_tmp.DEFINED_EXP_String = main.DEFINED_EXP_String;
                    out_tmp.UNDEFINED_EXP_String = main.UNDEFINED_EXP_String;
                    out_tmp.DEFINED_EXP_List = main.DEFINED_EXP_List;
                    out_tmp.UNDEFINED_EXP_List = main.UNDEFINED_EXP_List;
                    out_tmp.DEFINED_EXP_boolean_1 = lookup.DEFINED_EXP_boolean;
                    out_tmp.DEFINED_EXP_Boolean_1 = lookup.DEFINED_EXP_Boolean;
                    out_tmp.UNDEFINED_EXP_Boolean_1 = lookup.UNDEFINED_EXP_Boolean;
                    out_tmp.DEFINED_EXP_byte_1 = lookup.DEFINED_EXP_byte;
                    out_tmp.DEFINED_EXP_Byte_1 = lookup.DEFINED_EXP_Byte;
                    out_tmp.UNDEFINED_EXP_Byte_1 = lookup.UNDEFINED_EXP_Byte;
                    out_tmp.DEFINED_EXP_byte_array_1 = lookup.DEFINED_EXP_byte_array;
                    out_tmp.DEFINED_EXP_byte_array_nullable_1 = lookup.DEFINED_EXP_byte_array_nullable;
                    out_tmp.DEFINED_EXP_char_1 = lookup.DEFINED_EXP_char;
                    out_tmp.DEFINED_EXP_Character_1 = lookup.DEFINED_EXP_Character;
                    out_tmp.UNDEFINED_EXP_Character_1 = lookup.UNDEFINED_EXP_Character;
                    out_tmp.DEFINED_EXP_Date_1 = lookup.DEFINED_EXP_Date;
                    out_tmp.UNDEFINED_EXP_Date_1 = lookup.UNDEFINED_EXP_Date;
                    out_tmp.DEFINED_EXP_double_1 = lookup.DEFINED_EXP_double;
                    out_tmp.DEFINED_EXP_Double_1 = lookup.DEFINED_EXP_Double;
                    out_tmp.UNDEFINED_EXP_Double_1 = lookup.UNDEFINED_EXP_Double;
                    out_tmp.DEFINED_EXP_BigDecimal = lookup.DEFINED_EXP_BigDecimal;
                    out_tmp.UNDEFINED_EXP_BigDecimal = lookup.UNDEFINED_EXP_BigDecimal;
                    out_tmp.DEFINED_EXP_int_1 = lookup.DEFINED_EXP_int;
                    out_tmp.DEFINED_EXP_Integer_1 = lookup.DEFINED_EXP_Integer;
                    out_tmp.UNDEFINED_EXP_Integer_1 = lookup.UNDEFINED_EXP_Integer;
                    out_tmp.DEFINED_EXP_float_1 = lookup.DEFINED_EXP_float;
                    out_tmp.DEFINED_EXP_Float_1 = lookup.DEFINED_EXP_Float;
                    out_tmp.UNDEFINED_EXP_Float_1 = lookup.UNDEFINED_EXP_Float;
                    out_tmp.DEFINED_EXP_long_1 = lookup.DEFINED_EXP_long;
                    out_tmp.DEFINED_EXP_Long_1 = lookup.DEFINED_EXP_Long;
                    out_tmp.UNDEFINED_EXP_Long_1 = lookup.UNDEFINED_EXP_Long;
                    out_tmp.DEFINED_EXP_Object_1 = lookup.DEFINED_EXP_Object;
                    out_tmp.UNDEFINED_EXP_Object_1 = lookup.UNDEFINED_EXP_Object;
                    out_tmp.DEFINED_EXP_short_1 = lookup.DEFINED_EXP_short;
                    out_tmp.DEFINED_EXP_Short_1 = lookup.DEFINED_EXP_Short;
                    out_tmp.UNDEFINED_EXP_Short_1 = lookup.UNDEFINED_EXP_Short;
                    out_tmp.DEFINED_EXP_String_1 = lookup.DEFINED_EXP_String;
                    out_tmp.UNDEFINED_EXP_String_1 = lookup.UNDEFINED_EXP_String;
                    out_tmp.DEFINED_EXP_List_1 = lookup.DEFINED_EXP_List;
                    out_tmp.UNDEFINED_EXP_List_1 = lookup.UNDEFINED_EXP_List;
                    out = out_tmp;
                    // ###############################

                } // end of Var scope

                rejectedInnerJoin_tMap_1 = false;

                /**
                 * [tMap_1 main ] stop
                 */
                // Start of branch "out"
                if (out != null) {

                    /***********************************************************
                     * / [tMap_2 main ] start
                     */

                    currentComponent = "tMap_2";

                    // ###############################
                    // # Input tables (lookups)
                    boolean rejectedInnerJoin_tMap_2 = false;
                    boolean mainRowRejected_tMap_2 = false;

                    // { // Dummy bracket to open block for "out" ##(1)##

                    // ###############################
                    { // start of Var scope

                        // ###############################
                        // # Vars tables
                        // ###############################
                        // ###############################
                        // # Output tables

                        out2 = null;

                        // # Output table : 'out2'
                        out2_tmp.DEFINED_EXP_boolean = out.DEFINED_EXP_boolean;
                        out2_tmp.DEFINED_EXP_Boolean = out.DEFINED_EXP_Boolean;
                        out2_tmp.UNDEFINED_EXP_Boolean = out.UNDEFINED_EXP_Boolean;
                        out2_tmp.DEFINED_EXP_byte = out.DEFINED_EXP_byte;
                        out2_tmp.DEFINED_EXP_Byte = out.DEFINED_EXP_Byte;
                        out2_tmp.UNDEFINED_EXP_Byte = out.UNDEFINED_EXP_Byte;
                        out2_tmp.DEFINED_EXP_byte_array = java.util.Arrays
                                .toString(out.DEFINED_EXP_byte_array);
                        out2_tmp.DEFINED_EXP_byte_array_nullable = out.DEFINED_EXP_byte_array_nullable;
                        out2_tmp.DEFINED_EXP_char = out.DEFINED_EXP_char;
                        out2_tmp.DEFINED_EXP_Character = out.DEFINED_EXP_Character;
                        out2_tmp.UNDEFINED_EXP_Character = out.UNDEFINED_EXP_Character;
                        out2_tmp.DEFINED_EXP_Date = TalendDate.formatDate(
                                "dd-MM-yyyy", out.DEFINED_EXP_Date);
                        out2_tmp.UNDEFINED_EXP_Date = out.UNDEFINED_EXP_Date;
                        out2_tmp.DEFINED_EXP_double = out.DEFINED_EXP_double;
                        out2_tmp.DEFINED_EXP_Double = out.DEFINED_EXP_Double;
                        out2_tmp.UNDEFINED_EXP_Double = out.UNDEFINED_EXP_Double;
                        out2_tmp.DEFINED_EXP_BigDecimal_1 = out.DEFINED_EXP_BigDecimal_1;
                        out2_tmp.UNDEFINED_EXP_BigDecimal_1 = out.UNDEFINED_EXP_BigDecimal_1;
                        out2_tmp.DEFINED_EXP_int = out.DEFINED_EXP_int;
                        out2_tmp.DEFINED_EXP_Integer = out.DEFINED_EXP_Integer;
                        out2_tmp.UNDEFINED_EXP_Integer = out.UNDEFINED_EXP_Integer;
                        out2_tmp.DEFINED_EXP_float = out.DEFINED_EXP_float;
                        out2_tmp.DEFINED_EXP_Float = out.DEFINED_EXP_Float;
                        out2_tmp.UNDEFINED_EXP_Float = out.UNDEFINED_EXP_Float;
                        out2_tmp.DEFINED_EXP_long = out.DEFINED_EXP_long;
                        out2_tmp.DEFINED_EXP_Long = out.DEFINED_EXP_Long;
                        out2_tmp.UNDEFINED_EXP_Long = out.UNDEFINED_EXP_Long;
                        out2_tmp.DEFINED_EXP_Object = out.DEFINED_EXP_Object;
                        out2_tmp.UNDEFINED_EXP_Object = out.UNDEFINED_EXP_Object;
                        out2_tmp.DEFINED_EXP_short = out.DEFINED_EXP_short;
                        out2_tmp.DEFINED_EXP_Short = out.DEFINED_EXP_Short;
                        out2_tmp.UNDEFINED_EXP_Short = out.UNDEFINED_EXP_Short;
                        out2_tmp.DEFINED_EXP_String = out.DEFINED_EXP_String;
                        out2_tmp.UNDEFINED_EXP_String = out.UNDEFINED_EXP_String;
                        out2_tmp.DEFINED_EXP_List = out.DEFINED_EXP_List;
                        out2_tmp.UNDEFINED_EXP_List = out.UNDEFINED_EXP_List;
                        out2_tmp.DEFINED_EXP_boolean_1 = out.DEFINED_EXP_boolean_1;
                        out2_tmp.DEFINED_EXP_Boolean_1 = out.DEFINED_EXP_Boolean_1;
                        out2_tmp.UNDEFINED_EXP_Boolean_1 = out.UNDEFINED_EXP_Boolean_1;
                        out2_tmp.DEFINED_EXP_byte_1 = out.DEFINED_EXP_byte_1;
                        out2_tmp.DEFINED_EXP_Byte_1 = out.DEFINED_EXP_Byte_1;
                        out2_tmp.UNDEFINED_EXP_Byte_1 = out.UNDEFINED_EXP_Byte_1;
                        out2_tmp.DEFINED_EXP_byte_array_1 = java.util.Arrays
                                .toString(out.DEFINED_EXP_byte_array_1);
                        out2_tmp.DEFINED_EXP_byte_array_nullable_1 = out.DEFINED_EXP_byte_array_nullable_1;
                        out2_tmp.DEFINED_EXP_char_1 = out.DEFINED_EXP_char_1;
                        out2_tmp.DEFINED_EXP_Character_1 = out.DEFINED_EXP_Character_1;
                        out2_tmp.UNDEFINED_EXP_Character_1 = out.UNDEFINED_EXP_Character_1;
                        out2_tmp.DEFINED_EXP_Date_1 = TalendDate.formatDate(
                                "dd-MM-yyyy", out.DEFINED_EXP_Date_1);
                        out2_tmp.UNDEFINED_EXP_Date_1 = out.UNDEFINED_EXP_Date_1;
                        out2_tmp.DEFINED_EXP_double_1 = out.DEFINED_EXP_double_1;
                        out2_tmp.DEFINED_EXP_Double_1 = out.DEFINED_EXP_Double_1;
                        out2_tmp.UNDEFINED_EXP_Double_1 = out.UNDEFINED_EXP_Double_1;
                        out2_tmp.DEFINED_EXP_BigDecimal = out.DEFINED_EXP_BigDecimal;
                        out2_tmp.UNDEFINED_EXP_BigDecimal = out.UNDEFINED_EXP_BigDecimal;
                        out2_tmp.DEFINED_EXP_int_1 = out.DEFINED_EXP_int_1;
                        out2_tmp.DEFINED_EXP_Integer_1 = out.DEFINED_EXP_Integer_1;
                        out2_tmp.UNDEFINED_EXP_Integer_1 = out.UNDEFINED_EXP_Integer_1;
                        out2_tmp.DEFINED_EXP_float_1 = out.DEFINED_EXP_float_1;
                        out2_tmp.DEFINED_EXP_Float_1 = out.DEFINED_EXP_Float_1;
                        out2_tmp.UNDEFINED_EXP_Float_1 = out.UNDEFINED_EXP_Float_1;
                        out2_tmp.DEFINED_EXP_long_1 = out.DEFINED_EXP_long_1;
                        out2_tmp.DEFINED_EXP_Long_1 = out.DEFINED_EXP_Long_1;
                        out2_tmp.UNDEFINED_EXP_Long_1 = out.UNDEFINED_EXP_Long_1;
                        out2_tmp.DEFINED_EXP_Object_1 = out.DEFINED_EXP_Object_1;
                        out2_tmp.UNDEFINED_EXP_Object_1 = out.UNDEFINED_EXP_Object_1;
                        out2_tmp.DEFINED_EXP_short_1 = out.DEFINED_EXP_short_1;
                        out2_tmp.DEFINED_EXP_Short_1 = out.DEFINED_EXP_Short_1;
                        out2_tmp.UNDEFINED_EXP_Short_1 = out.UNDEFINED_EXP_Short_1;
                        out2_tmp.DEFINED_EXP_String_1 = out.DEFINED_EXP_String_1;
                        out2_tmp.UNDEFINED_EXP_String_1 = out.UNDEFINED_EXP_String_1;
                        out2_tmp.DEFINED_EXP_List_1 = out.DEFINED_EXP_List_1;
                        out2_tmp.UNDEFINED_EXP_List_1 = out.UNDEFINED_EXP_List_1;
                        out2 = out2_tmp;
                        // ###############################

                    } // end of Var scope

                    rejectedInnerJoin_tMap_2 = false;

                    /**
                     * [tMap_2 main ] stop
                     */
                    // Start of branch "out2"
                    if (out2 != null) {

                        /*******************************************************
                         * / [tFileOutputDelimited_2 main ] start
                         */

                        currentComponent = "tFileOutputDelimited_2";

                        StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_boolean

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Boolean != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Boolean

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Boolean != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Boolean

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_byte

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Byte != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Byte

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Byte != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Byte

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_byte_array != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_byte_array

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_byte_array_nullable != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_byte_array_nullable

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_char

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Character != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Character

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Character != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Character

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Date != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Date

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Date != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Date

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_double

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Double != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Double

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Double != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Double

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_BigDecimal_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_BigDecimal_1.doubleValue()

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_BigDecimal_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_BigDecimal_1.doubleValue()

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_int

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Integer != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Integer

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Integer != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Integer

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_float

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Float != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Float

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Float != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Float

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_long

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Long != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Long

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Long != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Long

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Object != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Object

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Object != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Object

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_short

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Short != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Short

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Short != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Short

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_String != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_String

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_String != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_String

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_List != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_List

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_List != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_List

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_boolean_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Boolean_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Boolean_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Boolean_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Boolean_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_byte_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Byte_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Byte_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Byte_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Byte_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_byte_array_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_byte_array_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_byte_array_nullable_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_byte_array_nullable_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_char_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Character_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Character_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Character_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Character_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Date_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Date_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Date_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Date_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_double_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Double_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Double_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Double_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Double_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_BigDecimal != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_BigDecimal.doubleValue()

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_BigDecimal != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_BigDecimal.doubleValue()

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_int_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Integer_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Integer_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Integer_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Integer_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_float_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Float_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Float_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Float_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Float_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_long_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Long_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Long_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Long_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Long_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Object_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Object_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Object_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Object_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        sb_tFileOutputDelimited_2.append(

                        out2.DEFINED_EXP_short_1

                        );

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_Short_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_Short_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_Short_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_Short_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_String_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_String_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_String_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_String_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.DEFINED_EXP_List_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.DEFINED_EXP_List_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_tFileOutputDelimited_2);

                        if (out2.UNDEFINED_EXP_List_1 != null) {

                            sb_tFileOutputDelimited_2.append(

                            out2.UNDEFINED_EXP_List_1

                            );

                        }

                        sb_tFileOutputDelimited_2
                                .append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2
                                .write(sb_tFileOutputDelimited_2.toString());

                        nb_line_tFileOutputDelimited_2++;

                        /**
                         * [tFileOutputDelimited_2 main ] stop
                         */

                    } // End of branch "out2"

                } // End of branch "out"

                /***************************************************************
                 * / [tFixedFlowInput_2 end ] start
                 */

                currentComponent = "tFixedFlowInput_2";

            }

            ok_Hash.put("tFixedFlowInput_2", true);
            end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

            /**
             * [tFixedFlowInput_2 end ] stop
             */
            /*******************************************************************
             * / [tMap_1 end ] start
             */

            currentComponent = "tMap_1";

            // ###############################
            // # Lookup hashes releasing
            tHash_Lookup_lookup.endGet();

            globalMap.remove("tHash_Lookup_lookup");

            // ###############################

            ok_Hash.put("tMap_1", true);
            end_Hash.put("tMap_1", System.currentTimeMillis());

            /**
             * [tMap_1 end ] stop
             */
            /*******************************************************************
             * / [tMap_2 end ] start
             */

            currentComponent = "tMap_2";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMap_2", true);
            end_Hash.put("tMap_2", System.currentTimeMillis());

            /**
             * [tMap_2 end ] stop
             */
            /*******************************************************************
             * / [tFileOutputDelimited_2 end ] start
             */

            currentComponent = "tFileOutputDelimited_2";

            outtFileOutputDelimited_2.close();
            globalMap.put("tFileOutputDelimited_2_NB_LINE",
                    nb_line_tFileOutputDelimited_2);

            ok_Hash.put("tFileOutputDelimited_2", true);
            end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_2 end ] stop
             */

            tFileCompare_1Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        finally {
            // free memory for "tMap_1"
            globalMap.put("tHash_Lookup_lookup", null);
            System.gc();
        }

    }

    public void tFileCompare_1Process() throws TalendException {
        try {

            /*******************************************************************
             * / [tFileCompare_1 begin ] start
             */

            ok_Hash.put("tFileCompare_1", false);
            start_Hash.put("tFileCompare_1", System.currentTimeMillis());
            currentComponent = "tFileCompare_1";

            /**
             * [tFileCompare_1 begin ] stop
             */
            /*******************************************************************
             * / [tFileCompare_1 main ] start
             */

            currentComponent = "tFileCompare_1";

            boolean result_tFileCompare_1 = true;

            if (result_tFileCompare_1) {

                java.io.BufferedReader file_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader(context.data_output_dir
                                + context.current_job_dir + "out.csv"));
                java.io.BufferedReader fileRef_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader((String) context
                                .getProperty("data_dir")
                                + context.current_job_dir + "ref/out.csv"));
                String content_tFileCompare_1 = null, contentRef_tFileCompare_1 = null;
                while ((content_tFileCompare_1 = file_tFileCompare_1.readLine()) != null
                        && (contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                                .readLine()) != null) {
                    if (content_tFileCompare_1
                            .compareTo(contentRef_tFileCompare_1) != 0) {
                        result_tFileCompare_1 = false;
                        break;
                    }
                }

                // Check if files has a different number of lines:
                if (content_tFileCompare_1 == null) {
                    // This step is done in case of the while upper ignore
                    // second part:
                    contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                            .readLine();
                }
                if (content_tFileCompare_1 != null
                        || contentRef_tFileCompare_1 != null) {
                    result_tFileCompare_1 = false;
                }

                file_tFileCompare_1.close();
                fileRef_tFileCompare_1.close();

            }

            String messagetFileCompare_1 = "";
            if (result_tFileCompare_1) {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent
                        + "] OK";

            } else {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent
                        + "] Files differ, DIFFERENT";
            }
            globalMap.put("tFileCompare_1_DIFFERENCE", result_tFileCompare_1);

            /**
             * [tFileCompare_1 main ] stop
             */
            /*******************************************************************
             * / [tFileCompare_1 end ] start
             */

            currentComponent = "tFileCompare_1";

            ok_Hash.put("tFileCompare_1", true);
            end_Hash.put("tFileCompare_1", System.currentTimeMillis());

            /**
             * [tFileCompare_1 end ] stop
             */
            tAssert_1Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public void tAssert_1Process() throws TalendException {
        try {
            /*******************************************************************
             * / [tAssert_1 begin ] start
             */

            ok_Hash.put("tAssert_1", false);
            start_Hash.put("tAssert_1", System.currentTimeMillis());
            currentComponent = "tAssert_1";

            /**
             * [tAssert_1 begin ] stop
             */
            /*******************************************************************
             * / [tAssert_1 main ] start
             */

            currentComponent = "tAssert_1";

            if (((Boolean) globalMap.get("tFileCompare_1_DIFFERENCE"))) {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                        "tAssert_1", "Ok", "--", "Data out validation");
                tAssertCatcher_1Process();
            } else {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                        "tAssert_1", "Failed", "Test logically failed",
                        "Data out validation");
                tAssertCatcher_1Process();
            }

            /**
             * [tAssert_1 main ] stop
             */
            /*******************************************************************
             * / [tAssert_1 end ] start
             */

            currentComponent = "tAssert_1";

            ok_Hash.put("tAssert_1", true);
            end_Hash.put("tAssert_1", System.currentTimeMillis());

            /**
             * [tAssert_1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    static class lookupStruct implements
            routines.system.IPersistableComparableLookupRow<lookupStruct> {

        static byte[] commonByteArray = new byte[0];
        private static final int DEFAULT_HASHCODE = 1;
        private static final int PRIME = 31;
        private int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        boolean DEFINED_EXP_boolean;

        Boolean DEFINED_EXP_Boolean;

        Boolean UNDEFINED_EXP_Boolean;

        byte DEFINED_EXP_byte;

        Byte DEFINED_EXP_Byte;

        Byte UNDEFINED_EXP_Byte;

        byte[] DEFINED_EXP_byte_array;

        byte[] DEFINED_EXP_byte_array_nullable;

        char DEFINED_EXP_char;

        Character DEFINED_EXP_Character;

        Character UNDEFINED_EXP_Character;

        java.util.Date DEFINED_EXP_Date;

        java.util.Date UNDEFINED_EXP_Date;

        double DEFINED_EXP_double;

        Double DEFINED_EXP_Double;

        Double UNDEFINED_EXP_Double;

        BigDecimal DEFINED_EXP_BigDecimal;

        BigDecimal UNDEFINED_EXP_BigDecimal;

        int DEFINED_EXP_int;

        Integer DEFINED_EXP_Integer;

        Integer UNDEFINED_EXP_Integer;

        float DEFINED_EXP_float;

        Float DEFINED_EXP_Float;

        Float UNDEFINED_EXP_Float;

        long DEFINED_EXP_long;

        Long DEFINED_EXP_Long;

        Long UNDEFINED_EXP_Long;

        Object DEFINED_EXP_Object;

        Object UNDEFINED_EXP_Object;

        short DEFINED_EXP_short;

        Short DEFINED_EXP_Short;

        Short UNDEFINED_EXP_Short;

        String DEFINED_EXP_String;

        String UNDEFINED_EXP_String;

        List DEFINED_EXP_List;

        List UNDEFINED_EXP_List;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                System.out.println(result);result = prime * result
                        + (this.DEFINED_EXP_boolean ? 1231 : 1237);

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Boolean == null) ? 0
                                : this.DEFINED_EXP_Boolean.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Boolean == null) ? 0
                                : this.UNDEFINED_EXP_Boolean.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_byte;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Byte == null) ? 0
                                : this.DEFINED_EXP_Byte.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Byte == null) ? 0
                                : this.UNDEFINED_EXP_Byte.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_byte_array == null) ? 0
                                : ArrayUtils.hashCode(this.DEFINED_EXP_byte_array));
                ;
                

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_byte_array_nullable == null) ? 0
                                : this.DEFINED_EXP_byte_array_nullable
                                        .hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_char;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Character == null) ? 0
                                : this.DEFINED_EXP_Character.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Character == null) ? 0
                                : this.UNDEFINED_EXP_Character.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Date == null) ? 0
                                : this.DEFINED_EXP_Date.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Date == null) ? 0
                                : this.UNDEFINED_EXP_Date.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_double;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Double == null) ? 0
                                : this.DEFINED_EXP_Double.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Double == null) ? 0
                                : this.UNDEFINED_EXP_Double.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_BigDecimal == null) ? 0
                                : this.DEFINED_EXP_BigDecimal.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_BigDecimal == null) ? 0
                                : this.UNDEFINED_EXP_BigDecimal.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_int;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Integer == null) ? 0
                                : this.DEFINED_EXP_Integer.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Integer == null) ? 0
                                : this.UNDEFINED_EXP_Integer.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_float;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Float == null) ? 0
                                : this.DEFINED_EXP_Float.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Float == null) ? 0
                                : this.UNDEFINED_EXP_Float.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_long;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Long == null) ? 0
                                : this.DEFINED_EXP_Long.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Long == null) ? 0
                                : this.UNDEFINED_EXP_Long.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Object == null) ? 0
                                : this.DEFINED_EXP_Object.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Object == null) ? 0
                                : this.UNDEFINED_EXP_Object.hashCode());

                System.out.println(result);result = prime * result + (int) this.DEFINED_EXP_short;

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_Short == null) ? 0
                                : this.DEFINED_EXP_Short.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_Short == null) ? 0
                                : this.UNDEFINED_EXP_Short.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_String == null) ? 0
                                : this.DEFINED_EXP_String.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_String == null) ? 0
                                : this.UNDEFINED_EXP_String.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.DEFINED_EXP_List == null) ? 0
                                : this.DEFINED_EXP_List.hashCode());

                System.out.println(result);result = prime
                        * result
                        + ((this.UNDEFINED_EXP_List == null) ? 0
                                : this.UNDEFINED_EXP_List.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            System.out.println(this);
            System.out.println(hashCode);
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookupStruct other = (lookupStruct) obj;

            if (this.DEFINED_EXP_boolean != other.DEFINED_EXP_boolean)
                return false;

            if (this.DEFINED_EXP_Boolean == null) {
                if (other.DEFINED_EXP_Boolean != null)
                    return false;
            } else if (!this.DEFINED_EXP_Boolean
                    .equals(other.DEFINED_EXP_Boolean))
                return false;

            if (this.UNDEFINED_EXP_Boolean == null) {
                if (other.UNDEFINED_EXP_Boolean != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Boolean
                    .equals(other.UNDEFINED_EXP_Boolean))
                return false;

            if (this.DEFINED_EXP_byte != other.DEFINED_EXP_byte)
                return false;

            if (this.DEFINED_EXP_Byte == null) {
                if (other.DEFINED_EXP_Byte != null)
                    return false;
            } else if (!this.DEFINED_EXP_Byte.equals(other.DEFINED_EXP_Byte))
                return false;

            if (this.UNDEFINED_EXP_Byte == null) {
                if (other.UNDEFINED_EXP_Byte != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Byte
                    .equals(other.UNDEFINED_EXP_Byte))
                return false;

            if (this.DEFINED_EXP_byte_array == null) {
                if (other.DEFINED_EXP_byte_array != null)
                    return false;
            } else if (!ArrayUtils.isEquals(this.DEFINED_EXP_byte_array, other.DEFINED_EXP_byte_array))
                return false;

            if (this.DEFINED_EXP_byte_array_nullable == null) {
                if (other.DEFINED_EXP_byte_array_nullable != null)
                    return false;
            } else if (!this.DEFINED_EXP_byte_array_nullable
                    .equals(other.DEFINED_EXP_byte_array_nullable))
                return false;

            if (this.DEFINED_EXP_char != other.DEFINED_EXP_char)
                return false;

            if (this.DEFINED_EXP_Character == null) {
                if (other.DEFINED_EXP_Character != null)
                    return false;
            } else if (!this.DEFINED_EXP_Character
                    .equals(other.DEFINED_EXP_Character))
                return false;

            if (this.UNDEFINED_EXP_Character == null) {
                if (other.UNDEFINED_EXP_Character != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Character
                    .equals(other.UNDEFINED_EXP_Character))
                return false;

            if (this.DEFINED_EXP_Date == null) {
                if (other.DEFINED_EXP_Date != null)
                    return false;
            } else if (!this.DEFINED_EXP_Date.equals(other.DEFINED_EXP_Date))
                return false;

            if (this.UNDEFINED_EXP_Date == null) {
                if (other.UNDEFINED_EXP_Date != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Date
                    .equals(other.UNDEFINED_EXP_Date))
                return false;

            if (this.DEFINED_EXP_double != other.DEFINED_EXP_double)
                return false;

            if (this.DEFINED_EXP_Double == null) {
                if (other.DEFINED_EXP_Double != null)
                    return false;
            } else if (!this.DEFINED_EXP_Double
                    .equals(other.DEFINED_EXP_Double))
                return false;

            if (this.UNDEFINED_EXP_Double == null) {
                if (other.UNDEFINED_EXP_Double != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Double
                    .equals(other.UNDEFINED_EXP_Double))
                return false;

            if (this.DEFINED_EXP_BigDecimal == null) {
                if (other.DEFINED_EXP_BigDecimal != null)
                    return false;
            } else if (!this.DEFINED_EXP_BigDecimal
                    .equals(other.DEFINED_EXP_BigDecimal))
                return false;

            if (this.UNDEFINED_EXP_BigDecimal == null) {
                if (other.UNDEFINED_EXP_BigDecimal != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_BigDecimal
                    .equals(other.UNDEFINED_EXP_BigDecimal))
                return false;

            if (this.DEFINED_EXP_int != other.DEFINED_EXP_int)
                return false;

            if (this.DEFINED_EXP_Integer == null) {
                if (other.DEFINED_EXP_Integer != null)
                    return false;
            } else if (!this.DEFINED_EXP_Integer
                    .equals(other.DEFINED_EXP_Integer))
                return false;

            if (this.UNDEFINED_EXP_Integer == null) {
                if (other.UNDEFINED_EXP_Integer != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Integer
                    .equals(other.UNDEFINED_EXP_Integer))
                return false;

            if (this.DEFINED_EXP_float != other.DEFINED_EXP_float)
                return false;

            if (this.DEFINED_EXP_Float == null) {
                if (other.DEFINED_EXP_Float != null)
                    return false;
            } else if (!this.DEFINED_EXP_Float.equals(other.DEFINED_EXP_Float))
                return false;

            if (this.UNDEFINED_EXP_Float == null) {
                if (other.UNDEFINED_EXP_Float != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Float
                    .equals(other.UNDEFINED_EXP_Float))
                return false;

            if (this.DEFINED_EXP_long != other.DEFINED_EXP_long)
                return false;

            if (this.DEFINED_EXP_Long == null) {
                if (other.DEFINED_EXP_Long != null)
                    return false;
            } else if (!this.DEFINED_EXP_Long.equals(other.DEFINED_EXP_Long))
                return false;

            if (this.UNDEFINED_EXP_Long == null) {
                if (other.UNDEFINED_EXP_Long != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Long
                    .equals(other.UNDEFINED_EXP_Long))
                return false;

            if (this.DEFINED_EXP_Object == null) {
                if (other.DEFINED_EXP_Object != null)
                    return false;
            } else if (!this.DEFINED_EXP_Object
                    .equals(other.DEFINED_EXP_Object))
                return false;

            if (this.UNDEFINED_EXP_Object == null) {
                if (other.UNDEFINED_EXP_Object != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Object
                    .equals(other.UNDEFINED_EXP_Object))
                return false;

            if (this.DEFINED_EXP_short != other.DEFINED_EXP_short)
                return false;

            if (this.DEFINED_EXP_Short == null) {
                if (other.DEFINED_EXP_Short != null)
                    return false;
            } else if (!this.DEFINED_EXP_Short.equals(other.DEFINED_EXP_Short))
                return false;

            if (this.UNDEFINED_EXP_Short == null) {
                if (other.UNDEFINED_EXP_Short != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_Short
                    .equals(other.UNDEFINED_EXP_Short))
                return false;

            if (this.DEFINED_EXP_String == null) {
                if (other.DEFINED_EXP_String != null)
                    return false;
            } else if (!this.DEFINED_EXP_String
                    .equals(other.DEFINED_EXP_String))
                return false;

            if (this.UNDEFINED_EXP_String == null) {
                if (other.UNDEFINED_EXP_String != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_String
                    .equals(other.UNDEFINED_EXP_String))
                return false;

            if (this.DEFINED_EXP_List == null) {
                if (other.DEFINED_EXP_List != null)
                    return false;
            } else if (!this.DEFINED_EXP_List.equals(other.DEFINED_EXP_List))
                return false;

            if (this.UNDEFINED_EXP_List == null) {
                if (other.UNDEFINED_EXP_List != null)
                    return false;
            } else if (!this.UNDEFINED_EXP_List
                    .equals(other.UNDEFINED_EXP_List))
                return false;

            return true;
        }

        public void copyDataTo(lookupStruct other) {

            other.DEFINED_EXP_boolean = this.DEFINED_EXP_boolean;
            other.DEFINED_EXP_Boolean = this.DEFINED_EXP_Boolean;
            other.UNDEFINED_EXP_Boolean = this.UNDEFINED_EXP_Boolean;
            other.DEFINED_EXP_byte = this.DEFINED_EXP_byte;
            other.DEFINED_EXP_Byte = this.DEFINED_EXP_Byte;
            other.UNDEFINED_EXP_Byte = this.UNDEFINED_EXP_Byte;
            other.DEFINED_EXP_byte_array = this.DEFINED_EXP_byte_array;
            other.DEFINED_EXP_byte_array_nullable = this.DEFINED_EXP_byte_array_nullable;
            other.DEFINED_EXP_char = this.DEFINED_EXP_char;
            other.DEFINED_EXP_Character = this.DEFINED_EXP_Character;
            other.UNDEFINED_EXP_Character = this.UNDEFINED_EXP_Character;
            other.DEFINED_EXP_Date = this.DEFINED_EXP_Date;
            other.UNDEFINED_EXP_Date = this.UNDEFINED_EXP_Date;
            other.DEFINED_EXP_double = this.DEFINED_EXP_double;
            other.DEFINED_EXP_Double = this.DEFINED_EXP_Double;
            other.UNDEFINED_EXP_Double = this.UNDEFINED_EXP_Double;
            other.DEFINED_EXP_BigDecimal = this.DEFINED_EXP_BigDecimal;
            other.UNDEFINED_EXP_BigDecimal = this.UNDEFINED_EXP_BigDecimal;
            other.DEFINED_EXP_int = this.DEFINED_EXP_int;
            other.DEFINED_EXP_Integer = this.DEFINED_EXP_Integer;
            other.UNDEFINED_EXP_Integer = this.UNDEFINED_EXP_Integer;
            other.DEFINED_EXP_float = this.DEFINED_EXP_float;
            other.DEFINED_EXP_Float = this.DEFINED_EXP_Float;
            other.UNDEFINED_EXP_Float = this.UNDEFINED_EXP_Float;
            other.DEFINED_EXP_long = this.DEFINED_EXP_long;
            other.DEFINED_EXP_Long = this.DEFINED_EXP_Long;
            other.UNDEFINED_EXP_Long = this.UNDEFINED_EXP_Long;
            other.DEFINED_EXP_Object = this.DEFINED_EXP_Object;
            other.UNDEFINED_EXP_Object = this.UNDEFINED_EXP_Object;
            other.DEFINED_EXP_short = this.DEFINED_EXP_short;
            other.DEFINED_EXP_Short = this.DEFINED_EXP_Short;
            other.UNDEFINED_EXP_Short = this.UNDEFINED_EXP_Short;
            other.DEFINED_EXP_String = this.DEFINED_EXP_String;
            other.UNDEFINED_EXP_String = this.UNDEFINED_EXP_String;
            other.DEFINED_EXP_List = this.DEFINED_EXP_List;
            other.UNDEFINED_EXP_List = this.UNDEFINED_EXP_List;

        }

        public void copyKeysDataTo(lookupStruct other) {

            other.DEFINED_EXP_boolean = this.DEFINED_EXP_boolean;
            other.DEFINED_EXP_Boolean = this.DEFINED_EXP_Boolean;
            other.UNDEFINED_EXP_Boolean = this.UNDEFINED_EXP_Boolean;
            other.DEFINED_EXP_byte = this.DEFINED_EXP_byte;
            other.DEFINED_EXP_Byte = this.DEFINED_EXP_Byte;
            other.UNDEFINED_EXP_Byte = this.UNDEFINED_EXP_Byte;
            other.DEFINED_EXP_byte_array = this.DEFINED_EXP_byte_array;
            other.DEFINED_EXP_byte_array_nullable = this.DEFINED_EXP_byte_array_nullable;
            other.DEFINED_EXP_char = this.DEFINED_EXP_char;
            other.DEFINED_EXP_Character = this.DEFINED_EXP_Character;
            other.UNDEFINED_EXP_Character = this.UNDEFINED_EXP_Character;
            other.DEFINED_EXP_Date = this.DEFINED_EXP_Date;
            other.UNDEFINED_EXP_Date = this.UNDEFINED_EXP_Date;
            other.DEFINED_EXP_double = this.DEFINED_EXP_double;
            other.DEFINED_EXP_Double = this.DEFINED_EXP_Double;
            other.UNDEFINED_EXP_Double = this.UNDEFINED_EXP_Double;
            other.DEFINED_EXP_BigDecimal = this.DEFINED_EXP_BigDecimal;
            other.UNDEFINED_EXP_BigDecimal = this.UNDEFINED_EXP_BigDecimal;
            other.DEFINED_EXP_int = this.DEFINED_EXP_int;
            other.DEFINED_EXP_Integer = this.DEFINED_EXP_Integer;
            other.UNDEFINED_EXP_Integer = this.UNDEFINED_EXP_Integer;
            other.DEFINED_EXP_float = this.DEFINED_EXP_float;
            other.DEFINED_EXP_Float = this.DEFINED_EXP_Float;
            other.UNDEFINED_EXP_Float = this.UNDEFINED_EXP_Float;
            other.DEFINED_EXP_long = this.DEFINED_EXP_long;
            other.DEFINED_EXP_Long = this.DEFINED_EXP_Long;
            other.UNDEFINED_EXP_Long = this.UNDEFINED_EXP_Long;
            other.DEFINED_EXP_Object = this.DEFINED_EXP_Object;
            other.UNDEFINED_EXP_Object = this.UNDEFINED_EXP_Object;
            other.DEFINED_EXP_short = this.DEFINED_EXP_short;
            other.DEFINED_EXP_Short = this.DEFINED_EXP_Short;
            other.UNDEFINED_EXP_Short = this.UNDEFINED_EXP_Short;
            other.DEFINED_EXP_String = this.DEFINED_EXP_String;
            other.UNDEFINED_EXP_String = this.UNDEFINED_EXP_String;
            other.DEFINED_EXP_List = this.DEFINED_EXP_List;
            other.UNDEFINED_EXP_List = this.UNDEFINED_EXP_List;

        }

        public void readKeysData(ObjectInputStream dis) {

            try {

                int length = 0;

                this.DEFINED_EXP_boolean = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Boolean = null;
                } else {
                    this.DEFINED_EXP_Boolean = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Boolean = null;
                } else {
                    this.UNDEFINED_EXP_Boolean = dis.readBoolean();
                }

                this.DEFINED_EXP_byte = dis.readByte();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Byte = null;
                } else {
                    this.DEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Byte = null;
                } else {
                    this.UNDEFINED_EXP_Byte = dis.readByte();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array = byteArray;
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_byte_array_nullable = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.readFully(byteArray);
                    this.DEFINED_EXP_byte_array_nullable = byteArray;
                }

                this.DEFINED_EXP_char = dis.readChar();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Character = null;
                } else {
                    this.DEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Character = null;
                } else {
                    this.UNDEFINED_EXP_Character = dis.readChar();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Date = null;
                } else {
                    this.DEFINED_EXP_Date = new Date(dis.readLong());
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Date = null;
                } else {
                    this.UNDEFINED_EXP_Date = new Date(dis.readLong());
                }

                this.DEFINED_EXP_double = dis.readDouble();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Double = null;
                } else {
                    this.DEFINED_EXP_Double = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Double = null;
                } else {
                    this.UNDEFINED_EXP_Double = dis.readDouble();
                }

                this.DEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.UNDEFINED_EXP_BigDecimal = (BigDecimal) dis.readObject();

                this.DEFINED_EXP_int = dis.readInt();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Integer = null;
                } else {
                    this.DEFINED_EXP_Integer = dis.readInt();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Integer = null;
                } else {
                    this.UNDEFINED_EXP_Integer = dis.readInt();
                }

                this.DEFINED_EXP_float = dis.readFloat();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Float = null;
                } else {
                    this.DEFINED_EXP_Float = dis.readFloat();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Float = null;
                } else {
                    this.UNDEFINED_EXP_Float = dis.readFloat();
                }

                this.DEFINED_EXP_long = dis.readLong();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Long = null;
                } else {
                    this.DEFINED_EXP_Long = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Long = null;
                } else {
                    this.UNDEFINED_EXP_Long = dis.readLong();
                }

                this.DEFINED_EXP_Object = (Object) dis.readObject();

                this.UNDEFINED_EXP_Object = (Object) dis.readObject();

                this.DEFINED_EXP_short = dis.readShort();

                length = dis.readByte();
                if (length == -1) {
                    this.DEFINED_EXP_Short = null;
                } else {
                    this.DEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.UNDEFINED_EXP_Short = null;
                } else {
                    this.UNDEFINED_EXP_Short = dis.readShort();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.DEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.DEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                length = dis.readInt();
                if (length == -1) {
                    this.UNDEFINED_EXP_String = null;
                } else {
                    if (length > commonByteArray.length) {
                        if (length < 1024 && commonByteArray.length == 0) {
                            commonByteArray = new byte[1024];
                        } else {
                            commonByteArray = new byte[2 * length];
                        }
                    }
                    dis.readFully(commonByteArray, 0, length);
                    this.UNDEFINED_EXP_String = new String(commonByteArray, 0,
                            length);
                }

                this.DEFINED_EXP_List = (List) dis.readObject();

                this.UNDEFINED_EXP_List = (List) dis.readObject();

            } catch (IOException e) {
                throw new RuntimeException(e);

            } catch (ClassNotFoundException eCNFE) {
                throw new RuntimeException(eCNFE);

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.DEFINED_EXP_boolean);

                // Boolean

                if (this.DEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.DEFINED_EXP_Boolean);
                }

                // Boolean

                if (this.UNDEFINED_EXP_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.UNDEFINED_EXP_Boolean);
                }

                // byte

                dos.writeByte(this.DEFINED_EXP_byte);

                // Byte

                if (this.DEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.DEFINED_EXP_Byte);
                }

                // Byte

                if (this.UNDEFINED_EXP_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.UNDEFINED_EXP_Byte);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array.length);
                    dos.write(this.DEFINED_EXP_byte_array);
                }

                // byte[]

                if (this.DEFINED_EXP_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.DEFINED_EXP_byte_array_nullable.length);
                    dos.write(this.DEFINED_EXP_byte_array_nullable);
                }

                // char

                dos.writeChar(this.DEFINED_EXP_char);

                // Character

                if (this.DEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.DEFINED_EXP_Character);
                }

                // Character

                if (this.UNDEFINED_EXP_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.UNDEFINED_EXP_Character);
                }

                // java.util.Date

                if (this.DEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Date.getTime());
                }

                // java.util.Date

                if (this.UNDEFINED_EXP_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Date.getTime());
                }

                // double

                dos.writeDouble(this.DEFINED_EXP_double);

                // Double

                if (this.DEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.DEFINED_EXP_Double);
                }

                // Double

                if (this.UNDEFINED_EXP_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.UNDEFINED_EXP_Double);
                }

                // BigDecimal

                dos.writeObject(this.DEFINED_EXP_BigDecimal);

                // BigDecimal

                dos.writeObject(this.UNDEFINED_EXP_BigDecimal);

                // int

                dos.writeInt(this.DEFINED_EXP_int);

                // Integer

                if (this.DEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.DEFINED_EXP_Integer);
                }

                // Integer

                if (this.UNDEFINED_EXP_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.UNDEFINED_EXP_Integer);
                }

                // float

                dos.writeFloat(this.DEFINED_EXP_float);

                // Float

                if (this.DEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.DEFINED_EXP_Float);
                }

                // Float

                if (this.UNDEFINED_EXP_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.UNDEFINED_EXP_Float);
                }

                // long

                dos.writeLong(this.DEFINED_EXP_long);

                // Long

                if (this.DEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.DEFINED_EXP_Long);
                }

                // Long

                if (this.UNDEFINED_EXP_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.UNDEFINED_EXP_Long);
                }

                // Object

                dos.writeObject(this.DEFINED_EXP_Object);

                // Object

                dos.writeObject(this.UNDEFINED_EXP_Object);

                // short

                dos.writeShort(this.DEFINED_EXP_short);

                // Short

                if (this.DEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.DEFINED_EXP_Short);
                }

                // Short

                if (this.UNDEFINED_EXP_Short == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.UNDEFINED_EXP_Short);
                }

                // String

                if (this.DEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.DEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.UNDEFINED_EXP_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.UNDEFINED_EXP_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // List

                dos.writeObject(this.DEFINED_EXP_List);

                // List

                dos.writeObject(this.UNDEFINED_EXP_List);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

            }

            finally {
            }

        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

            } finally {
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
//            sb.append(super.toString());
            sb.append("[");

            sb.append("DEFINED_EXP_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Boolean));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Byte));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array));

            sb.append(", ");

            sb.append("DEFINED_EXP_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_byte_array_nullable));

            sb.append(", ");

            sb.append("DEFINED_EXP_char");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_char));

            sb.append(", ");

            sb.append("DEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Character));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Character");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Character));

            sb.append(", ");

            sb.append("DEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Date));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Date");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Date));

            sb.append(", ");

            sb.append("DEFINED_EXP_double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_double));

            sb.append(", ");

            sb.append("DEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Double));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Double");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Double));

            sb.append(", ");

            sb.append("DEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_BigDecimal));

            sb.append(", ");

            sb.append("DEFINED_EXP_int");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_int));

            sb.append(", ");

            sb.append("DEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Integer));

            sb.append(", ");

            sb.append("DEFINED_EXP_float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_float));

            sb.append(", ");

            sb.append("DEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Float));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Float");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Float));

            sb.append(", ");

            sb.append("DEFINED_EXP_long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Long));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Long");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Long));

            sb.append(", ");

            sb.append("DEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Object));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Object");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Object));

            sb.append(", ");

            sb.append("DEFINED_EXP_short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_short));

            sb.append(", ");

            sb.append("DEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_Short));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_Short");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_Short));

            sb.append(", ");

            sb.append("DEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_String));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_String");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_String));

            sb.append(", ");

            sb.append("DEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.DEFINED_EXP_List));

            sb.append(", ");

            sb.append("UNDEFINED_EXP_List");
            sb.append("=");
            sb.append(String.valueOf(this.UNDEFINED_EXP_List));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookupStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_boolean,
                    other.DEFINED_EXP_boolean);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Boolean,
                    other.DEFINED_EXP_Boolean);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Boolean,
                    other.UNDEFINED_EXP_Boolean);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_byte,
                    other.DEFINED_EXP_byte);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Byte,
                    other.DEFINED_EXP_Byte);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Byte,
                    other.UNDEFINED_EXP_Byte);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_byte_array,
                    other.DEFINED_EXP_byte_array);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(
                    this.DEFINED_EXP_byte_array_nullable,
                    other.DEFINED_EXP_byte_array_nullable);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_char,
                    other.DEFINED_EXP_char);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Character,
                    other.DEFINED_EXP_Character);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Character,
                    other.UNDEFINED_EXP_Character);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Date,
                    other.DEFINED_EXP_Date);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Date,
                    other.UNDEFINED_EXP_Date);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_double,
                    other.DEFINED_EXP_double);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Double,
                    other.DEFINED_EXP_Double);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Double,
                    other.UNDEFINED_EXP_Double);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_BigDecimal,
                    other.DEFINED_EXP_BigDecimal);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_BigDecimal,
                    other.UNDEFINED_EXP_BigDecimal);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_int,
                    other.DEFINED_EXP_int);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Integer,
                    other.DEFINED_EXP_Integer);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Integer,
                    other.UNDEFINED_EXP_Integer);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_float,
                    other.DEFINED_EXP_float);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Float,
                    other.DEFINED_EXP_Float);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Float,
                    other.UNDEFINED_EXP_Float);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_long,
                    other.DEFINED_EXP_long);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Long,
                    other.DEFINED_EXP_Long);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Long,
                    other.UNDEFINED_EXP_Long);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Object,
                    other.DEFINED_EXP_Object);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Object,
                    other.UNDEFINED_EXP_Object);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_short,
                    other.DEFINED_EXP_short);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_Short,
                    other.DEFINED_EXP_Short);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_Short,
                    other.UNDEFINED_EXP_Short);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_String,
                    other.DEFINED_EXP_String);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_String,
                    other.UNDEFINED_EXP_String);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.DEFINED_EXP_List,
                    other.DEFINED_EXP_List);
            if (returnValue != 0) {
                return returnValue;
            }

            returnValue = checkNullsAndCompare(this.UNDEFINED_EXP_List,
                    other.UNDEFINED_EXP_List);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFixedFlowInput_4Process() throws TalendException {
        try {

            lookupStruct lookup = new lookupStruct();

            /*******************************************************************
             * / [tAdvancedHash_lookup begin ] start
             */

            ok_Hash.put("tAdvancedHash_lookup", false);
            start_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());
            currentComponent = "tAdvancedHash_lookup";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;

            org.talend.designer.components.commons.AdvancedMemoryLookup<lookupStruct> tHash_Lookup_lookup = org.talend.designer.components.commons.AdvancedMemoryLookup
                    .<lookupStruct> getLookup(matchingModeEnum_lookup);

            globalMap.put("tHash_Lookup_lookup", tHash_Lookup_lookup);

            /**
             * [tAdvancedHash_lookup begin ] stop
             */

            /*******************************************************************
             * / [tFixedFlowInput_4 begin ] start
             */

            ok_Hash.put("tFixedFlowInput_4", false);
            start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
            currentComponent = "tFixedFlowInput_4";

            globalMap.put("NB_LINE", 5);
            for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 5; i_tFixedFlowInput_4++) {

                lookup.DEFINED_EXP_boolean = true;

                lookup.DEFINED_EXP_Boolean = false;

                lookup.UNDEFINED_EXP_Boolean = null;

                lookup.DEFINED_EXP_byte = Byte.MAX_VALUE;

                lookup.DEFINED_EXP_Byte = Byte.MIN_VALUE;

                lookup.UNDEFINED_EXP_Byte = null;

                lookup.DEFINED_EXP_byte_array = new byte[] { Byte.MAX_VALUE,
                        Byte.MIN_VALUE };

                lookup.DEFINED_EXP_byte_array_nullable = null;

                lookup.DEFINED_EXP_char = '0';

                lookup.DEFINED_EXP_Character = new Character('9');

                lookup.UNDEFINED_EXP_Character = null;

                lookup.DEFINED_EXP_Date = new Date(0);

                lookup.UNDEFINED_EXP_Date = null;

                lookup.DEFINED_EXP_double = Double.MAX_VALUE;

                lookup.DEFINED_EXP_Double = Double.MIN_VALUE;

                lookup.UNDEFINED_EXP_Double = null;

                lookup.DEFINED_EXP_BigDecimal = new BigDecimal(
                        "123456789.123456789");

                lookup.UNDEFINED_EXP_BigDecimal = null;

                lookup.DEFINED_EXP_int = Integer.MAX_VALUE;

                lookup.DEFINED_EXP_Integer = Integer.MIN_VALUE;

                lookup.UNDEFINED_EXP_Integer = null;

                lookup.DEFINED_EXP_float = Float.MAX_VALUE;

                lookup.DEFINED_EXP_Float = Float.MIN_VALUE;

                lookup.UNDEFINED_EXP_Float = null;

                lookup.DEFINED_EXP_long = Long.MAX_VALUE;

                lookup.DEFINED_EXP_Long = Long.MIN_VALUE;

                lookup.UNDEFINED_EXP_Long = null;

                lookup.DEFINED_EXP_Object = routine_tMap_10_persistence_02_types_sorteddata
                        .getCustomObject(i_tFixedFlowInput_4);

                lookup.UNDEFINED_EXP_Object = null;

                lookup.DEFINED_EXP_short = Short.MAX_VALUE;

                lookup.DEFINED_EXP_Short = Short.MIN_VALUE;

                lookup.UNDEFINED_EXP_Short = null;

                lookup.DEFINED_EXP_String = "A";

                lookup.UNDEFINED_EXP_String = null;

                lookup.DEFINED_EXP_List = new java.util.ArrayList();

                lookup.UNDEFINED_EXP_List = null;

                lookup.DEFINED_EXP_boolean = true;

                lookup.DEFINED_EXP_Boolean = false;

                lookup.UNDEFINED_EXP_Boolean = null;

                lookup.DEFINED_EXP_byte = Byte.MAX_VALUE;

                lookup.DEFINED_EXP_Byte = Byte.MIN_VALUE;

                lookup.UNDEFINED_EXP_Byte = null;

                lookup.DEFINED_EXP_byte_array = new byte[] { Byte.MAX_VALUE,
                        Byte.MIN_VALUE };

                lookup.DEFINED_EXP_byte_array_nullable = null;

                lookup.DEFINED_EXP_char = '0';

                lookup.DEFINED_EXP_Character = new Character('9');

                lookup.UNDEFINED_EXP_Character = null;

                lookup.DEFINED_EXP_Date = new Date(0);

                lookup.UNDEFINED_EXP_Date = null;

                lookup.DEFINED_EXP_double = Double.MAX_VALUE;

                lookup.DEFINED_EXP_Double = Double.MIN_VALUE;

                lookup.UNDEFINED_EXP_Double = null;

                lookup.DEFINED_EXP_BigDecimal = new BigDecimal(
                        "123456789.123456789");

                lookup.UNDEFINED_EXP_BigDecimal = null;

                lookup.DEFINED_EXP_int = Integer.MAX_VALUE;

                lookup.DEFINED_EXP_Integer = Integer.MIN_VALUE;

                lookup.UNDEFINED_EXP_Integer = null;

                lookup.DEFINED_EXP_float = Float.MAX_VALUE;

                lookup.DEFINED_EXP_Float = Float.MIN_VALUE;

                lookup.UNDEFINED_EXP_Float = null;

                lookup.DEFINED_EXP_long = Long.MAX_VALUE;

                lookup.DEFINED_EXP_Long = Long.MIN_VALUE;

                lookup.UNDEFINED_EXP_Long = null;

                lookup.DEFINED_EXP_Object = routine_tMap_10_persistence_02_types_sorteddata
                        .getCustomObject(i_tFixedFlowInput_4);

                lookup.UNDEFINED_EXP_Object = null;

                lookup.DEFINED_EXP_short = Short.MAX_VALUE;

                lookup.DEFINED_EXP_Short = Short.MIN_VALUE;

                lookup.UNDEFINED_EXP_Short = null;

                lookup.DEFINED_EXP_String = "A";

                lookup.UNDEFINED_EXP_String = null;

                lookup.DEFINED_EXP_List = new java.util.ArrayList();

                lookup.UNDEFINED_EXP_List = null;

                /**
                 * [tFixedFlowInput_4 begin ] stop
                 */
                /***************************************************************
                 * / [tFixedFlowInput_4 main ] start
                 */

                currentComponent = "tFixedFlowInput_4";

                /**
                 * [tFixedFlowInput_4 main ] stop
                 */
                /***************************************************************
                 * / [tAdvancedHash_lookup main ] start
                 */

                currentComponent = "tAdvancedHash_lookup";

                lookupStruct lookup_HashRow = new lookupStruct();

                lookup_HashRow.DEFINED_EXP_boolean = lookup.DEFINED_EXP_boolean;
                lookup_HashRow.DEFINED_EXP_Boolean = lookup.DEFINED_EXP_Boolean;
                lookup_HashRow.UNDEFINED_EXP_Boolean = lookup.UNDEFINED_EXP_Boolean;
                lookup_HashRow.DEFINED_EXP_byte = lookup.DEFINED_EXP_byte;
                lookup_HashRow.DEFINED_EXP_Byte = lookup.DEFINED_EXP_Byte;
                lookup_HashRow.UNDEFINED_EXP_Byte = lookup.UNDEFINED_EXP_Byte;
                lookup_HashRow.DEFINED_EXP_byte_array = lookup.DEFINED_EXP_byte_array;
                lookup_HashRow.DEFINED_EXP_byte_array_nullable = lookup.DEFINED_EXP_byte_array_nullable;
                lookup_HashRow.DEFINED_EXP_char = lookup.DEFINED_EXP_char;
                lookup_HashRow.DEFINED_EXP_Character = lookup.DEFINED_EXP_Character;
                lookup_HashRow.UNDEFINED_EXP_Character = lookup.UNDEFINED_EXP_Character;
                lookup_HashRow.DEFINED_EXP_Date = lookup.DEFINED_EXP_Date;
                lookup_HashRow.UNDEFINED_EXP_Date = lookup.UNDEFINED_EXP_Date;
                lookup_HashRow.DEFINED_EXP_double = lookup.DEFINED_EXP_double;
                lookup_HashRow.DEFINED_EXP_Double = lookup.DEFINED_EXP_Double;
                lookup_HashRow.UNDEFINED_EXP_Double = lookup.UNDEFINED_EXP_Double;
                lookup_HashRow.DEFINED_EXP_BigDecimal = lookup.DEFINED_EXP_BigDecimal;
                lookup_HashRow.UNDEFINED_EXP_BigDecimal = lookup.UNDEFINED_EXP_BigDecimal;
                lookup_HashRow.DEFINED_EXP_int = lookup.DEFINED_EXP_int;
                lookup_HashRow.DEFINED_EXP_Integer = lookup.DEFINED_EXP_Integer;
                lookup_HashRow.UNDEFINED_EXP_Integer = lookup.UNDEFINED_EXP_Integer;
                lookup_HashRow.DEFINED_EXP_float = lookup.DEFINED_EXP_float;
                lookup_HashRow.DEFINED_EXP_Float = lookup.DEFINED_EXP_Float;
                lookup_HashRow.UNDEFINED_EXP_Float = lookup.UNDEFINED_EXP_Float;
                lookup_HashRow.DEFINED_EXP_long = lookup.DEFINED_EXP_long;
                lookup_HashRow.DEFINED_EXP_Long = lookup.DEFINED_EXP_Long;
                lookup_HashRow.UNDEFINED_EXP_Long = lookup.UNDEFINED_EXP_Long;
                lookup_HashRow.DEFINED_EXP_Object = lookup.DEFINED_EXP_Object;
                lookup_HashRow.UNDEFINED_EXP_Object = lookup.UNDEFINED_EXP_Object;
                lookup_HashRow.DEFINED_EXP_short = lookup.DEFINED_EXP_short;
                lookup_HashRow.DEFINED_EXP_Short = lookup.DEFINED_EXP_Short;
                lookup_HashRow.UNDEFINED_EXP_Short = lookup.UNDEFINED_EXP_Short;
                lookup_HashRow.DEFINED_EXP_String = lookup.DEFINED_EXP_String;
                lookup_HashRow.UNDEFINED_EXP_String = lookup.UNDEFINED_EXP_String;
                lookup_HashRow.DEFINED_EXP_List = lookup.DEFINED_EXP_List;
                lookup_HashRow.UNDEFINED_EXP_List = lookup.UNDEFINED_EXP_List;
                tHash_Lookup_lookup.put(lookup_HashRow);

                /**
                 * [tAdvancedHash_lookup main ] stop
                 */

                /***************************************************************
                 * / [tFixedFlowInput_4 end ] start
                 */

                currentComponent = "tFixedFlowInput_4";

            }

            ok_Hash.put("tFixedFlowInput_4", true);
            end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

            /**
             * [tFixedFlowInput_4 end ] stop
             */
            /*******************************************************************
             * / [tAdvancedHash_lookup end ] start
             */

            currentComponent = "tAdvancedHash_lookup";

            tHash_Lookup_lookup.endPut();

            ok_Hash.put("tAdvancedHash_lookup", true);
            end_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());

            /**
             * [tAdvancedHash_lookup end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "production";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
    public static long startTime = 0;

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = tMap_10_persistence_02_types_sorteddata.class
                    .getClassLoader()
                    .getResourceAsStream(
                            "java_project_8/tmap_10_persistence_02_types_sorteddata_0_1/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = tMap_10_persistence_02_types_sorteddata.class
                        .getClassLoader().getResourceAsStream(
                                "java_project_8/tmap_10_persistence_02_types_sorteddata_0_1/contexts/"
                                        + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            context.param_file_path = (String) context
                    .getProperty("param_file_path");

            context.data_dir = (String) context.getProperty("data_dir");

            context.data_output_dir = (String) context
                    .getProperty("data_output_dir");

            context.result_host = (String) context.getProperty("result_host");

            context.result_port = (String) context.getProperty("result_port");

            context.result_database = (String) context
                    .getProperty("result_database");

            context.result_username = (String) context
                    .getProperty("result_username");

            context.result_password = (String) context
                    .getProperty("result_password");

            context.result_table = (String) context.getProperty("result_table");

            context.mysql_host = (String) context.getProperty("mysql_host");

            context.mysql_port = (String) context.getProperty("mysql_port");

            context.mysql_schema = (String) context.getProperty("mysql_schema");

            context.mysql_username = (String) context
                    .getProperty("mysql_username");

            context.mysql_password = (String) context
                    .getProperty("mysql_password");

            context.current_job_dir = (String) context
                    .getProperty("current_job_dir");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final tMap_10_persistence_02_types_sorteddata tMap_10_persistence_02_types_sorteddataClass = new tMap_10_persistence_02_types_sorteddata();
        try {
            errorCode = null;
            tMap_10_persistence_02_types_sorteddataClass
                    .tFileInputDelimited_2Process();
            status = "end";
        } catch (TalendException e_tFileInputDelimited_2) {
            status = "failure";
            e_tFileInputDelimited_2.printStackTrace();

        } finally {
        }
        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out
                    .println((endUsedMemory - startUsedMemory)
                            + " bytes memory increase when running : tMap_10_persistence_02_types_sorteddata");
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue
                        .substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "production";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/*******************************************************************************
 * 329089 characters generated by Talend OpenStudio on the 15 mai 2008 15:58:07
 * CEST
 ******************************************************************************/
