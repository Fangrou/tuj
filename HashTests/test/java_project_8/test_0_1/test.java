// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package java_project_8.test_0_1;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import routines.TalendString;
import routines.system.ParserUtils;
import routines.system.RunStat;
import routines.system.TDieException;

/**
 * Job: test Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.2.0.qualifier
 * @status
 */
public class test {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	private static class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}
	}

	private static ContextProperties context = new ContextProperties();
	private static final String jobName = "test";
	private static final String projectName = "JAVA_PROJECT_8";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private static RunStat runStat = new RunStat();

	private class TalendException extends Exception {
		private Exception e = null;
		private test c = null;

		private TalendException(test c, Exception e) {
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tLogRow_1_error(Exception exception) throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tFileInputDelimited_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tAdvancedHash_row2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tMap_1_TMAP_OUT_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tMap_1_TMAP_IN_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());
		tFileInputDelimited_2_onSubJobError(exception);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		static byte[] commonByteArray = new byte[0];
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String Postal;

		String State;

		String Capital;

		String MostPopulousCity;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Postal == null) ? 0 : this.Postal.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Postal == null) {
				if (other.Postal != null)
					return false;
			} else if (!this.Postal.equals(other.Postal))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Postal = this.Postal;
			other.State = this.State;
			other.Capital = this.Capital;
			other.MostPopulousCity = this.MostPopulousCity;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Postal = this.Postal;

		}

		public void readKeysData(ObjectInputStream dis) {

			try {

				int length = 0;

				length = dis.readInt();
				if (length == -1) {
					this.Postal = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Postal = new String(commonByteArray, 0, length);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				if (this.Postal == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Postal.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readInt();
				if (length == -1) {
					this.State = null;
				} else {
					byte[] byteArray = new byte[length];
					dis.read(byteArray);
					this.State = new String(byteArray);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Capital = null;
				} else {
					byte[] byteArray = new byte[length];
					dis.read(byteArray);
					this.Capital = new String(byteArray);
				}

				length = dis.readInt();
				if (length == -1) {
					this.MostPopulousCity = null;
				} else {
					byte[] byteArray = new byte[length];
					dis.read(byteArray);
					this.MostPopulousCity = new String(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.State == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.State.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				if (this.Capital == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Capital.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				if (this.MostPopulousCity == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.MostPopulousCity.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("Postal");
			sb.append("=");
			sb.append(String.valueOf(this.Postal));

			sb.append(", ");

			sb.append("State");
			sb.append("=");
			sb.append(String.valueOf(this.State));

			sb.append(", ");

			sb.append("Capital");
			sb.append("=");
			sb.append(String.valueOf(this.Capital));

			sb.append(", ");

			sb.append("MostPopulousCity");
			sb.append("=");
			sb.append(String.valueOf(this.MostPopulousCity));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Postal, other.Postal);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			// if (this.ignoreCase) {
			return string1.compareToIgnoreCase(string2);
			// } else {
			// return string1.compareTo(string2);
			// }
		}

	}

	public void tFileInputDelimited_1Process() throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);
		try {

			row2Struct row2 = new row2Struct();

			/*******************************************************************
			 * / [tAdvancedHash_row2 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row2", false);
			start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row2";

			runStat
					.updateStatOnConnection(
							"row2"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 0, 0);

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;

			org.talend.designer.components.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = new org.talend.designer.components.persistent.PersistentSortedLookupManager<row2Struct>(
					matchingModeEnum_row2,
					"/tmp" + "/" + jobName + "_tMapData_Lookup_row2_",
					new org.talend.designer.components.persistent.IRowCreator() {
						public row2Struct createRowInstance() {
							return new row2Struct();
						}
					}

					, 1000000

			);

			tHash_Lookup_row2.initPut();

			globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

			/**
			 * [tAdvancedHash_row2 begin ] stop
			 */

			/*******************************************************************
			 * / [tFileInputDelimited_1 begin ] start
			 */

			ok_Hash.put("tFileInputDelimited_1", false);
			start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
			currentComponent = "tFileInputDelimited_1";

			org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
					"/home/amaumont/data/dev/projets/Talend/bugs/bug_steph_HeapMem/tMapHeapJob/us_state_sorted.txt",
					"US-ASCII", ";", "\n", false, 1, 0, -1, -1, false);
			while (fid_tFileInputDelimited_1.nextRecord()) {
				row2 = null;
				row2 = null;
				boolean whetherReject_tFileInputDelimited_1 = false;
				row2 = new row2Struct();
				try {

					row2.Postal = fid_tFileInputDelimited_1.get(0);
					row2.State = fid_tFileInputDelimited_1.get(1);
					row2.Capital = fid_tFileInputDelimited_1.get(2);
					row2.MostPopulousCity = fid_tFileInputDelimited_1.get(3);

				} catch (Exception e) {
					whetherReject_tFileInputDelimited_1 = true;
					System.err.println(e.getMessage());
					row2 = null;
				}

				/**
				 * [tFileInputDelimited_1 begin ] stop
				 */
				/***************************************************************
				 * / [tFileInputDelimited_1 main ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 main ] stop
				 */
				// Start of branch "row2"
				if (row2 != null) {

					/***********************************************************
					 * / [tAdvancedHash_row2 main ] start
					 */

					currentComponent = "tAdvancedHash_row2";

					// row2
					// row2

					runStat
							.updateStatOnConnection(
									"row2"
											+ (globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID"))
													: ""), 1, 1);

					row2Struct row2_HashRow = tHash_Lookup_row2
							.getNextFreeRow();

					row2_HashRow.Postal = row2.Postal;
					row2_HashRow.State = row2.State;
					row2_HashRow.Capital = row2.Capital;
					row2_HashRow.MostPopulousCity = row2.MostPopulousCity;
					tHash_Lookup_row2.put(row2_HashRow);

					/**
					 * [tAdvancedHash_row2 main ] stop
					 */

				} // End of branch "row2"

				/***************************************************************
				 * / [tFileInputDelimited_1 end ] start
				 */

				currentComponent = "tFileInputDelimited_1";

			}
			fid_tFileInputDelimited_1.close();
			globalMap.put("tFileInputDelimited_1_NB_LINE",
					fid_tFileInputDelimited_1.getRowNumber());
			runStat
					.updateStatOnConnection(
							"row2"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 2, 0);

			ok_Hash.put("tFileInputDelimited_1", true);
			end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

			/**
			 * [tFileInputDelimited_1 end ] stop
			 */
			/*******************************************************************
			 * / [tAdvancedHash_row2 end ] start
			 */

			currentComponent = "tAdvancedHash_row2";

			tHash_Lookup_row2.endPut();

			ok_Hash.put("tAdvancedHash_row2", true);
			end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row2 end ] stop
			 */

		} catch (Exception e) {

			throw new TalendException(this, e);
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	static class newOutput1Struct implements
			routines.system.IPersistableRow<newOutput1Struct> {
		static byte[] commonByteArray = new byte[0];

		String Firstname;

		String Lastname;

		String State;

		public void readData(ObjectInputStream dis) {

			try {

				int length = 0;

				length = dis.readInt();
				if (length == -1) {
					this.Firstname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Firstname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Lastname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Lastname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.State = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.State = new String(commonByteArray, 0, length);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				if (this.Firstname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Firstname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.Lastname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Lastname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.State == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.State.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("Firstname");
			sb.append("=");
			sb.append(String.valueOf(this.Firstname));

			sb.append(", ");

			sb.append("Lastname");
			sb.append("=");
			sb.append(String.valueOf(this.Lastname));

			sb.append(", ");

			sb.append("State");
			sb.append("=");
			sb.append(String.valueOf(this.State));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newOutput1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			// if (this.ignoreCase) {
			return string1.compareToIgnoreCase(string2);
			// } else {
			// return string1.compareTo(string2);
			// }
		}

	}

	static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		static byte[] commonByteArray = new byte[0];

		Integer id;

		String Firstname;

		String Lastname;

		String Adress;

		String RegistrationDate;

		Integer Revenue;

		String States;

		public void readData(ObjectInputStream dis) {

			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.id = null;
				} else {
					this.id = dis.readInt();
				}

				length = dis.readInt();
				if (length == -1) {
					this.Firstname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Firstname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Lastname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Lastname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Adress = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Adress = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.RegistrationDate = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.RegistrationDate = new String(commonByteArray, 0,
							length);
				}

				length = dis.readByte();
				if (length == -1) {
					this.Revenue = null;
				} else {
					this.Revenue = dis.readInt();
				}

				length = dis.readInt();
				if (length == -1) {
					this.States = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.States = new String(commonByteArray, 0, length);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.id);
				}

				// String

				if (this.Firstname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Firstname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.Lastname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Lastname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.Adress == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Adress.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.RegistrationDate == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.RegistrationDate.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.Revenue);
				}

				// String

				if (this.States == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.States.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("id");
			sb.append("=");
			sb.append(String.valueOf(this.id));

			sb.append(", ");

			sb.append("Firstname");
			sb.append("=");
			sb.append(String.valueOf(this.Firstname));

			sb.append(", ");

			sb.append("Lastname");
			sb.append("=");
			sb.append(String.valueOf(this.Lastname));

			sb.append(", ");

			sb.append("Adress");
			sb.append("=");
			sb.append(String.valueOf(this.Adress));

			sb.append(", ");

			sb.append("RegistrationDate");
			sb.append("=");
			sb.append(String.valueOf(this.RegistrationDate));

			sb.append(", ");

			sb.append("Revenue");
			sb.append("=");
			sb.append(String.valueOf(this.Revenue));

			sb.append(", ");

			sb.append("States");
			sb.append("=");
			sb.append(String.valueOf(this.States));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			// if (this.ignoreCase) {
			return string1.compareToIgnoreCase(string2);
			// } else {
			// return string1.compareTo(string2);
			// }
		}

	}

	static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		static byte[] commonByteArray = new byte[0];

		Integer id;

		String Firstname;

		String Lastname;

		String Adress;

		String RegistrationDate;

		Integer Revenue;

		String States;

		public void readData(ObjectInputStream dis) {

			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.id = null;
				} else {
					this.id = dis.readInt();
				}

				length = dis.readInt();
				if (length == -1) {
					this.Firstname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Firstname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Lastname = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Lastname = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.Adress = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.Adress = new String(commonByteArray, 0, length);
				}

				length = dis.readInt();
				if (length == -1) {
					this.RegistrationDate = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.RegistrationDate = new String(commonByteArray, 0,
							length);
				}

				length = dis.readByte();
				if (length == -1) {
					this.Revenue = null;
				} else {
					this.Revenue = dis.readInt();
				}

				length = dis.readInt();
				if (length == -1) {
					this.States = null;
				} else {
					if (length > commonByteArray.length) {
						if (length < 1024 && commonByteArray.length == 0) {
							commonByteArray = new byte[1024];
						} else {
							commonByteArray = new byte[2 * length];
						}
					}
					dis.readFully(commonByteArray, 0, length);
					this.States = new String(commonByteArray, 0, length);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.id);
				}

				// String

				if (this.Firstname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Firstname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.Lastname == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Lastname.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.Adress == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.Adress.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// String

				if (this.RegistrationDate == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.RegistrationDate.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

				// Integer

				if (this.Revenue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeInt(this.Revenue);
				}

				// String

				if (this.States == null) {
					dos.writeInt(-1);
				} else {
					byte[] byteArray = this.States.getBytes();
					dos.writeInt(byteArray.length);
					dos.write(byteArray);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");

			sb.append("id");
			sb.append("=");
			sb.append(String.valueOf(this.id));

			sb.append(", ");

			sb.append("Firstname");
			sb.append("=");
			sb.append(String.valueOf(this.Firstname));

			sb.append(", ");

			sb.append("Lastname");
			sb.append("=");
			sb.append(String.valueOf(this.Lastname));

			sb.append(", ");

			sb.append("Adress");
			sb.append("=");
			sb.append(String.valueOf(this.Adress));

			sb.append(", ");

			sb.append("RegistrationDate");
			sb.append("=");
			sb.append(String.valueOf(this.RegistrationDate));

			sb.append(", ");

			sb.append("Revenue");
			sb.append("=");
			sb.append(String.valueOf(this.Revenue));

			sb.append(", ");

			sb.append("States");
			sb.append("=");
			sb.append(String.valueOf(this.States));

			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			// if (this.ignoreCase) {
			return string1.compareToIgnoreCase(string2);
			// } else {
			// return string1.compareTo(string2);
			// }
		}

	}

	public void tFileInputDelimited_2Process() throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);
		try {
			tFileInputDelimited_1Process();

			row1Struct row1 = new row1Struct();
			newOutput1Struct newOutput1 = new newOutput1Struct();

			/*******************************************************************
			 * / [tMap_1_TMAP_OUT begin ] start
			 */

			ok_Hash.put("tMap_1_TMAP_OUT", false);
			start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
			currentComponent = "tMap_1_TMAP_OUT";

			runStat
					.updateStatOnConnection(
							"row1"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 0, 0);

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.persistent.PersistentSortedLookupManager<row2Struct>) globalMap
					.get("tHash_Lookup_row2");

			row2Struct row2HashKey = new row2Struct();
			row2Struct row2Default = new row2Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			// ###############################

			// ###############################
			// # Outputs initialization
			// ###############################

			class SortableRow_row1 implements Comparable<SortableRow_row1>,
					routines.system.IPersistableRow<SortableRow_row1> { // G_TM_B_001

				boolean is__rejectedInnerJoin;

				String exprKey_row2__Postal;

				// row1
				Integer row1__id;
				String row1__Firstname;
				String row1__Lastname;
				String row1__Adress;
				String row1__RegistrationDate;
				Integer row1__Revenue;
				String row1__States;

				public void fillFrom(row1Struct row1,
						String exprKey_row2__Postal) {

					this.row1__id = row1.id;
					this.row1__Firstname = row1.Firstname;
					this.row1__Lastname = row1.Lastname;
					this.row1__Adress = row1.Adress;
					this.row1__RegistrationDate = row1.RegistrationDate;
					this.row1__Revenue = row1.Revenue;
					this.row1__States = row1.States;
					this.exprKey_row2__Postal = exprKey_row2__Postal;

				}

				public void copyDataTo(row1Struct row1) {

					row1.id = this.row1__id;
					row1.Firstname = this.row1__Firstname;
					row1.Lastname = this.row1__Lastname;
					row1.Adress = this.row1__Adress;
					row1.RegistrationDate = this.row1__RegistrationDate;
					row1.Revenue = this.row1__Revenue;
					row1.States = this.row1__States;

				}

				public String toString() {

					StringBuilder sb = new StringBuilder();
					sb.append(super.toString());
					sb.append("[");

					sb.append("row1__id");
					sb.append("=");
					sb.append(String.valueOf(this.row1__id));

					sb.append(", ");

					sb.append("row1__Firstname");
					sb.append("=");
					sb.append(String.valueOf(this.row1__Firstname));

					sb.append(", ");

					sb.append("row1__Lastname");
					sb.append("=");
					sb.append(String.valueOf(this.row1__Lastname));

					sb.append(", ");

					sb.append("row1__Adress");
					sb.append("=");
					sb.append(String.valueOf(this.row1__Adress));

					sb.append(", ");

					sb.append("row1__RegistrationDate");
					sb.append("=");
					sb.append(String.valueOf(this.row1__RegistrationDate));

					sb.append(", ");

					sb.append("row1__Revenue");
					sb.append("=");
					sb.append(String.valueOf(this.row1__Revenue));

					sb.append(", ");

					sb.append("row1__States");
					sb.append("=");
					sb.append(String.valueOf(this.row1__States));

					sb.append("]");

					return sb.toString();
				}

				public int compareTo(SortableRow_row1 other) {

					int returnValue = 0;

					returnValue = checkNullsAndCompare(
							this.exprKey_row2__Postal,
							other.exprKey_row2__Postal);
					if (returnValue != 0) {
						return returnValue;
					}

					return returnValue;
				}

				private int checkNullsAndCompare(Object object1, Object object2) {

					int ascendingInt = 1;

					int returnValue = 0;
					if (object1 instanceof String && object2 instanceof String) {
						returnValue = compareStrings((String) object1,
								(String) object2);
					} else if (object1 instanceof Comparable
							&& object2 instanceof Comparable) {
						returnValue = ((Comparable) object1).compareTo(object2);
					} else if (object1 != null && object2 != null) {
						returnValue = compareStrings(object1.toString(),
								object2.toString());
					} else if (object1 == null && object2 != null) {
						returnValue = 1;
					} else if (object1 != null && object2 == null) {
						returnValue = -1;
					} else {
						returnValue = 0;
					}

					return ascendingInt * returnValue;
				}

				private int compareStrings(String string1, String string2) {
					boolean ignoreCase = true;
					if (ignoreCase) {
						return string1.compareToIgnoreCase(string2);
					} else {
						return string1.compareTo(string2);
					}
				}

				public void readData(ObjectInputStream dis) {

					try {

						int length = 0;

						this.is__rejectedInnerJoin = dis.readBoolean();

						length = dis.readByte();
						if (length == -1) {
							this.row1__id = null;
						} else {
							this.row1__id = dis.readInt();
						}

						length = dis.readInt();
						if (length == -1) {
							this.row1__Firstname = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.row1__Firstname = new String(
									row1Struct.commonByteArray, 0, length);
						}

						length = dis.readInt();
						if (length == -1) {
							this.row1__Lastname = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.row1__Lastname = new String(
									row1Struct.commonByteArray, 0, length);
						}

						length = dis.readInt();
						if (length == -1) {
							this.row1__Adress = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.row1__Adress = new String(
									row1Struct.commonByteArray, 0, length);
						}

						length = dis.readInt();
						if (length == -1) {
							this.row1__RegistrationDate = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.row1__RegistrationDate = new String(
									row1Struct.commonByteArray, 0, length);
						}

						length = dis.readByte();
						if (length == -1) {
							this.row1__Revenue = null;
						} else {
							this.row1__Revenue = dis.readInt();
						}

						length = dis.readInt();
						if (length == -1) {
							this.row1__States = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.row1__States = new String(
									row1Struct.commonByteArray, 0, length);
						}

						length = dis.readInt();
						if (length == -1) {
							this.exprKey_row2__Postal = null;
						} else {
							if (length > row1Struct.commonByteArray.length) {
								if (length < 1024
										&& row1Struct.commonByteArray.length == 0) {
									row1Struct.commonByteArray = new byte[1024];
								} else {
									row1Struct.commonByteArray = new byte[2 * length];
								}
							}
							dis
									.readFully(row1Struct.commonByteArray, 0,
											length);
							this.exprKey_row2__Postal = new String(
									row1Struct.commonByteArray, 0, length);
						}

					} catch (IOException e) {
						throw new RuntimeException(e);

					}
				}

				public void writeData(ObjectOutputStream dos) {
					try {

						dos.writeBoolean(this.is__rejectedInnerJoin);

						if (this.row1__id == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeInt(this.row1__id);
						}

						if (this.row1__Firstname == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.row1__Firstname.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

						if (this.row1__Lastname == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.row1__Lastname.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

						if (this.row1__Adress == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.row1__Adress.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

						if (this.row1__RegistrationDate == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.row1__RegistrationDate
									.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

						if (this.row1__Revenue == null) {
							dos.writeByte(-1);
						} else {
							dos.writeByte(0);
							dos.writeInt(this.row1__Revenue);
						}

						if (this.row1__States == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.row1__States.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

						if (this.exprKey_row2__Postal == null) {
							dos.writeInt(-1);
						} else {
							byte[] byteArray = this.exprKey_row2__Postal
									.getBytes();
							dos.writeInt(byteArray.length);
							dos.write(byteArray);
						}

					} catch (IOException e) {
						throw new RuntimeException(e);
					}
				}

			} // G_TM_B_001

			org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_row1> fsi_row1 = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_row1>(
					"/tmp" + "/" + jobName + "_tMapData_row1", 1000000) {
				public SortableRow_row1 createRowInstance() {
					return new SortableRow_row1();
				}
			};

			fsi_row1.initPut();

			/**
			 * [tMap_1_TMAP_OUT begin ] stop
			 */

			/*******************************************************************
			 * / [tFileInputDelimited_2 begin ] start
			 */

			ok_Hash.put("tFileInputDelimited_2", false);
			start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
			currentComponent = "tFileInputDelimited_2";

			org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
					"/home/amaumont/data/dev/projets/Talend/bugs/bug_steph_HeapMem/tMapHeapJob/short_customers2_sorted.csv",
					"US-ASCII", ";", "\n", false, 1, 0, -1, -1, false);
			while (fid_tFileInputDelimited_2.nextRecord()) {
				row1 = null;
				boolean whetherReject_tFileInputDelimited_2 = false;
				row1 = new row1Struct();
				try {
					String temp_tFileInputDelimited_2 = "";
					temp_tFileInputDelimited_2 = fid_tFileInputDelimited_2
							.get(0);
					if (temp_tFileInputDelimited_2.length() > 0) {
						row1.id = ParserUtils
								.parseTo_Integer(temp_tFileInputDelimited_2);
					} else {
						row1.id = null;
					}
					row1.Firstname = fid_tFileInputDelimited_2.get(1);
					row1.Lastname = fid_tFileInputDelimited_2.get(2);
					row1.Adress = fid_tFileInputDelimited_2.get(3);
					row1.RegistrationDate = fid_tFileInputDelimited_2.get(4);
					temp_tFileInputDelimited_2 = fid_tFileInputDelimited_2
							.get(5);
					if (temp_tFileInputDelimited_2.length() > 0) {
						row1.Revenue = ParserUtils
								.parseTo_Integer(temp_tFileInputDelimited_2);
					} else {
						row1.Revenue = null;
					}
					row1.States = fid_tFileInputDelimited_2.get(6);

				} catch (Exception e) {
					whetherReject_tFileInputDelimited_2 = true;
					System.err.println(e.getMessage());
					row1 = null;
				}

				/**
				 * [tFileInputDelimited_2 begin ] stop
				 */
				/***************************************************************
				 * / [tFileInputDelimited_2 main ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 main ] stop
				 */
				// Start of branch "row1"
				if (row1 != null) {

					/***********************************************************
					 * / [tMap_1_TMAP_OUT main ] start
					 */

					currentComponent = "tMap_1_TMAP_OUT";

					// row1
					// row1

					runStat
							.updateStatOnConnection(
									"row1"
											+ (globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID"))
													: ""), 1, 1);

					boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

					hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

					String exprKey_row2__Postal = row1.States;

					SortableRow_row1 rsc_row1 = fsi_row1.getNextFreeRow();

					rsc_row1.fillFrom(row1, exprKey_row2__Postal);

					fsi_row1.put(rsc_row1);

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
					boolean mainRowRejected_tMap_1_TMAP_OUT = false;

					// { // Dummy bracket to open block for "row1" ##(1)##

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1_TMAP_OUT = false;

					/**
					 * [tMap_1_TMAP_OUT main ] stop
					 */

				} // End of branch "row1"

				/***************************************************************
				 * / [tFileInputDelimited_2 end ] start
				 */

				currentComponent = "tFileInputDelimited_2";

			}
			fid_tFileInputDelimited_2.close();
			globalMap.put("tFileInputDelimited_2_NB_LINE",
					fid_tFileInputDelimited_2.getRowNumber());
			runStat
					.updateStatOnConnection(
							"row1"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 2, 0);

			ok_Hash.put("tFileInputDelimited_2", true);
			end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

			/**
			 * [tFileInputDelimited_2 end ] stop
			 */
			/*******************************************************************
			 * / [tMap_1_TMAP_OUT end ] start
			 */

			currentComponent = "tMap_1_TMAP_OUT";

			// ###############################
			// # Lookup hashes releasing
			// ###############################

			ok_Hash.put("tMap_1_TMAP_OUT", true);
			end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

			/**
			 * [tMap_1_TMAP_OUT end ] stop
			 */

			/*******************************************************************
			 * / [tLogRow_1 begin ] start
			 */

			ok_Hash.put("tLogRow_1", false);
			start_Hash.put("tLogRow_1", System.currentTimeMillis());
			currentComponent = "tLogRow_1";

			runStat
					.updateStatOnConnection(
							"newOutput1"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 0, 0);

			// /////////////////////

			class Util_tLogRow_1 {

				String[] des_top = { ".", ".", "-", "+" };

				String[] des_head = { "|=", "=|", "-", "+" };

				String[] des_bottom = { "'", "'", "-", "+" };

				String name = "";

				java.util.List<String[]> list = new java.util.ArrayList<String[]>();

				int[] colLengths = new int[3];

				public void addRow(String[] row) {

					for (int i = 0; i < 3; i++) {
						if (row[i] != null) {
							colLengths[i] = Math.max(colLengths[i], row[i]
									.length());
						}
					}
					list.add(row);
				}

				public void setTableName(String name) {

					this.name = name;
				}

				public StringBuilder format() {

					StringBuilder sb = new StringBuilder();

					sb.append(print(des_top));

					int totals = 0;
					for (int i = 0; i < colLengths.length; i++) {
						totals = totals + colLengths[i];
					}

					// name
					sb.append("|");
					int k = 0;
					for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
						sb.append(' ');
					}
					sb.append(name);
					for (int i = 0; i < totals + 2 - name.length() - k; i++) {
						sb.append(' ');
					}
					sb.append("|\n");

					// head and rows
					sb.append(print(des_head));
					for (int i = 0; i < list.size(); i++) {

						String[] row = list.get(i);

						java.util.Formatter formatter = new java.util.Formatter(
								new StringBuilder());

						StringBuilder sbformat = new StringBuilder();
						sbformat.append("|%1$-");
						sbformat.append(colLengths[0]);
						sbformat.append("s");

						sbformat.append("|%2$-");
						sbformat.append(colLengths[1]);
						sbformat.append("s");

						sbformat.append("|%3$-");
						sbformat.append(colLengths[2]);
						sbformat.append("s");

						sbformat.append("|\n");

						formatter.format(sbformat.toString(), (Object[]) row);

						sb.append(formatter.toString());
						if (i == 0)
							sb.append(print(des_head)); // print the head
					}

					// end
					sb.append(print(des_bottom));
					return sb;
				}

				private StringBuilder print(String[] fillChars) {
					StringBuilder sb = new StringBuilder();
					// first column
					sb.append(fillChars[0]);
					for (int i = 0; i < colLengths[0] - fillChars[0].length()
							+ 1; i++) {
						sb.append(fillChars[2]);
					}
					sb.append(fillChars[3]);

					for (int i = 0; i < colLengths[1] - fillChars[3].length()
							+ 1; i++) {
						sb.append(fillChars[2]);
					}
					sb.append(fillChars[3]);

					// last column
					for (int i = 0; i < colLengths[2] - fillChars[1].length()
							+ 1; i++) {
						sb.append(fillChars[2]);
					}
					sb.append(fillChars[1]);
					sb.append("\n");
					return sb;
				}
			}
			Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
			util_tLogRow_1.setTableName("tLogRow_1");
			util_tLogRow_1.addRow(new String[] { "Firstname", "Lastname",
					"State", });
			int nb_line_tLogRow_1 = 0;

			// /////////////////////

			/**
			 * [tLogRow_1 begin ] stop
			 */

			/*******************************************************************
			 * / [tMap_1_TMAP_IN begin ] start
			 */

			ok_Hash.put("tMap_1_TMAP_IN", false);
			start_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());
			currentComponent = "tMap_1_TMAP_IN";

			// ###############################
			// # Lookup's keys initialization
			// ###############################

			// ###############################
			// # Vars initialization
			// ###############################

			// ###############################
			// # Outputs initialization
			newOutput1Struct newOutput1_tmp = new newOutput1Struct();
			// ###############################

			/**
			 * [tMap_1_TMAP_IN begin ] stop
			 */
			/*******************************************************************
			 * / [tMap_1_TMAP_IN main ] start
			 */

			currentComponent = "tMap_1_TMAP_IN";

			boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

			fsi_row1.endPut();

			// ###############################
			// # Input tables (lookups)
			boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
			boolean mainRowRejected_tMap_1_TMAP_IN = false;

			// /////////////////////////////////////////////
			// Starting Lookup Table "row2"
			// /////////////////////////////////////////////

			SortableRow_row1 rsc_row1;

			tHash_Lookup_row2.initGet();

			fsi_row1.initGet();

			// TEST firstLookupIsPersistentSorted=true
			// isFirstPersistentSortedTable=true

			rejectedInnerJoin_tMap_1_TMAP_IN = false;

			while (fsi_row1.hasNext()) { // G_TM_M_250 loop "row1"

				// CALL close loop of lookup 'row1'

				rsc_row1 = (SortableRow_row1) fsi_row1.next();
				rsc_row1.copyDataTo(row1);

				rejectedInnerJoin_tMap_1_TMAP_IN = rsc_row1.is__rejectedInnerJoin;

				boolean forceLooprow2 = false;

				row2Struct row2ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G 20

					hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

					row2HashKey.Postal = rsc_row1.exprKey_row2__Postal;

					tHash_Lookup_row2.lookup(row2HashKey);

					if (!tHash_Lookup_row2.hasNext()) { // G 090

					} // G 090

				} // G 20

				row2Struct row2 = null;

				row2Struct fromLookup_row2 = null;
				row2 = row2Default;

				if (tHash_Lookup_row2.hasNext()) { // G 099

					fromLookup_row2 = tHash_Lookup_row2.next();

				} // G 099

				if (fromLookup_row2 != null) {
					row2 = fromLookup_row2;
				}

				// { // Dummy bracket to open block for "row1" ##(1)##

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables
					// ###############################
					// ###############################
					// # Output tables

					newOutput1 = null;

					// # Output table : 'newOutput1'
					newOutput1_tmp.Firstname = row1.Firstname;
					newOutput1_tmp.Lastname = row1.Lastname;
					newOutput1_tmp.State = row2.State;
					newOutput1 = newOutput1_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1_TMAP_IN = false;

				/**
				 * [tMap_1_TMAP_IN main ] stop
				 */
				// Start of branch "newOutput1"
				if (newOutput1 != null) {

					/***********************************************************
					 * / [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// newOutput1
					// newOutput1

					runStat
							.updateStatOnConnection(
									"newOutput1"
											+ (globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
													.get("PARALLEL_ITERATOR_THREAD_ID"))
													: ""), 1, 1);

					// /////////////////////

					String[] row_tLogRow_1 = new String[3];

					if (newOutput1.Firstname != null) { //              
						row_tLogRow_1[0] = String.valueOf(newOutput1.Firstname);

					} //			

					if (newOutput1.Lastname != null) { //              
						row_tLogRow_1[1] = String.valueOf(newOutput1.Lastname);

					} //			

					if (newOutput1.State != null) { //              
						row_tLogRow_1[2] = String.valueOf(newOutput1.State);

					} //			

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					/**
					 * [tLogRow_1 main ] stop
					 */

				} // End of branch "newOutput1"

			} // G_TM_M_250 close loop read file data 'row1'
			/*******************************************************************
			 * / [tMap_1_TMAP_IN end ] start
			 */

			currentComponent = "tMap_1_TMAP_IN";

			// ###############################
			// # Lookup hashes releasing
			fsi_row1.endGet();

			tHash_Lookup_row2.endGet();
			globalMap.remove("tHash_Lookup_row2");

			// ###############################

			runStat
					.updateStatOnConnection(
							"newOutput1"
									+ (globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID") != null ? ("." + globalMap
											.get("PARALLEL_ITERATOR_THREAD_ID"))
											: ""), 2, 0);

			ok_Hash.put("tMap_1_TMAP_IN", true);
			end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

			/**
			 * [tMap_1_TMAP_IN end ] stop
			 */
			/*******************************************************************
			 * / [tLogRow_1 end ] start
			 */

			currentComponent = "tLogRow_1";

			// ////

			java.io.PrintStream consoleOut_tLogRow_1 = null;
			if (globalMap.get("tLogRow_CONSOLE") != null) {
				consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
						.get("tLogRow_CONSOLE");
			} else {
				consoleOut_tLogRow_1 = new java.io.PrintStream(
						new java.io.BufferedOutputStream(System.out));
				globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
			}

			consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
			consoleOut_tLogRow_1.flush();
			// ////
			globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

			// /////////////////////

			ok_Hash.put("tLogRow_1", true);
			end_Hash.put("tLogRow_1", System.currentTimeMillis());

			/**
			 * [tLogRow_1 end ] stop
			 */

		} catch (Exception e) {

			throw new TalendException(this, e);
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;
	public static long startTime = 0;

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {

		int exitCode = runJobInTOS(args);

		globalBuffer.clear();

		System.exit(exitCode);
	}

	public static String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		globalBuffer.clear();

		return bufferValue;
	}

	public static synchronized int runJobInTOS(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = test.class
					.getClassLoader()
					.getResourceAsStream(
							"java_project_8/test_0_1/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = test.class.getClassLoader().getResourceAsStream(
						"java_project_8/test_0_1/contexts/" + contextStr
								+ ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		try {
			runStat.startThreadStat(clientHost, portStats);
		} catch (java.io.IOException ioException) {
			ioException.printStackTrace();
		}

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		final test testClass = new test();

		try {
			errorCode = null;
			testClass.tFileInputDelimited_2Process();
			status = "end";
		} catch (TalendException e_tFileInputDelimited_2) {
			status = "failure";
			e_tFileInputDelimited_2.printStackTrace();

		} finally {
		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : test");
		}

		runStat.stopThreadStat();

		reset();

		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {
		errorCode = null;
		status = "";
	}

	private static void reset() {

		defaultProps.clear();
		context.clear();
		currentComponent = "";
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		System.gc();
	}
}
/*******************************************************************************
 * 72214 characters generated by Talend OpenStudio on the 6 juin 2008 15:15:37
 * CEST
 ******************************************************************************/
