// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package java_project_8.hashfilesbench_tmappersistent_0_2;

import routines.libs;
import routines.randomGenerator;
import routines.routine_tMap_10_persistence_01_types;
import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

// the import part of tJava_1
// import java.util.List;

// the import part of tJava_2
// import java.util.List;

/**
 * Job: HashFilesBench_tMapPersistent Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.2.0.qualifier
 * @status
 */
public class HashFilesBench_tMapPersistent {

    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public static Integer nbItems;

        public static String rootFolder;
    }

    private static ContextProperties context = new ContextProperties();

    private static final String jobName = "HashFilesBench_tMapPersistent";

    private static final String projectName = "JAVA_PROJECT_8";

    public static Integer errorCode = null;

    private static String currentComponent = "";

    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();

    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();

    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();

    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    private class TalendException extends Exception {

        private Exception e = null;

        private HashFilesBench_tMapPersistent c = null;

        private TalendException(HashFilesBench_tMapPersistent c, Exception e) {
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
                System.err.println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tJava_1_error(Exception exception) throws TalendException {
        end_Hash.put("tJava_1", System.currentTimeMillis());
        tJava_1_onSubJobError(exception);
    }

    public void tFileInputDelimited_8_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileOutputDelimited_2_error(Exception exception) throws TalendException {
        end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tJava_2_error(Exception exception) throws TalendException {
        end_Hash.put("tJava_2", System.currentTimeMillis());
        tJava_2_onSubJobError(exception);
    }

    public void tFileInputDelimited_9_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHash_lookup_error(Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMap_1_TMAP_OUT_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMap_1_TMAP_IN_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tJava_1_onSubJobError(Exception exception) throws TalendException {
    }

    public void tFileInputDelimited_8_onSubJobError(Exception exception) throws TalendException {
    }

    public void tJava_2_onSubJobError(Exception exception) throws TalendException {
    }

    public void tJava_1Process() throws TalendException {
        try {

            /***********************************************************************************************************
             * / [tJava_1 begin ] start
             */

            ok_Hash.put("tJava_1", false);
            start_Hash.put("tJava_1", System.currentTimeMillis());
            currentComponent = "tJava_1";

            System.out.println("Start processing " + context.nbItems);
            System.out.println(new Date());

            org.talend.commons.utils.time.TimeMeasure.measureActive = false;

            org.talend.commons.utils.time.TimeMeasure.begin("fsi.next()");
            org.talend.commons.utils.time.TimeMeasure.pause("fsi.next()");

            org.talend.commons.utils.time.TimeMeasure.begin("tHash_Lookup");
            org.talend.commons.utils.time.TimeMeasure.pause("tHash_Lookup");

            /**
             * [tJava_1 begin ] stop
             */
            /***********************************************************************************************************
             * / [tJava_1 main ] start
             */

            currentComponent = "tJava_1";

            /**
             * [tJava_1 main ] stop
             */
            /***********************************************************************************************************
             * / [tJava_1 end ] start
             */

            currentComponent = "tJava_1";

            ok_Hash.put("tJava_1", true);
            end_Hash.put("tJava_1", System.currentTimeMillis());

            /**
             * [tJava_1 end ] stop
             */
            tFileInputDelimited_8Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class outStruct implements routines.system.IPersistableRow<outStruct> {

        Integer ID_MAIN;

        String LABEL_MAIN;

        Integer ID_LOOKUP1;

        String LABEL_LOOKUP1;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP1 = null;
                } else {
                    this.ID_LOOKUP1 = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP1 = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ID_LOOKUP1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP1);
                }

                // String

                if (this.LABEL_LOOKUP1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append(", ");

            sb.append("ID_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP1));

            sb.append(", ");

            sb.append("LABEL_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(outStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    private class mainStruct implements routines.system.IPersistableRow<mainStruct> {

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(mainStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    private class after_tFileInputDelimited_8Struct implements
            routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {

        private static final int DEFAULT_HASHCODE = 1;

        private static final int PRIME = 31;

        private int hashCode = DEFAULT_HASHCODE;

        public boolean hashCodeDirty = true;

        Integer ID_MAIN;

        String LABEL_MAIN;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.ID_MAIN == null) ? 0 : this.ID_MAIN.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final after_tFileInputDelimited_8Struct other = (after_tFileInputDelimited_8Struct) obj;

            if (this.ID_MAIN == null) {
                if (other.ID_MAIN != null)
                    return false;
            } else if (!this.ID_MAIN.equals(other.ID_MAIN))
                return false;

            return true;
        }

        public void copyDataTo(after_tFileInputDelimited_8Struct other) {

            other.ID_MAIN = this.ID_MAIN;
            other.LABEL_MAIN = this.LABEL_MAIN;

        }

        public void copyKeysDataTo(after_tFileInputDelimited_8Struct other) {

            other.ID_MAIN = this.ID_MAIN;

        }

        public void readData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_MAIN = null;
                } else {
                    this.ID_MAIN = dis.readInt();
                }

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_MAIN = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_MAIN = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tFileInputDelimited_8Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_MAIN, other.ID_MAIN);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_8Process() throws TalendException {
        try {
            tFileInputDelimited_9Process();

            mainStruct main = new mainStruct();
            outStruct out = new outStruct();

            /***********************************************************************************************************
             * / [tMap_1_TMAP_OUT begin ] start
             */

            ok_Hash.put("tMap_1_TMAP_OUT", false);
            start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
            currentComponent = "tMap_1_TMAP_OUT";

            // ###############################
            // # Lookup's keys initialization

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookupStruct> tHash_Lookup_lookup = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookupStruct>) globalMap
                    .get("tHash_Lookup_lookup");

            lookupStruct lookupHashKey = new lookupStruct();
            lookupStruct lookupDefault = new lookupStruct();
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            // ###############################

            class SortableRow_main implements Comparable<SortableRow_main>,
                    routines.system.IPersistableRow<SortableRow_main> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup__ID_LOOKUP1;

                // main
                Integer main__ID_MAIN;

                String main__LABEL_MAIN;

                public void fillFrom(mainStruct main, Integer exprKey_lookup__ID_LOOKUP1) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.exprKey_lookup__ID_LOOKUP1 = exprKey_lookup__ID_LOOKUP1;

                }

                public void copyDataTo(mainStruct main) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_main other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(this.exprKey_lookup__ID_LOOKUP1,
                            other.exprKey_lookup__ID_LOOKUP1);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1, (String) object2);
                    } else if (object1 instanceof Comparable && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(), object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void readData(ObjectInputStream dis) {

                    try {

                        int length = 0;

                        this.is__rejectedInnerJoin = dis.readBoolean();

                        length = dis.readByte();
                        if (length == -1) {
                            this.main__ID_MAIN = null;
                        } else {
                            this.main__ID_MAIN = dis.readInt();
                        }

                        length = dis.readInt();
                        if (length == -1) {
                            this.main__LABEL_MAIN = null;
                        } else {
                            byte[] byteArray = new byte[length];
                            dis.readFully(byteArray);
                            this.main__LABEL_MAIN = new String(byteArray);
                        }

                        length = dis.readByte();
                        if (length == -1) {
                            this.exprKey_lookup__ID_LOOKUP1 = null;
                        } else {
                            this.exprKey_lookup__ID_LOOKUP1 = dis.readInt();
                        }

                        System.out.println("Read:" + this);

                    } catch (IOException e) {
                        throw new RuntimeException(e);

                    }
                }

                public void writeData(ObjectOutputStream dos) {
                    try {

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup__ID_LOOKUP1 == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.exprKey_lookup__ID_LOOKUP1);
                        }

                        System.out.println("Write:" + this);

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main> fsi_main = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main>(
                    context.rootFolder + "/temp" + "/" + jobName + "_tMapData_main", 15000000) {

                public SortableRow_main createRowInstance() {
                    return new SortableRow_main();
                }
            };

            fsi_main.initPut();

            /**
             * [tMap_1_TMAP_OUT begin ] stop
             */

            /***********************************************************************************************************
             * / [tFileInputDelimited_8 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_8", false);
            start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_8";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
                    context.rootFolder + "/in/files/big_file_main_" + context.nbItems + "_id_label.csv", "ISO-8859-15",
                    ";", "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_8.nextRecord()) {
                main = null;
                boolean whetherReject_tFileInputDelimited_8 = false;
                main = new mainStruct();
                try {
                    String temp_tFileInputDelimited_8 = "";
                    temp_tFileInputDelimited_8 = fid_tFileInputDelimited_8.get(0).trim();
                    if (temp_tFileInputDelimited_8.length() > 0) {
                        main.ID_MAIN = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_8);
                    } else {
                        main.ID_MAIN = null;
                    }
                    main.LABEL_MAIN = fid_tFileInputDelimited_8.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_8 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_8 begin ] stop
                 */
                /*******************************************************************************************************
                 * / [tFileInputDelimited_8 main ] start
                 */

                currentComponent = "tFileInputDelimited_8";

                /**
                 * [tFileInputDelimited_8 main ] stop
                 */
                // Start of branch "main"
                if (main != null) {

                    /***************************************************************************************************
                     * / [tMap_1_TMAP_OUT main ] start
                     */

                    currentComponent = "tMap_1_TMAP_OUT";

                    Integer exprKey_lookup__ID_LOOKUP1 = main.ID_MAIN;

                    SortableRow_main rsc_main = fsi_main.getNextFreeRow();

                    rsc_main.fillFrom(main, exprKey_lookup__ID_LOOKUP1);

                    fsi_main.put(rsc_main);

                    // ###############################
                    // # Input tables (lookups)
                    boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
                    boolean mainRowRejected_tMap_1_TMAP_OUT = false;

                    // { // Dummy bracket to open block for "main" ##(1)##

                    // ###############################
                    { // start of Var scope

                        // ###############################
                        // # Vars tables
                        // ###############################
                        // ###############################
                        // # Output tables

                        // ###############################

                    } // end of Var scope

                    rejectedInnerJoin_tMap_1_TMAP_OUT = false;

                    /**
                     * [tMap_1_TMAP_OUT main ] stop
                     */

                } // End of branch "main"

                /*******************************************************************************************************
                 * / [tFileInputDelimited_8 end ] start
                 */

                currentComponent = "tFileInputDelimited_8";

            }
            fid_tFileInputDelimited_8.close();
            globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

            ok_Hash.put("tFileInputDelimited_8", true);
            end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_8 end ] stop
             */
            /***********************************************************************************************************
             * / [tMap_1_TMAP_OUT end ] start
             */

            currentComponent = "tMap_1_TMAP_OUT";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMap_1_TMAP_OUT", true);
            end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

            /**
             * [tMap_1_TMAP_OUT end ] stop
             */

            /***********************************************************************************************************
             * / [tFileOutputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_2", false);
            start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_2";

            String fileName_tFileOutputDelimited_2 = (new java.io.File(context.rootFolder + "/out/result_"
                    + context.nbItems + ".csv")).getAbsolutePath().replace("\\", "/");
            String fullName_tFileOutputDelimited_2 = null;
            String extension_tFileOutputDelimited_2 = null;
            String directory_tFileOutputDelimited_2 = null;
            if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
                            fileName_tFileOutputDelimited_2.lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
                }
                directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
                        fileName_tFileOutputDelimited_2.lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
                            fileName_tFileOutputDelimited_2.lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
                            .substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                }
                directory_tFileOutputDelimited_2 = "";
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /**
                                                             * Start field tFileOutputDelimited_2:FIELDSEPARATOR
                                                             */
            ";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                                                                     * Start field tFileOutputDelimited_2:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                if (!dir_tFileOutputDelimited_2.exists()) {
                    dir_tFileOutputDelimited_2.mkdirs();
                }
            }

            java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
                    new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);

            /**
             * [tFileOutputDelimited_2 begin ] stop
             */

            /***********************************************************************************************************
             * / [tMap_1_TMAP_IN begin ] start
             */

            ok_Hash.put("tMap_1_TMAP_IN", false);
            start_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());
            currentComponent = "tMap_1_TMAP_IN";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            outStruct out_tmp = new outStruct();
            // ###############################

            /**
             * [tMap_1_TMAP_IN begin ] stop
             */
            /***********************************************************************************************************
             * / [tMap_1_TMAP_IN main ] start
             */

            currentComponent = "tMap_1_TMAP_IN";

            fsi_main.endPut();

            // ###############################
            // # Input tables (lookups)
            boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
            boolean mainRowRejected_tMap_1_TMAP_IN = false;

            // /////////////////////////////////////////////
            // Starting Lookup Table "lookup"
            // /////////////////////////////////////////////

            SortableRow_main rsc_main;

            tHash_Lookup_lookup.initGet();

            fsi_main.initGet();

            // TEST firstLookupIsPersistentSorted=true
            // isFirstPersistentSortedTable=true

            rejectedInnerJoin_tMap_1_TMAP_IN = false;

            while (fsi_main.hasNext()) { // G_TM_M_250 loop "main"

                // CALL close loop of lookup 'main'

                rsc_main = (SortableRow_main) fsi_main.next();
                rsc_main.copyDataTo(main);

                rejectedInnerJoin_tMap_1_TMAP_IN = rsc_main.is__rejectedInnerJoin;

                boolean forceLooplookup = false;

                lookupStruct lookupObjectFromLookup = null;

                if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G 20

                    lookupHashKey.ID_LOOKUP1 = rsc_main.exprKey_lookup__ID_LOOKUP1;

                    tHash_Lookup_lookup.lookup(lookupHashKey);

                    if (!tHash_Lookup_lookup.hasNext()) { // G 090

                    } // G 090

                } // G 20

                lookupStruct lookup = null;

                lookupStruct fromLookup_lookup = null;
                lookup = lookupDefault;

                if (tHash_Lookup_lookup.hasNext()) { // G 099

                    fromLookup_lookup = tHash_Lookup_lookup.next();

                } // G 099

                if (fromLookup_lookup != null) {
                    lookup = fromLookup_lookup;
                }

                // { // Dummy bracket to open block for "main" ##(1)##

                // ###############################
                { // start of Var scope

                    // ###############################
                    // # Vars tables
                    // ###############################
                    // ###############################
                    // # Output tables

                    out = null;

                    // # Output table : 'out'
                    out_tmp.ID_MAIN = main.ID_MAIN;
                    out_tmp.LABEL_MAIN = main.LABEL_MAIN;
                    out_tmp.ID_LOOKUP1 = lookup.ID_LOOKUP1;
                    out_tmp.LABEL_LOOKUP1 = lookup.LABEL_LOOKUP1;
                    out = out_tmp;
                    // ###############################

                } // end of Var scope

                rejectedInnerJoin_tMap_1_TMAP_IN = false;

                /**
                 * [tMap_1_TMAP_IN main ] stop
                 */
                // Start of branch "out"
                if (out != null) {

                    /***************************************************************************************************
                     * / [tFileOutputDelimited_2 main ] start
                     */

                    currentComponent = "tFileOutputDelimited_2";

                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

                    if (out.ID_MAIN != null) {

                        sb_tFileOutputDelimited_2.append(

                        out.ID_MAIN

                        );

                    }

                    sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                    if (out.LABEL_MAIN != null) {

                        sb_tFileOutputDelimited_2.append(

                        out.LABEL_MAIN

                        );

                    }

                    sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                    if (out.ID_LOOKUP1 != null) {

                        sb_tFileOutputDelimited_2.append(

                        out.ID_LOOKUP1

                        );

                    }

                    sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                    if (out.LABEL_LOOKUP1 != null) {

                        sb_tFileOutputDelimited_2.append(

                        out.LABEL_LOOKUP1

                        );

                    }

                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                    outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    nb_line_tFileOutputDelimited_2++;

                    /**
                     * [tFileOutputDelimited_2 main ] stop
                     */

                } // End of branch "out"

            } // G_TM_M_250 close loop read file data 'main'
            /***********************************************************************************************************
             * / [tMap_1_TMAP_IN end ] start
             */

            currentComponent = "tMap_1_TMAP_IN";

            // ###############################
            // # Lookup hashes releasing
            fsi_main.endGet();

            tHash_Lookup_lookup.endGet();

            globalMap.remove("tHash_Lookup_lookup");

            // ###############################

            ok_Hash.put("tMap_1_TMAP_IN", true);
            end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

            /**
             * [tMap_1_TMAP_IN end ] stop
             */
            /***********************************************************************************************************
             * / [tFileOutputDelimited_2 end ] start
             */

            currentComponent = "tFileOutputDelimited_2";

            outtFileOutputDelimited_2.close();
            globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);

            ok_Hash.put("tFileOutputDelimited_2", true);
            end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_2 end ] stop
             */

            tJava_2Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public void tJava_2Process() throws TalendException {
        try {
            /***********************************************************************************************************
             * / [tJava_2 begin ] start
             */

            ok_Hash.put("tJava_2", false);
            start_Hash.put("tJava_2", System.currentTimeMillis());
            currentComponent = "tJava_2";

            System.out.println(new Date());

            org.talend.commons.utils.time.TimeMeasure.end("fsi.next()");
            org.talend.commons.utils.time.TimeMeasure.end("tHash_Lookup");

            /**
             * [tJava_2 begin ] stop
             */
            /***********************************************************************************************************
             * / [tJava_2 main ] start
             */

            currentComponent = "tJava_2";

            /**
             * [tJava_2 main ] stop
             */
            /***********************************************************************************************************
             * / [tJava_2 end ] start
             */

            currentComponent = "tJava_2";

            ok_Hash.put("tJava_2", true);
            end_Hash.put("tJava_2", System.currentTimeMillis());

            /**
             * [tJava_2 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    private class lookupStruct implements routines.system.IPersistableComparableLookupRow<lookupStruct> {

        private static final int DEFAULT_HASHCODE = 1;

        private static final int PRIME = 31;

        private int hashCode = DEFAULT_HASHCODE;

        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP1;

        String LABEL_LOOKUP1;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.ID_LOOKUP1 == null) ? 0 : this.ID_LOOKUP1.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookupStruct other = (lookupStruct) obj;

            if (this.ID_LOOKUP1 == null) {
                if (other.ID_LOOKUP1 != null)
                    return false;
            } else if (!this.ID_LOOKUP1.equals(other.ID_LOOKUP1))
                return false;

            return true;
        }

        public void copyDataTo(lookupStruct other) {

            other.ID_LOOKUP1 = this.ID_LOOKUP1;
            other.LABEL_LOOKUP1 = this.LABEL_LOOKUP1;

        }

        public void copyKeysDataTo(lookupStruct other) {

            other.ID_LOOKUP1 = this.ID_LOOKUP1;

        }

        public void readKeysData(ObjectInputStream dis) {

            try {

                int length = 0;

                length = dis.readByte();
                if (length == -1) {
                    this.ID_LOOKUP1 = null;
                } else {
                    this.ID_LOOKUP1 = dis.readInt();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_LOOKUP1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP1);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP1 = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }
        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

                if (this.LABEL_LOOKUP1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP1));

            sb.append(", ");

            sb.append("LABEL_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookupStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP1, other.ID_LOOKUP1);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_9Process() throws TalendException {
        try {

            lookupStruct lookup = new lookupStruct();

            /***********************************************************************************************************
             * / [tAdvancedHash_lookup begin ] start
             */

            ok_Hash.put("tAdvancedHash_lookup", false);
            start_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());
            currentComponent = "tAdvancedHash_lookup";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.LAST_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookupStruct> tHash_Lookup_lookup = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookupStruct>(
                    matchingModeEnum_lookup, context.rootFolder + "/temp" + "/" + jobName + "_tMapData_Lookup_lookup_",
                    new org.talend.designer.components.persistent.IRowCreator() {

                        public lookupStruct createRowInstance() {
                            return new lookupStruct();
                        }
                    }

                    , 15000000

            );

            tHash_Lookup_lookup.initPut();

            globalMap.put("tHash_Lookup_lookup", tHash_Lookup_lookup);

            /**
             * [tAdvancedHash_lookup begin ] stop
             */

            /***********************************************************************************************************
             * / [tFileInputDelimited_9 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_9", false);
            start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_9";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
                    context.rootFolder + "/in/files/big_file_lookup_" + context.nbItems + "_id_label.csv",
                    "ISO-8859-15", ";", "\n", true, 0, 0, -1, -1);
            while (fid_tFileInputDelimited_9.nextRecord()) {
                lookup = null;
                lookup = null;
                boolean whetherReject_tFileInputDelimited_9 = false;
                lookup = new lookupStruct();
                try {
                    String temp_tFileInputDelimited_9 = "";
                    temp_tFileInputDelimited_9 = fid_tFileInputDelimited_9.get(0).trim();
                    if (temp_tFileInputDelimited_9.length() > 0) {
                        lookup.ID_LOOKUP1 = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_9);
                    } else {
                        lookup.ID_LOOKUP1 = null;
                    }
                    lookup.LABEL_LOOKUP1 = fid_tFileInputDelimited_9.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_9 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_9 begin ] stop
                 */
                /*******************************************************************************************************
                 * / [tFileInputDelimited_9 main ] start
                 */

                currentComponent = "tFileInputDelimited_9";

                /**
                 * [tFileInputDelimited_9 main ] stop
                 */
                // Start of branch "lookup"
                if (lookup != null) {

                    /***************************************************************************************************
                     * / [tAdvancedHash_lookup main ] start
                     */

                    currentComponent = "tAdvancedHash_lookup";

                    lookupStruct lookup_HashRow = tHash_Lookup_lookup.getNextFreeRow();

                    lookup_HashRow.ID_LOOKUP1 = lookup.ID_LOOKUP1;
                    lookup_HashRow.LABEL_LOOKUP1 = lookup.LABEL_LOOKUP1;
                    tHash_Lookup_lookup.put(lookup_HashRow);

                    /**
                     * [tAdvancedHash_lookup main ] stop
                     */

                } // End of branch "lookup"

                /*******************************************************************************************************
                 * / [tFileInputDelimited_9 end ] start
                 */

                currentComponent = "tFileInputDelimited_9";

            }
            fid_tFileInputDelimited_9.close();
            globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

            ok_Hash.put("tFileInputDelimited_9", true);
            end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_9 end ] stop
             */
            /***********************************************************************************************************
             * / [tAdvancedHash_lookup end ] start
             */

            currentComponent = "tAdvancedHash_lookup";

            tHash_Lookup_lookup.endPut();

            ok_Hash.put("tAdvancedHash_lookup", true);
            end_Hash.put("tAdvancedHash_lookup", System.currentTimeMillis());

            /**
             * [tAdvancedHash_lookup end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

    }

    public static boolean watch = false;

    public static int portStats = 3334;

    public static int portTraces = 4334;

    public static String clientHost;

    public static String defaultClientHost = "localhost";

    public static String contextStr = "LOCAL";

    public static String pid = "0";

    public static String rootPid = null;

    public static String fatherPid = null;

    public static long startTime = 0;

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = HashFilesBench_tMapPersistent.class.getClassLoader().getResourceAsStream(
                    "java_project_8/hashfilesbench_tmappersistent_0_2/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = HashFilesBench_tMapPersistent.class.getClassLoader().getResourceAsStream(
                        "java_project_8/hashfilesbench_tmappersistent_0_2/contexts/" + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            try {
                context.nbItems = Integer.parseInt(context.getProperty("nbItems"));
            } catch (NumberFormatException e) {
                context.nbItems = null;
            }

            context.rootFolder = (String) context.getProperty("rootFolder");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final HashFilesBench_tMapPersistent HashFilesBench_tMapPersistentClass = new HashFilesBench_tMapPersistent();
        try {
            errorCode = null;
            HashFilesBench_tMapPersistentClass.tJava_1Process();
            status = "end";
        } catch (TalendException e_tJava_1) {
            status = "failure";
            e_tJava_1.printStackTrace();

        } finally {
        }
        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory)
                    + " bytes memory increase when running : HashFilesBench_tMapPersistent");
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "LOCAL";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/***********************************************************************************************************************
 * 54196 characters generated by Talend OpenStudio on the 12 mai 2008 12:13:05 CEST
 **********************************************************************************************************************/
