// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package java_project.bug4270_4271_tmap_fiter_main_var_heap_except_0_1;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import routines.TalendString;
import routines.system.AssertCatcherUtils;
import routines.system.ParserUtils;
import routines.system.TDieException;

/**
 * Job: Bug4270_4271_tMap_fiter_main_var_heap_except Purpose: <br>
 * Description: <br>
 * 
 * @author M, A
 * @version 2.2.0.qualifier
 * @status
 */
public class Bug4270_4271_tMap_fiter_main_var_heap_except {

    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public static String param_file_path;

        public static String data_dir;

        public static String data_output_dir;

        public static String result_host;

        public static String result_port;

        public static String result_database;

        public static String result_username;

        public static String result_password;

        public static String result_table;

        public static String mysql_host;

        public static String mysql_port;

        public static String mysql_schema;

        public static String mysql_username;

        public static String mysql_password;

        public static String current_job_dir;
    }

    private static ContextProperties context = new ContextProperties();

    private static final String jobName = "Bug4270_4271_tMap_fiter_main_var_heap_except";

    private static final String projectName = "JAVA_PROJECT";

    public static Integer errorCode = null;

    private static String currentComponent = "";

    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();

    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();

    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();

    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

    private class TalendException extends Exception {

        private Exception e = null;

        private Bug4270_4271_tMap_fiter_main_var_heap_except c = null;

        private TalendException(Bug4270_4271_tMap_fiter_main_var_heap_except c, Exception e) {
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
                System.err.println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tAssertCatcher_1_error(Exception exception) throws TalendException {
        end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tReplicate_1_error(Exception exception) throws TalendException {
        end_Hash.put("tReplicate_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tMysqlOutput_1_error(Exception exception) throws TalendException {
        end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tAssertCatcher_1_onSubJobError(exception);
    }

    public void tFileInputDelimited_2_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tContextLoad_1_error(Exception exception) throws TalendException {
        end_Hash.put("tContextLoad_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_2_onSubJobError(exception);
    }

    public void tFileInputDelimited_8_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMap_2_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileOutputDelimited_2_error(Exception exception) throws TalendException {
        end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileOutputDelimited_3_error(Exception exception) throws TalendException {
        end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileCompare_1_error(Exception exception) throws TalendException {
        end_Hash.put("tFileCompare_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileCompare_1_onSubJobError(exception);
    }

    public void tAssert_7_error(Exception exception) throws TalendException {
        end_Hash.put("tAssert_7", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tAssert_7_onSubJobError(exception);
    }

    public void tFileCompare_2_error(Exception exception) throws TalendException {
        end_Hash.put("tFileCompare_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileCompare_2_onSubJobError(exception);
    }

    public void tAssert_2_error(Exception exception) throws TalendException {
        end_Hash.put("tAssert_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tAssert_2_onSubJobError(exception);
    }

    public void tFileInputDelimited_4_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tFileInputDelimited_5_error(Exception exception) throws TalendException {
        end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHash_lookup1_error(Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHash_lookup1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAdvancedHash_lookup2_error(Exception exception) throws TalendException {
        end_Hash.put("tAdvancedHash_lookup2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMap_4_TMAP_OUT_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tMap_4_TMAP_IN_error(Exception exception) throws TalendException {
        end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception
                    .getMessage());
            tAssertCatcher_1Process();
        }
        tFileInputDelimited_8_onSubJobError(exception);
    }

    public void tAssertCatcher_1_onSubJobError(Exception exception) throws TalendException {
    }

    public void tFileInputDelimited_2_onSubJobError(Exception exception) throws TalendException {
    }

    public void tFileInputDelimited_8_onSubJobError(Exception exception) throws TalendException {
    }

    public void tFileCompare_1_onSubJobError(Exception exception) throws TalendException {
    }

    public void tAssert_7_onSubJobError(Exception exception) throws TalendException {
    }

    public void tFileCompare_2_onSubJobError(Exception exception) throws TalendException {
    }

    public void tAssert_2_onSubJobError(Exception exception) throws TalendException {
    }

    static class copyOfrow2Struct implements routines.system.IPersistableRow<copyOfrow2Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String project;

        String job;

        String language;

        String origin;

        String status;

        String substatus;

        String description;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.language = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.language = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.status = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.status = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.substatus = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.substatus = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.description = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.description = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.language == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.language.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.status == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.status.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.substatus == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.substatus.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.description == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.description.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("language");
            sb.append("=");
            sb.append(String.valueOf(this.language));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("status");
            sb.append("=");
            sb.append(String.valueOf(this.status));

            sb.append(", ");

            sb.append("substatus");
            sb.append("=");
            sb.append(String.valueOf(this.substatus));

            sb.append(", ");

            sb.append("description");
            sb.append("=");
            sb.append(String.valueOf(this.description));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(copyOfrow2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class row1Struct implements routines.system.IPersistableRow<row1Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;

        String pid;

        String project;

        String job;

        String language;

        String origin;

        String status;

        String substatus;

        String description;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.language = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.language = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.status = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.status = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.substatus = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.substatus = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.description = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.description = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.language == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.language.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.status == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.status.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.substatus == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.substatus.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.description == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.description.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("language");
            sb.append("=");
            sb.append(String.valueOf(this.language));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("status");
            sb.append("=");
            sb.append(String.valueOf(this.status));

            sb.append(", ");

            sb.append("substatus");
            sb.append("=");
            sb.append(String.valueOf(this.substatus));

            sb.append(", ");

            sb.append("description");
            sb.append("=");
            sb.append(String.valueOf(this.description));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row1Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tAssertCatcher_1Process() throws TalendException {
        globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 0);
        try {

            row1Struct row1 = new row1Struct();
            copyOfrow2Struct copyOfrow2 = new copyOfrow2Struct();

            /**
             * [tMysqlOutput_1 begin ] start
             */

            ok_Hash.put("tMysqlOutput_1", false);
            start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
            currentComponent = "tMysqlOutput_1";

            int nb_line_tMysqlOutput_1 = 0;
            int nb_line_update_tMysqlOutput_1 = 0;
            int nb_line_inserted_tMysqlOutput_1 = 0;
            int nb_line_deleted_tMysqlOutput_1 = 0;

            int deletedCount_tMysqlOutput_1 = 0;
            int updatedCount_tMysqlOutput_1 = 0;
            int insertedCount_tMysqlOutput_1 = 0;

            String tableName_tMysqlOutput_1 = context.result_table;
            boolean whetherReject_tMysqlOutput_1 = false;

            java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
            calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
            long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
            calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
            long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
            long date_tMysqlOutput_1;

            java.sql.Connection conn_tMysqlOutput_1 = null;
            java.lang.Class.forName("org.gjt.mm.mysql.Driver");

            String url_tMysqlOutput_1 = "jdbc:mysql://" + context.result_host + ":" + context.result_port + "/"
                    + context.result_database + "?" + "noDatetimeStringSync=true";

            String dbUser_tMysqlOutput_1 = context.result_username;
            String dbPwd_tMysqlOutput_1 = context.result_password;
            conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
                    dbPwd_tMysqlOutput_1);
            conn_tMysqlOutput_1.setAutoCommit(false);

            java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
            java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables(null, null, null,
                    new String[] { "TABLE" });
            boolean whetherExist_tMysqlOutput_1 = false;
            while (rsTable_tMysqlOutput_1.next()) {
                String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                if (table_tMysqlOutput_1.equalsIgnoreCase(context.result_table)) {
                    whetherExist_tMysqlOutput_1 = true;
                    break;
                }
            }
            if (!whetherExist_tMysqlOutput_1) {
                java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
                stmtCreate_tMysqlOutput_1
                        .execute("CREATE TABLE `"
                                + tableName_tMysqlOutput_1
                                + "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`project` VARCHAR(50)  ,`job` VARCHAR(50)  ,`language` VARCHAR(5)  ,`origin` VARCHAR(50)  ,`status` VARCHAR(10)  ,`substatus` VARCHAR(255)  ,`description` VARCHAR(255)  )");
            }
            java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
                    .prepareStatement("INSERT INTO `"
                            + context.result_table
                            + "` (`moment`,`pid`,`project`,`job`,`language`,`origin`,`status`,`substatus`,`description`) VALUES (?,?,?,?,?,?,?,?,?)");

            int commitEvery_tMysqlOutput_1 = 100;

            int commitCounter_tMysqlOutput_1 = 0;

            /**
             * [tMysqlOutput_1 begin ] stop
             */

            /**
             * [tReplicate_1 begin ] start
             */

            ok_Hash.put("tReplicate_1", false);
            start_Hash.put("tReplicate_1", System.currentTimeMillis());
            currentComponent = "tReplicate_1";

            /**
             * [tReplicate_1 begin ] stop
             */

            /**
             * [tAssertCatcher_1 begin ] start
             */

            ok_Hash.put("tAssertCatcher_1", false);
            start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
            currentComponent = "tAssertCatcher_1";

            for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1.getMessages()) {
                row1.moment = acm.getMoment();
                row1.pid = acm.getPid();
                row1.project = acm.getProject();
                row1.job = acm.getJob();
                row1.language = acm.getLanguage();

                row1.origin = (acm.getOrigin() == null || acm.getOrigin().length() < 1 ? null : acm.getOrigin());

                row1.status = acm.getStatus();
                row1.substatus = acm.getSubstatus();
                row1.description = acm.getDescription();

                /**
                 * [tAssertCatcher_1 begin ] stop
                 */
                /**
                 * [tAssertCatcher_1 main ] start
                 */

                currentComponent = "tAssertCatcher_1";

                /**
                 * [tAssertCatcher_1 main ] stop
                 */

                /**
                 * [tReplicate_1 main ] start
                 */

                currentComponent = "tReplicate_1";

                copyOfrow2 = new copyOfrow2Struct();

                copyOfrow2.moment = row1.moment;
                copyOfrow2.pid = row1.pid;
                copyOfrow2.project = row1.project;
                copyOfrow2.job = row1.job;
                copyOfrow2.language = row1.language;
                copyOfrow2.origin = row1.origin;
                copyOfrow2.status = row1.status;
                copyOfrow2.substatus = row1.substatus;
                copyOfrow2.description = row1.description;

                /**
                 * [tReplicate_1 main ] stop
                 */

                /**
                 * [tMysqlOutput_1 main ] start
                 */

                currentComponent = "tMysqlOutput_1";

                whetherReject_tMysqlOutput_1 = false;
                if (copyOfrow2.moment != null) {
                    date_tMysqlOutput_1 = copyOfrow2.moment.getTime();
                    if (date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
                        pstmt_tMysqlOutput_1.setString(1, "0000-00-00 00:00:00");
                    } else {
                        pstmt_tMysqlOutput_1.setTimestamp(1, new java.sql.Timestamp(date_tMysqlOutput_1));
                    }
                } else {
                    pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);
                }

                if (copyOfrow2.pid == null) {
                    pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(2, copyOfrow2.pid);
                }

                if (copyOfrow2.project == null) {
                    pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(3, copyOfrow2.project);
                }

                if (copyOfrow2.job == null) {
                    pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(4, copyOfrow2.job);
                }

                if (copyOfrow2.language == null) {
                    pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(5, copyOfrow2.language);
                }

                if (copyOfrow2.origin == null) {
                    pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(6, copyOfrow2.origin);
                }

                if (copyOfrow2.status == null) {
                    pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(7, copyOfrow2.status);
                }

                if (copyOfrow2.substatus == null) {
                    pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(8, copyOfrow2.substatus);
                }

                if (copyOfrow2.description == null) {
                    pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(9, copyOfrow2.description);
                }

                try {
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmt_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch (Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                    throw (e);
                }
                commitCounter_tMysqlOutput_1++;

                if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();

                    commitCounter_tMysqlOutput_1 = 0;

                }

                /**
                 * [tMysqlOutput_1 main ] stop
                 */

                /**
                 * [tAssertCatcher_1 end ] start
                 */

                currentComponent = "tAssertCatcher_1";

            }

            ok_Hash.put("tAssertCatcher_1", true);
            end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

            /**
             * [tAssertCatcher_1 end ] stop
             */

            /**
             * [tReplicate_1 end ] start
             */

            currentComponent = "tReplicate_1";

            ok_Hash.put("tReplicate_1", true);
            end_Hash.put("tReplicate_1", System.currentTimeMillis());

            /**
             * [tReplicate_1 end ] stop
             */

            /**
             * [tMysqlOutput_1 end ] start
             */

            currentComponent = "tMysqlOutput_1";

            if (pstmt_tMysqlOutput_1 != null) {

                pstmt_tMysqlOutput_1.close();

            }

            conn_tMysqlOutput_1.commit();

            conn_tMysqlOutput_1.close();

            nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1 + deletedCount_tMysqlOutput_1;
            nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
            nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;

            globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED", nb_line_update_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED", nb_line_inserted_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_DELETED", nb_line_deleted_tMysqlOutput_1);

            ok_Hash.put("tMysqlOutput_1", true);
            end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

            /**
             * [tMysqlOutput_1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 1);
    }

    static class row6Struct implements routines.system.IPersistableRow<row6Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        String key;

        String value;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.key = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.key = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.value = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.value = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.key == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.key.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.value == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.value.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("key");
            sb.append("=");
            sb.append(String.valueOf(this.key));

            sb.append(", ");

            sb.append("value");
            sb.append("=");
            sb.append(String.valueOf(this.value));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row6Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_2Process() throws TalendException {
        globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);
        try {

            row6Struct row6 = new row6Struct();

            /**
             * [tContextLoad_1 begin ] start
             */

            ok_Hash.put("tContextLoad_1", false);
            start_Hash.put("tContextLoad_1", System.currentTimeMillis());
            currentComponent = "tContextLoad_1";

            java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
            int nb_line_tContextLoad_1 = 0;

            /**
             * [tContextLoad_1 begin ] stop
             */

            /**
             * [tFileInputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_2", false);
            start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_2";

            int nb_line_tFileInputDelimited_2 = 0;
            int footer_tFileInputDelimited_2 = 0;
            int totalLinetFileInputDelimited_2 = 0;
            int limittFileInputDelimited_2 = -1;
            int lastLinetFileInputDelimited_2 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(new java.io.BufferedReader(
                    new java.io.InputStreamReader(new java.io.FileInputStream(/**
                                                                                 * Start field
                                                                                 * tFileInputDelimited_2:FILENAME
                                                                                 */
                    context.param_file_path/**
                                             * End field tFileInputDelimited_2:FILENAME
                                             */
                    ), "ISO-8859-15")), ',');

            csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
            csvReadertFileInputDelimited_2.setTextQualifier('"');

            csvReadertFileInputDelimited_2.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_2 = null;

            if (footer_tFileInputDelimited_2 > 0) {

                while (csvReadertFileInputDelimited_2.readRecord()) {
                    rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();
                    if (!(rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0].equals("\015"))) {// empty
                                                                                                                // line
                                                                                                                // when
                                                                                                                // row
                                                                                                                // separator
                        // is '\n'

                        totalLinetFileInputDelimited_2++;

                    }

                }
                int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 < 0 ? 0
                        : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
                if (lastLinetFileInputDelimited_2 > 0) {
                    lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
                            : lastLineTemptFileInputDelimited_2;
                } else {
                    lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
                }

                csvReadertFileInputDelimited_2.close();

                csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(new java.io.BufferedReader(
                        new java.io.InputStreamReader(new java.io.FileInputStream(/**
                                                                                     * Start field
                                                                                     * tFileInputDelimited_2:FILENAME
                                                                                     */
                        context.param_file_path/**
                                                 * End field tFileInputDelimited_2:FILENAME
                                                 */
                        ), "ISO-8859-15")), ',');
                csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
                csvReadertFileInputDelimited_2.setTextQualifier('"');

                csvReadertFileInputDelimited_2.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_2 = 0;
            int outputLinetFileInputDelimited_2 = 0;

            while (csvReadertFileInputDelimited_2.readRecord()) {

                rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

                if (rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                    // line
                    // when
                    // row
                    // separator
                    // is
                    // '\n'
                    continue;
                }

                currentLinetFileInputDelimited_2++;
                if (currentLinetFileInputDelimited_2 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
                    break;
                }
                outputLinetFileInputDelimited_2++;
                if (limittFileInputDelimited_2 != -1 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
                    break;
                }

                row6 = null;
                boolean whetherReject_tFileInputDelimited_2 = false;
                row6 = new row6Struct();
                try {

                    if (rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                        // line
                        // when
                        // row
                        // separator
                        // is
                        // '\n'

                        row6.key = null;

                        row6.value = null;

                    } else {

                        if (0 < rowtFileInputDelimited_2.length) {
                            row6.key = rowtFileInputDelimited_2[0].trim();

                        } else {

                            row6.key = null;

                        }

                        if (1 < rowtFileInputDelimited_2.length) {
                            row6.value = rowtFileInputDelimited_2[1].trim();

                        } else {

                            row6.value = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_2 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_2 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_2 main ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                /**
                 * [tFileInputDelimited_2 main ] stop
                 */
                // Start of branch "row6"
                if (row6 != null) {

                    /**
                     * [tContextLoad_1 main ] start
                     */

                    currentComponent = "tContextLoad_1";

                    // ////////////////////////
                    String key_tContextLoad_1 = null;
                    if (row6.key != null) {
                        key_tContextLoad_1 = row6.key;
                    }
                    String value_tContextLoad_1 = null;
                    if (row6.value != null) {
                        value_tContextLoad_1 = row6.value;
                    }
                    if (context.getProperty(key_tContextLoad_1) != null) {
                        context.setProperty(key_tContextLoad_1, value_tContextLoad_1);

                        if (key_tContextLoad_1 != null && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;
                        }

                        assignList_tContextLoad_1.add(key_tContextLoad_1);
                    } else {
                        context.setProperty(key_tContextLoad_1, value_tContextLoad_1);

                        if (key_tContextLoad_1 != null && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "mysql_schema".equals(key_tContextLoad_1)) {
                            context.mysql_schema = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;

                        }

                        newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
                    }
                    nb_line_tContextLoad_1++;
                    // ////////////////////////

                    /**
                     * [tContextLoad_1 main ] stop
                     */

                } // End of branch "row6"

                /**
                 * [tFileInputDelimited_2 end ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                nb_line_tFileInputDelimited_2++;
            }
            csvReadertFileInputDelimited_2.close();
            globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);

            ok_Hash.put("tFileInputDelimited_2", true);
            end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_2 end ] stop
             */

            /**
             * [tContextLoad_1 end ] start
             */

            currentComponent = "tContextLoad_1";

            java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
            while (enu_tContextLoad_1.hasMoreElements()) {
                String key_tContextLoad_1 = (String) enu_tContextLoad_1.nextElement();
                if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
                        && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1)) {
                    noAssignList_tContextLoad_1.add(key_tContextLoad_1);
                }
            }
            globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

            ok_Hash.put("tContextLoad_1", true);
            end_Hash.put("tContextLoad_1", System.currentTimeMillis());

            /**
             * [tContextLoad_1 end ] stop
             */

            tFileInputDelimited_8Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
    }

    static class outStruct implements routines.system.IPersistableRow<outStruct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        Integer ID_MAIN;

        String LABEL_MAIN;

        String var1;

        Integer ID_LOOKUP;

        String LABEL_LOOKUP1;

        Integer ID_LOOKUP_1;

        String LABEL_LOOKUP2;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_MAIN = null;
                    } else {
                        this.ID_MAIN = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_MAIN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_MAIN = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.var1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.var1 = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP = null;
                    } else {
                        this.ID_LOOKUP = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_LOOKUP1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_LOOKUP1 = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP_1 = null;
                    } else {
                        this.ID_LOOKUP_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_LOOKUP2 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_LOOKUP2 = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.var1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.var1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ID_LOOKUP == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP);
                }

                // String

                if (this.LABEL_LOOKUP1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ID_LOOKUP_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_1);
                }

                // String

                if (this.LABEL_LOOKUP2 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP2.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append(", ");

            sb.append("var1");
            sb.append("=");
            sb.append(String.valueOf(this.var1));

            sb.append(", ");

            sb.append("ID_LOOKUP");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP));

            sb.append(", ");

            sb.append("LABEL_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP1));

            sb.append(", ");

            sb.append("ID_LOOKUP_1");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_1));

            sb.append(", ");

            sb.append("LABEL_LOOKUP2");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP2));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(outStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class inner_joinStruct implements routines.system.IPersistableRow<inner_joinStruct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        Integer ID_MAIN;

        String LABEL_MAIN;

        String var1;

        Integer ID_LOOKUP;

        String LABEL_LOOKUP1;

        Integer ID_LOOKUP_1;

        String LABEL_LOOKUP2;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_MAIN = null;
                    } else {
                        this.ID_MAIN = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_MAIN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_MAIN = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.var1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.var1 = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP = null;
                    } else {
                        this.ID_LOOKUP = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_LOOKUP1 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_LOOKUP1 = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP_1 = null;
                    } else {
                        this.ID_LOOKUP_1 = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_LOOKUP2 = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_LOOKUP2 = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.var1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.var1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ID_LOOKUP == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP);
                }

                // String

                if (this.LABEL_LOOKUP1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.ID_LOOKUP_1 == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP_1);
                }

                // String

                if (this.LABEL_LOOKUP2 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP2.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append(", ");

            sb.append("var1");
            sb.append("=");
            sb.append(String.valueOf(this.var1));

            sb.append(", ");

            sb.append("ID_LOOKUP");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP));

            sb.append(", ");

            sb.append("LABEL_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP1));

            sb.append(", ");

            sb.append("ID_LOOKUP_1");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP_1));

            sb.append(", ");

            sb.append("LABEL_LOOKUP2");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP2));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(inner_joinStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class mainStruct implements routines.system.IPersistableRow<mainStruct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_MAIN = null;
                    } else {
                        this.ID_MAIN = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_MAIN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_MAIN = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(mainStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class startStruct implements routines.system.IPersistableRow<startStruct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_MAIN = null;
                    } else {
                        this.ID_MAIN = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_MAIN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_MAIN = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(startStruct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    static class after_tFileInputDelimited_8Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        Integer ID_MAIN;

        String LABEL_MAIN;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_MAIN = null;
                    } else {
                        this.ID_MAIN = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.LABEL_MAIN = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.LABEL_MAIN = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_MAIN == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_MAIN);
                }

                // String

                if (this.LABEL_MAIN == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_MAIN.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.ID_MAIN));

            sb.append(", ");

            sb.append("LABEL_MAIN");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_MAIN));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tFileInputDelimited_8Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_8Process() throws TalendException {
        globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);
        try {
            tFileInputDelimited_4Process();
            tFileInputDelimited_5Process();

            startStruct start = new startStruct();
            mainStruct main = new mainStruct();
            outStruct out = new outStruct();
            inner_joinStruct inner_join = new inner_joinStruct();

            /**
             * [tMap_4_TMAP_OUT begin ] start
             */

            ok_Hash.put("tMap_4_TMAP_OUT", false);
            start_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());
            currentComponent = "tMap_4_TMAP_OUT";

            // ###############################
            // # Lookup's keys initialization

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup1Struct> tHash_Lookup_lookup1 = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup1Struct>) ((org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup1Struct>) globalMap
                    .get("tHash_Lookup_lookup1"));

            lookup1Struct lookup1HashKey = new lookup1Struct();
            lookup1Struct lookup1Default = new lookup1Struct();

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup2Struct> tHash_Lookup_lookup2 = (org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup2Struct>) ((org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup2Struct>) globalMap
                    .get("tHash_Lookup_lookup2"));

            lookup2Struct lookup2HashKey = new lookup2Struct();
            lookup2Struct lookup2Default = new lookup2Struct();
            // ###############################

            // ###############################
            // # Vars initialization
            class Var__tMap_4_TMAP_OUT__Struct {

                String var1;
            }
            Var__tMap_4_TMAP_OUT__Struct Var__tMap_4_TMAP_OUT = new Var__tMap_4_TMAP_OUT__Struct();
            // ###############################

            // ###############################
            // # Outputs initialization
            // ###############################

            class SortableRow_main implements Comparable<SortableRow_main>, routines.system.IPersistableRow<SortableRow_main> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup1__ID_LOOKUP;

                // main
                Integer main__ID_MAIN;

                String main__LABEL_MAIN;

                public void fillFrom(mainStruct main, Integer exprKey_lookup1__ID_LOOKUP) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.exprKey_lookup1__ID_LOOKUP = exprKey_lookup1__ID_LOOKUP;

                }

                public void copyDataTo(mainStruct main) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_main other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(this.exprKey_lookup1__ID_LOOKUP, other.exprKey_lookup1__ID_LOOKUP);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1, (String) object2);
                    } else if (object1 instanceof Comparable && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(), object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void readData(ObjectInputStream dis) {

                    synchronized (mainStruct.commonByteArrayLock) {

                        try {

                            int length = 0;

                            this.is__rejectedInnerJoin = dis.readBoolean();

                            length = dis.readByte();
                            if (length == -1) {
                                this.main__ID_MAIN = null;
                            } else {
                                this.main__ID_MAIN = dis.readInt();
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.main__LABEL_MAIN = null;
                            } else {
                                if (length > mainStruct.commonByteArray.length) {
                                    if (length < 1024 && mainStruct.commonByteArray.length == 0) {
                                        mainStruct.commonByteArray = new byte[1024];
                                    } else {
                                        mainStruct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis.readFully(mainStruct.commonByteArray, 0, length);
                                this.main__LABEL_MAIN = new String(mainStruct.commonByteArray, 0, length);
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.exprKey_lookup1__ID_LOOKUP = null;
                            } else {
                                this.exprKey_lookup1__ID_LOOKUP = dis.readInt();
                            }

                        } catch (IOException e) {
                            throw new RuntimeException(e);

                        }

                    }
                }

                public void writeData(ObjectOutputStream dos) {
                    try {

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup1__ID_LOOKUP == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.exprKey_lookup1__ID_LOOKUP);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main> fsi_main = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main>(
                    context.data_output_dir + "/" + jobName + "_tMapData_main", 10000000) {

                public SortableRow_main createRowInstance() {
                    return new SortableRow_main();
                }
            };

            fsi_main.initPut();

            class SortableRow_main__lookup1 implements Comparable<SortableRow_main__lookup1>,
                    routines.system.IPersistableRow<SortableRow_main__lookup1> { // G_TM_B_001

                boolean is__rejectedInnerJoin;

                Integer exprKey_lookup2__ID_LOOKUP;

                // lookup1
                Integer main__ID_MAIN;

                String main__LABEL_MAIN;

                Integer lookup1__ID_LOOKUP;

                String lookup1__LABEL_LOOKUP1;

                public void fillFrom(mainStruct main, lookup1Struct lookup1, Integer exprKey_lookup2__ID_LOOKUP) {

                    this.main__ID_MAIN = main.ID_MAIN;
                    this.main__LABEL_MAIN = main.LABEL_MAIN;
                    this.lookup1__ID_LOOKUP = lookup1.ID_LOOKUP;
                    this.lookup1__LABEL_LOOKUP1 = lookup1.LABEL_LOOKUP1;
                    this.exprKey_lookup2__ID_LOOKUP = exprKey_lookup2__ID_LOOKUP;

                }

                public void copyDataTo(mainStruct main, lookup1Struct lookup1) {

                    main.ID_MAIN = this.main__ID_MAIN;
                    main.LABEL_MAIN = this.main__LABEL_MAIN;
                    lookup1.ID_LOOKUP = this.lookup1__ID_LOOKUP;
                    lookup1.LABEL_LOOKUP1 = this.lookup1__LABEL_LOOKUP1;

                }

                public String toString() {

                    StringBuilder sb = new StringBuilder();
                    sb.append(super.toString());
                    sb.append("[");

                    sb.append("main__ID_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__ID_MAIN));

                    sb.append(", ");

                    sb.append("main__LABEL_MAIN");
                    sb.append("=");
                    sb.append(String.valueOf(this.main__LABEL_MAIN));

                    sb.append(", ");

                    sb.append("lookup1__ID_LOOKUP");
                    sb.append("=");
                    sb.append(String.valueOf(this.lookup1__ID_LOOKUP));

                    sb.append(", ");

                    sb.append("lookup1__LABEL_LOOKUP1");
                    sb.append("=");
                    sb.append(String.valueOf(this.lookup1__LABEL_LOOKUP1));

                    sb.append("]");

                    return sb.toString();
                }

                public int compareTo(SortableRow_main__lookup1 other) {

                    int returnValue = 0;

                    returnValue = checkNullsAndCompare(this.exprKey_lookup2__ID_LOOKUP, other.exprKey_lookup2__ID_LOOKUP);
                    if (returnValue != 0) {
                        return returnValue;
                    }

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {

                    int ascendingInt = 1;

                    int returnValue = 0;
                    if (object1 instanceof String && object2 instanceof String) {
                        returnValue = compareStrings((String) object1, (String) object2);
                    } else if (object1 instanceof Comparable && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(), object2.toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return ascendingInt * returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    boolean ignoreCase = true;
                    if (ignoreCase) {
                        return string1.compareToIgnoreCase(string2);
                    } else {
                        return string1.compareTo(string2);
                    }
                }

                public void readData(ObjectInputStream dis) {

                    synchronized (lookup1Struct.commonByteArrayLock) {

                        try {

                            int length = 0;

                            this.is__rejectedInnerJoin = dis.readBoolean();

                            length = dis.readByte();
                            if (length == -1) {
                                this.main__ID_MAIN = null;
                            } else {
                                this.main__ID_MAIN = dis.readInt();
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.main__LABEL_MAIN = null;
                            } else {
                                if (length > lookup1Struct.commonByteArray.length) {
                                    if (length < 1024 && lookup1Struct.commonByteArray.length == 0) {
                                        lookup1Struct.commonByteArray = new byte[1024];
                                    } else {
                                        lookup1Struct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis.readFully(lookup1Struct.commonByteArray, 0, length);
                                this.main__LABEL_MAIN = new String(lookup1Struct.commonByteArray, 0, length);
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.lookup1__ID_LOOKUP = null;
                            } else {
                                this.lookup1__ID_LOOKUP = dis.readInt();
                            }

                            length = dis.readInt();
                            if (length == -1) {
                                this.lookup1__LABEL_LOOKUP1 = null;
                            } else {
                                if (length > lookup1Struct.commonByteArray.length) {
                                    if (length < 1024 && lookup1Struct.commonByteArray.length == 0) {
                                        lookup1Struct.commonByteArray = new byte[1024];
                                    } else {
                                        lookup1Struct.commonByteArray = new byte[2 * length];
                                    }
                                }
                                dis.readFully(lookup1Struct.commonByteArray, 0, length);
                                this.lookup1__LABEL_LOOKUP1 = new String(lookup1Struct.commonByteArray, 0, length);
                            }

                            length = dis.readByte();
                            if (length == -1) {
                                this.exprKey_lookup2__ID_LOOKUP = null;
                            } else {
                                this.exprKey_lookup2__ID_LOOKUP = dis.readInt();
                            }

                        } catch (IOException e) {
                            throw new RuntimeException(e);

                        }

                    }
                }

                public void writeData(ObjectOutputStream dos) {
                    try {

                        dos.writeBoolean(this.is__rejectedInnerJoin);

                        if (this.main__ID_MAIN == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.main__ID_MAIN);
                        }

                        if (this.main__LABEL_MAIN == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.main__LABEL_MAIN.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.lookup1__ID_LOOKUP == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.lookup1__ID_LOOKUP);
                        }

                        if (this.lookup1__LABEL_LOOKUP1 == null) {
                            dos.writeInt(-1);
                        } else {
                            byte[] byteArray = this.lookup1__LABEL_LOOKUP1.getBytes();
                            dos.writeInt(byteArray.length);
                            dos.write(byteArray);
                        }

                        if (this.exprKey_lookup2__ID_LOOKUP == null) {
                            dos.writeByte(-1);
                        } else {
                            dos.writeByte(0);
                            dos.writeInt(this.exprKey_lookup2__ID_LOOKUP);
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }

            } // G_TM_B_001

            org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup1> fsi_main__lookup1 = new org.talend.designer.components.persistent.PersistentRowSorterIterator<SortableRow_main__lookup1>(
                    context.data_output_dir + "/" + jobName + "_tMapData_main__lookup1", 10000000) {

                public SortableRow_main__lookup1 createRowInstance() {
                    return new SortableRow_main__lookup1();
                }
            };

            fsi_main__lookup1.initPut();

            /**
             * [tMap_4_TMAP_OUT begin ] stop
             */

            /**
             * [tMap_2 begin ] start
             */

            ok_Hash.put("tMap_2", false);
            start_Hash.put("tMap_2", System.currentTimeMillis());
            currentComponent = "tMap_2";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            // ###############################

            // ###############################
            // # Outputs initialization
            mainStruct main_tmp = new mainStruct();
            // ###############################

            /**
             * [tMap_2 begin ] stop
             */

            /**
             * [tFileInputDelimited_8 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_8", false);
            start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_8";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir") + context.current_job_dir + "in/main.csv", "ISO-8859-15", ";", "\n",
                    true, 0, 0, -1, -1, false);
            while (fid_tFileInputDelimited_8.nextRecord()) {
                start = null;
                boolean whetherReject_tFileInputDelimited_8 = false;
                start = new startStruct();
                try {
                    String temp_tFileInputDelimited_8 = "";
                    temp_tFileInputDelimited_8 = fid_tFileInputDelimited_8.get(0).trim();
                    if (temp_tFileInputDelimited_8.length() > 0) {
                        start.ID_MAIN = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_8);
                    } else {
                        start.ID_MAIN = null;
                    }
                    start.LABEL_MAIN = fid_tFileInputDelimited_8.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_8 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_8 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_8 main ] start
                 */

                currentComponent = "tFileInputDelimited_8";

                /**
                 * [tFileInputDelimited_8 main ] stop
                 */
                // Start of branch "start"
                if (start != null) {

                    /**
                     * [tMap_2 main ] start
                     */

                    currentComponent = "tMap_2";

                    boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

                    // ###############################
                    // # Input tables (lookups)
                    boolean rejectedInnerJoin_tMap_2 = false;
                    boolean mainRowRejected_tMap_2 = false;

                    // { // Dummy bracket to open block for "start" ##(1)##

                    // ###############################
                    { // start of Var scope

                        // ###############################
                        // # Vars tables
                        // ###############################
                        // ###############################
                        // # Output tables

                        main = null;

                        // # Output table : 'main'
                        main_tmp.ID_MAIN = start.ID_MAIN;
                        main_tmp.LABEL_MAIN = start.LABEL_MAIN.length() == 0 ? null : start.LABEL_MAIN;
                        main = main_tmp;
                        // ###############################

                    } // end of Var scope

                    rejectedInnerJoin_tMap_2 = false;

                    /**
                     * [tMap_2 main ] stop
                     */
                    // Start of branch "main"
                    if (main != null) {

                        /**
                         * [tMap_4_TMAP_OUT main ] start
                         */

                        currentComponent = "tMap_4_TMAP_OUT";

                        boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

                        if (

                        (

                        main.LABEL_MAIN != null

                        )

                        ) { // G_TM_M_281

                            hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

                            Integer exprKey_lookup1__ID_LOOKUP = main.LABEL_MAIN.toString().length() > 0 ? main.ID_MAIN : null;

                            SortableRow_main rsc_main = fsi_main.getNextFreeRow();

                            rsc_main.fillFrom(main, exprKey_lookup1__ID_LOOKUP);

                            fsi_main.put(rsc_main);

                        } // G_TM_M_281

                        // ###############################
                        // # Input tables (lookups)
                        boolean rejectedInnerJoin_tMap_4_TMAP_OUT = false;
                        boolean mainRowRejected_tMap_4_TMAP_OUT = false;

                        // { // Dummy bracket to open block for "main" ##(1)##

                        // ###############################

                        /**
                         * [tMap_4_TMAP_OUT main ] stop
                         */

                    } // End of branch "main"

                } // End of branch "start"

                /**
                 * [tFileInputDelimited_8 end ] start
                 */

                currentComponent = "tFileInputDelimited_8";

            }
            fid_tFileInputDelimited_8.close();
            globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

            ok_Hash.put("tFileInputDelimited_8", true);
            end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_8 end ] stop
             */

            /**
             * [tMap_2 end ] start
             */

            currentComponent = "tMap_2";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMap_2", true);
            end_Hash.put("tMap_2", System.currentTimeMillis());

            /**
             * [tMap_2 end ] stop
             */

            /**
             * [tMap_4_TMAP_OUT end ] start
             */

            currentComponent = "tMap_4_TMAP_OUT";

            // ###############################
            // # Lookup hashes releasing
            // ###############################

            ok_Hash.put("tMap_4_TMAP_OUT", true);
            end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

            /**
             * [tMap_4_TMAP_OUT end ] stop
             */

            /**
             * [tFileOutputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_2", false);
            start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_2";

            String fileName_tFileOutputDelimited_2 = (new java.io.File(context.data_output_dir + context.current_job_dir
                    + "/out.csv")).getAbsolutePath().replace("\\", "/");
            String fullName_tFileOutputDelimited_2 = null;
            String extension_tFileOutputDelimited_2 = null;
            String directory_tFileOutputDelimited_2 = null;
            if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
                            fileName_tFileOutputDelimited_2.lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2
                            .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2
                        .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
                            fileName_tFileOutputDelimited_2.lastIndexOf("."));
                    extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2
                            .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
                    extension_tFileOutputDelimited_2 = "";
                }
                directory_tFileOutputDelimited_2 = "";
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /**
                                                             * Start field tFileOutputDelimited_2:FIELDSEPARATOR
                                                             */
            ";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
                                                                     * Start field tFileOutputDelimited_2:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                if (!dir_tFileOutputDelimited_2.exists()) {
                    dir_tFileOutputDelimited_2.mkdirs();
                }
            }

            // routines.system.Row
            java.io.Writer outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);

            /**
             * [tFileOutputDelimited_2 begin ] stop
             */

            /**
             * [tFileOutputDelimited_3 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_3", false);
            start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_3";

            String fileName_tFileOutputDelimited_3 = (new java.io.File(context.data_output_dir + context.current_job_dir
                    + "/inner_join.csv")).getAbsolutePath().replace("\\", "/");
            String fullName_tFileOutputDelimited_3 = null;
            String extension_tFileOutputDelimited_3 = null;
            String directory_tFileOutputDelimited_3 = null;
            if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
                    extension_tFileOutputDelimited_3 = "";
                } else {
                    fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
                            fileName_tFileOutputDelimited_3.lastIndexOf("."));
                    extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3
                            .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3
                        .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
                            fileName_tFileOutputDelimited_3.lastIndexOf("."));
                    extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3
                            .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
                    extension_tFileOutputDelimited_3 = "";
                }
                directory_tFileOutputDelimited_3 = "";
            }

            int nb_line_tFileOutputDelimited_3 = 0;
            int splitEvery_tFileOutputDelimited_3 = 1000;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /**
                                                             * Start field tFileOutputDelimited_3:FIELDSEPARATOR
                                                             */
            ";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
                                                                     * Start field tFileOutputDelimited_3:ROWSEPARATOR
                                                                     */
            "\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                if (!dir_tFileOutputDelimited_3.exists()) {
                    dir_tFileOutputDelimited_3.mkdirs();
                }
            }

            // routines.system.Row
            java.io.Writer outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                    new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);

            /**
             * [tFileOutputDelimited_3 begin ] stop
             */

            /**
             * [tMap_4_TMAP_IN begin ] start
             */

            ok_Hash.put("tMap_4_TMAP_IN", false);
            start_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());
            currentComponent = "tMap_4_TMAP_IN";

            // ###############################
            // # Lookup's keys initialization
            // ###############################

            // ###############################
            // # Vars initialization
            class Var__tMap_4_TMAP_IN__Struct {

                String var1;
            }
            Var__tMap_4_TMAP_IN__Struct Var__tMap_4_TMAP_IN = new Var__tMap_4_TMAP_IN__Struct();
            // ###############################

            // ###############################
            // # Outputs initialization
            outStruct out_tmp = new outStruct();
            inner_joinStruct inner_join_tmp = new inner_joinStruct();
            // ###############################

            /**
             * [tMap_4_TMAP_IN begin ] stop
             */
            /**
             * [tMap_4_TMAP_IN main ] start
             */

            currentComponent = "tMap_4_TMAP_IN";

            boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

            fsi_main.endPut();

            // ###############################
            // # Input tables (lookups)
            boolean rejectedInnerJoin_tMap_4_TMAP_IN = false;
            boolean mainRowRejected_tMap_4_TMAP_IN = false;

            if (

            (

            main.LABEL_MAIN != null

            )

            ) { // G_TM_M_280

                // CALL close main tMap filter for table 'main'

                // /////////////////////////////////////////////
                // Starting Lookup Table "lookup1"
                // /////////////////////////////////////////////

                SortableRow_main rsc_main;

                tHash_Lookup_lookup1.initGet();

                fsi_main.initGet();

                // TEST firstLookupIsPersistentSorted=true
                // isFirstPersistentSortedTable=true

                rejectedInnerJoin_tMap_4_TMAP_IN = false;

                while (fsi_main.hasNext()) { // G_TM_M_250 loop "main"

                    rsc_main = (SortableRow_main) fsi_main.next();
                    rsc_main.copyDataTo(main);

                    rejectedInnerJoin_tMap_4_TMAP_IN = rsc_main.is__rejectedInnerJoin;

                    boolean forceLooplookup1 = false;

                    lookup1Struct lookup1ObjectFromLookup = null;

                    if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_020

                        hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

                        lookup1HashKey.ID_LOOKUP = rsc_main.exprKey_lookup1__ID_LOOKUP;

                        tHash_Lookup_lookup1.lookup(lookup1HashKey);

                        if (!tHash_Lookup_lookup1.hasNext()) { // G_TM_M_090

                            rejectedInnerJoin_tMap_4_TMAP_IN = true;

                        } // G_TM_M_090

                    } // G_TM_M_020

                    lookup1Struct lookup1 = null;

                    lookup1Struct fromLookup_lookup1 = null;
                    lookup1 = lookup1Default;

                    if (tHash_Lookup_lookup1.hasNext()) { // G 099

                        fromLookup_lookup1 = tHash_Lookup_lookup1.next();

                    } // G 099

                    if (fromLookup_lookup1 != null) {
                        lookup1 = fromLookup_lookup1;
                    }

                    Integer exprKey_lookup2__ID_LOOKUP = 0;

                    if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_255

                        exprKey_lookup2__ID_LOOKUP = main.LABEL_MAIN.toString().length() > 0 ? main.ID_MAIN : null;

                    } // G_TM_M_255

                    SortableRow_main__lookup1 rsc_main__lookup1 = new SortableRow_main__lookup1();

                    rsc_main__lookup1.fillFrom(main, lookup1, exprKey_lookup2__ID_LOOKUP);

                    rsc_main__lookup1.is__rejectedInnerJoin = rejectedInnerJoin_tMap_4_TMAP_IN;

                    rejectedInnerJoin_tMap_4_TMAP_IN = false;

                    // Sort and store in KeyFile(s) and DataFile(s)
                    fsi_main__lookup1.put(rsc_main__lookup1);

                } // G_TM_M_250 loop "main"

                fsi_main.endGet();

                fsi_main__lookup1.endPut();

                // /////////////////////////////////////////////
                // Starting Lookup Table "lookup2"
                // /////////////////////////////////////////////

                SortableRow_main__lookup1 rsc_main__lookup1;

                tHash_Lookup_lookup2.initGet();

                fsi_main__lookup1.initGet();

                // lookup1Struct lookup1 = new lookup1Struct();

                lookup1Struct lookup1 = new lookup1Struct();

                // TEST firstLookupIsPersistentSorted=true
                // isFirstPersistentSortedTable=false

                rejectedInnerJoin_tMap_4_TMAP_IN = false;

                while (fsi_main__lookup1.hasNext()) { // G_TM_M_250 loop
                    // "main__lookup1"

                    // CALL close loop of lookup 'main__lookup1'

                    rsc_main__lookup1 = (SortableRow_main__lookup1) fsi_main__lookup1.next();
                    rsc_main__lookup1.copyDataTo(main, lookup1);

                    rejectedInnerJoin_tMap_4_TMAP_IN = rsc_main__lookup1.is__rejectedInnerJoin;

                    boolean forceLooplookup2 = false;

                    lookup2Struct lookup2ObjectFromLookup = null;

                    if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_020

                        hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

                        lookup2HashKey.ID_LOOKUP = rsc_main__lookup1.exprKey_lookup2__ID_LOOKUP;

                        tHash_Lookup_lookup2.lookup(lookup2HashKey);

                        if (!tHash_Lookup_lookup2.hasNext()) { // G_TM_M_090

                            forceLooplookup2 = true;

                        } // G_TM_M_090

                    } // G_TM_M_020

                    else { // G 20 - G 21
                        forceLooplookup2 = true;
                    } // G 21

                    lookup2Struct lookup2 = null;

                    while (tHash_Lookup_lookup2.hasNext() || forceLooplookup2) { // G_TM_M_043

                        // CALL close loop of lookup 'lookup2'

                        lookup2Struct fromLookup_lookup2 = null;
                        lookup2 = lookup2Default;

                        if (!forceLooplookup2) { // G 46

                            fromLookup_lookup2 = tHash_Lookup_lookup2.next();

                            if (fromLookup_lookup2 != null) {
                                lookup2 = fromLookup_lookup2;
                            }

                        } // G 46

                        forceLooplookup2 = false;

                        // { // Dummy bracket to open block for "main" ##(1)##

                        // ###############################
                        { // start of Var scope

                            // ###############################
                            // # Vars tables

                            Var__tMap_4_TMAP_IN__Struct Var = Var__tMap_4_TMAP_IN;
                            Var.var1 = main.LABEL_MAIN.toString();// ###############################
                            // ###############################
                            // # Output tables

                            out = null;
                            inner_join = null;

                            if (!rejectedInnerJoin_tMap_4_TMAP_IN) {

                                // # Output table : 'out'
                                out_tmp.ID_MAIN = main.ID_MAIN;
                                out_tmp.LABEL_MAIN = main.LABEL_MAIN;
                                out_tmp.var1 = Var.var1;
                                out_tmp.ID_LOOKUP = lookup1.ID_LOOKUP;
                                out_tmp.LABEL_LOOKUP1 = lookup1.LABEL_LOOKUP1;
                                out_tmp.ID_LOOKUP_1 = lookup2.ID_LOOKUP;
                                out_tmp.LABEL_LOOKUP2 = lookup2.LABEL_LOOKUP2;
                                out = out_tmp;
                            } // closing inner join bracket (1)
                            // ###### START REJECTS #####

                            // # Output reject table : 'inner_join'
                            // # Filter conditions
                            if (rejectedInnerJoin_tMap_4_TMAP_IN) {
                                inner_join_tmp.ID_MAIN = main.ID_MAIN;
                                inner_join_tmp.LABEL_MAIN = main.LABEL_MAIN;
                                inner_join_tmp.var1 = Var.var1;
                                inner_join_tmp.ID_LOOKUP = lookup1.ID_LOOKUP;
                                inner_join_tmp.LABEL_LOOKUP1 = lookup1.LABEL_LOOKUP1;
                                inner_join_tmp.ID_LOOKUP_1 = lookup2.ID_LOOKUP;
                                inner_join_tmp.LABEL_LOOKUP2 = lookup2.LABEL_LOOKUP2;
                                inner_join = inner_join_tmp;
                            } // closing filter/reject
                            // ###############################

                        } // end of Var scope

                        rejectedInnerJoin_tMap_4_TMAP_IN = false;

                        /**
                         * [tMap_4_TMAP_IN main ] stop
                         */
                        // Start of branch "out"
                        if (out != null) {

                            /**
                             * [tFileOutputDelimited_2 main ] start
                             */

                            currentComponent = "tFileOutputDelimited_2";

                            StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

                            if (out.ID_MAIN != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.ID_MAIN

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.LABEL_MAIN != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.LABEL_MAIN

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.var1 != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.var1

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.ID_LOOKUP != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.ID_LOOKUP

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.LABEL_LOOKUP1 != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.LABEL_LOOKUP1

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.ID_LOOKUP_1 != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.ID_LOOKUP_1

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);

                            if (out.LABEL_LOOKUP2 != null) {

                                sb_tFileOutputDelimited_2.append(

                                out.LABEL_LOOKUP2

                                );

                            }

                            sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

                            outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                            nb_line_tFileOutputDelimited_2++;

                            /**
                             * [tFileOutputDelimited_2 main ] stop
                             */

                        } // End of branch "out"

                        // Start of branch "inner_join"
                        if (inner_join != null) {

                            /**
                             * [tFileOutputDelimited_3 main ] start
                             */

                            currentComponent = "tFileOutputDelimited_3";

                            StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

                            if (inner_join.ID_MAIN != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.ID_MAIN

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.LABEL_MAIN != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.LABEL_MAIN

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.var1 != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.var1

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.ID_LOOKUP != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.ID_LOOKUP

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.LABEL_LOOKUP1 != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.LABEL_LOOKUP1

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.ID_LOOKUP_1 != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.ID_LOOKUP_1

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);

                            if (inner_join.LABEL_LOOKUP2 != null) {

                                sb_tFileOutputDelimited_3.append(

                                inner_join.LABEL_LOOKUP2

                                );

                            }

                            sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

                            outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

                            nb_line_tFileOutputDelimited_3++;

                            /**
                             * [tFileOutputDelimited_3 main ] stop
                             */

                        } // End of branch "inner_join"

                    } // close loop of lookup 'lookup2' // G_TM_M_043

                } // G_TM_M_250 close loop read file data 'main__lookup1'

            } // G_TM_M_280 close main tMap filter for table 'main'

            /**
             * [tMap_4_TMAP_IN end ] start
             */

            currentComponent = "tMap_4_TMAP_IN";

            // ###############################
            // # Lookup hashes releasing
            fsi_main__lookup1.endGet();

            tHash_Lookup_lookup1.endGet();
            globalMap.remove("tHash_Lookup_lookup1");

            tHash_Lookup_lookup2.endGet();
            globalMap.remove("tHash_Lookup_lookup2");

            // ###############################

            ok_Hash.put("tMap_4_TMAP_IN", true);
            end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

            /**
             * [tMap_4_TMAP_IN end ] stop
             */

            /**
             * [tFileOutputDelimited_2 end ] start
             */

            currentComponent = "tFileOutputDelimited_2";

            outtFileOutputDelimited_2.close();
            globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);

            ok_Hash.put("tFileOutputDelimited_2", true);
            end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_2 end ] stop
             */

            /**
             * [tFileOutputDelimited_3 end ] start
             */

            currentComponent = "tFileOutputDelimited_3";

            outtFileOutputDelimited_3.close();
            globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);

            ok_Hash.put("tFileOutputDelimited_3", true);
            end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_3 end ] stop
             */

            tFileCompare_1Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
    }

    public void tFileCompare_1Process() throws TalendException {
        globalMap.put("tFileCompare_1_SUBPROCESS_STATE", 0);
        try {

            /**
             * [tFileCompare_1 begin ] start
             */

            ok_Hash.put("tFileCompare_1", false);
            start_Hash.put("tFileCompare_1", System.currentTimeMillis());
            currentComponent = "tFileCompare_1";

            /**
             * [tFileCompare_1 begin ] stop
             */
            /**
             * [tFileCompare_1 main ] start
             */

            currentComponent = "tFileCompare_1";

            boolean result_tFileCompare_1 = true;

            if (result_tFileCompare_1) {

                java.io.BufferedReader file_tFileCompare_1 = new java.io.BufferedReader(new java.io.FileReader(
                        context.data_output_dir + context.current_job_dir + "out.csv"));
                java.io.BufferedReader fileRef_tFileCompare_1 = new java.io.BufferedReader(new java.io.FileReader(
                        (String) context.getProperty("data_dir") + context.current_job_dir + "ref/out.csv"));
                String content_tFileCompare_1 = null, contentRef_tFileCompare_1 = null;
                while ((content_tFileCompare_1 = file_tFileCompare_1.readLine()) != null
                        && (contentRef_tFileCompare_1 = fileRef_tFileCompare_1.readLine()) != null) {
                    if (content_tFileCompare_1.compareTo(contentRef_tFileCompare_1) != 0) {
                        result_tFileCompare_1 = false;
                        break;
                    }
                }

                // Check if files has a different number of lines:
                if (content_tFileCompare_1 == null) {
                    // This step is done in case of the while upper ignore
                    // second part:
                    contentRef_tFileCompare_1 = fileRef_tFileCompare_1.readLine();
                }
                if (content_tFileCompare_1 != null || contentRef_tFileCompare_1 != null) {
                    result_tFileCompare_1 = false;
                }

                file_tFileCompare_1.close();
                fileRef_tFileCompare_1.close();

            }

            String messagetFileCompare_1 = "";
            if (result_tFileCompare_1) {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent + "] Ok";

            } else {
                messagetFileCompare_1 = "[" + jobName + "." + currentComponent + "] Files differ";
            }
            globalMap.put("tFileCompare_1_DIFFERENCE", result_tFileCompare_1);

            System.out.println(messagetFileCompare_1);

            /**
             * [tFileCompare_1 main ] stop
             */
            /**
             * [tFileCompare_1 end ] start
             */

            currentComponent = "tFileCompare_1";

            ok_Hash.put("tFileCompare_1", true);
            end_Hash.put("tFileCompare_1", System.currentTimeMillis());

            /**
             * [tFileCompare_1 end ] stop
             */
            tAssert_7Process();
            tFileCompare_2Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileCompare_1_SUBPROCESS_STATE", 1);
    }

    public void tAssert_7Process() throws TalendException {
        globalMap.put("tAssert_7_SUBPROCESS_STATE", 0);
        try {

            /**
             * [tAssert_7 begin ] start
             */

            ok_Hash.put("tAssert_7", false);
            start_Hash.put("tAssert_7", System.currentTimeMillis());
            currentComponent = "tAssert_7";

            /**
             * [tAssert_7 begin ] stop
             */
            /**
             * [tAssert_7 main ] start
             */

            currentComponent = "tAssert_7";

            if (((Boolean) globalMap.get("tFileCompare_1_DIFFERENCE"))

            ) {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_7", "Ok", "--",
                        "Filter on lookup1 - Standard reject - Not connected standard reject with filter");
                tAssertCatcher_1Process();
            } else {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_7", "Failed", "Test logically failed",
                        "Filter on lookup1 - Standard reject - Not connected standard reject with filter");
                tAssertCatcher_1Process();
            }

            /**
             * [tAssert_7 main ] stop
             */
            /**
             * [tAssert_7 end ] start
             */

            currentComponent = "tAssert_7";

            ok_Hash.put("tAssert_7", true);
            end_Hash.put("tAssert_7", System.currentTimeMillis());

            /**
             * [tAssert_7 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tAssert_7_SUBPROCESS_STATE", 1);
    }

    public void tFileCompare_2Process() throws TalendException {
        globalMap.put("tFileCompare_2_SUBPROCESS_STATE", 0);
        try {

            /**
             * [tFileCompare_2 begin ] start
             */

            ok_Hash.put("tFileCompare_2", false);
            start_Hash.put("tFileCompare_2", System.currentTimeMillis());
            currentComponent = "tFileCompare_2";

            /**
             * [tFileCompare_2 begin ] stop
             */
            /**
             * [tFileCompare_2 main ] start
             */

            currentComponent = "tFileCompare_2";

            boolean result_tFileCompare_2 = true;

            if (result_tFileCompare_2) {

                java.io.BufferedReader file_tFileCompare_2 = new java.io.BufferedReader(new java.io.FileReader(
                        context.data_output_dir + context.current_job_dir + "inner_join.csv"));
                java.io.BufferedReader fileRef_tFileCompare_2 = new java.io.BufferedReader(new java.io.FileReader(
                        (String) context.getProperty("data_dir") + context.current_job_dir + "ref/inner_join.csv"));
                String content_tFileCompare_2 = null, contentRef_tFileCompare_2 = null;
                while ((content_tFileCompare_2 = file_tFileCompare_2.readLine()) != null
                        && (contentRef_tFileCompare_2 = fileRef_tFileCompare_2.readLine()) != null) {
                    if (content_tFileCompare_2.compareTo(contentRef_tFileCompare_2) != 0) {
                        result_tFileCompare_2 = false;
                        break;
                    }
                }

                // Check if files has a different number of lines:
                if (content_tFileCompare_2 == null) {
                    // This step is done in case of the while upper ignore
                    // second part:
                    contentRef_tFileCompare_2 = fileRef_tFileCompare_2.readLine();
                }
                if (content_tFileCompare_2 != null || contentRef_tFileCompare_2 != null) {
                    result_tFileCompare_2 = false;
                }

                file_tFileCompare_2.close();
                fileRef_tFileCompare_2.close();

            }

            String messagetFileCompare_2 = "";
            if (result_tFileCompare_2) {
                messagetFileCompare_2 = "[" + jobName + "." + currentComponent + "] Ok";

            } else {
                messagetFileCompare_2 = "[" + jobName + "." + currentComponent + "] Files differ";
            }
            globalMap.put("tFileCompare_2_DIFFERENCE", result_tFileCompare_2);

            System.out.println(messagetFileCompare_2);

            /**
             * [tFileCompare_2 main ] stop
             */
            /**
             * [tFileCompare_2 end ] start
             */

            currentComponent = "tFileCompare_2";

            ok_Hash.put("tFileCompare_2", true);
            end_Hash.put("tFileCompare_2", System.currentTimeMillis());

            /**
             * [tFileCompare_2 end ] stop
             */
            tAssert_2Process();

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileCompare_2_SUBPROCESS_STATE", 1);
    }

    public void tAssert_2Process() throws TalendException {
        globalMap.put("tAssert_2_SUBPROCESS_STATE", 0);
        try {

            /**
             * [tAssert_2 begin ] start
             */

            ok_Hash.put("tAssert_2", false);
            start_Hash.put("tAssert_2", System.currentTimeMillis());
            currentComponent = "tAssert_2";

            /**
             * [tAssert_2 begin ] stop
             */
            /**
             * [tAssert_2 main ] start
             */

            currentComponent = "tAssert_2";

            if (((Boolean) globalMap.get("tFileCompare_2_DIFFERENCE"))

            ) {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_2", "Ok", "--",
                        "Filter on lookup1 - Standard reject - Not connected standard reject with filter");
                tAssertCatcher_1Process();
            } else {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_2", "Failed", "Test logically failed",
                        "Filter on lookup1 - Standard reject - Not connected standard reject with filter");
                tAssertCatcher_1Process();
            }

            /**
             * [tAssert_2 main ] stop
             */
            /**
             * [tAssert_2 end ] start
             */

            currentComponent = "tAssert_2";

            ok_Hash.put("tAssert_2", true);
            end_Hash.put("tAssert_2", System.currentTimeMillis());

            /**
             * [tAssert_2 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tAssert_2_SUBPROCESS_STATE", 1);
    }

    static class lookup1Struct implements routines.system.IPersistableComparableLookupRow<lookup1Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        private static final int DEFAULT_HASHCODE = 1;

        private static final int PRIME = 31;

        private int hashCode = DEFAULT_HASHCODE;

        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP;

        String LABEL_LOOKUP1;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.ID_LOOKUP == null) ? 0 : this.ID_LOOKUP.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookup1Struct other = (lookup1Struct) obj;

            if (this.ID_LOOKUP == null) {
                if (other.ID_LOOKUP != null)
                    return false;
            } else if (!this.ID_LOOKUP.equals(other.ID_LOOKUP))
                return false;

            return true;
        }

        public void copyDataTo(lookup1Struct other) {

            other.ID_LOOKUP = this.ID_LOOKUP;
            other.LABEL_LOOKUP1 = this.LABEL_LOOKUP1;

        }

        public void copyKeysDataTo(lookup1Struct other) {

            other.ID_LOOKUP = this.ID_LOOKUP;

        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP = null;
                    } else {
                        this.ID_LOOKUP = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_LOOKUP == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP1 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP1 = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

                if (this.LABEL_LOOKUP1 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP1.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP));

            sb.append(", ");

            sb.append("LABEL_LOOKUP1");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP1));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup1Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP, other.ID_LOOKUP);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_4Process() throws TalendException {
        globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);
        try {

            lookup1Struct lookup1 = new lookup1Struct();

            /**
             * [tAdvancedHash_lookup1 begin ] start
             */

            ok_Hash.put("tAdvancedHash_lookup1", false);
            start_Hash.put("tAdvancedHash_lookup1", System.currentTimeMillis());
            currentComponent = "tAdvancedHash_lookup1";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup1 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup1Struct> tHash_Lookup_lookup1 = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup1Struct>(
                    matchingModeEnum_lookup1, context.data_output_dir + "/" + jobName + "_tMapData_Lookup_lookup1_",
                    new org.talend.designer.components.persistent.IRowCreator() {

                        public lookup1Struct createRowInstance() {
                            return new lookup1Struct();
                        }
                    }

                    , 10000000

            );

            tHash_Lookup_lookup1.initPut();

            globalMap.put("tHash_Lookup_lookup1", tHash_Lookup_lookup1);

            /**
             * [tAdvancedHash_lookup1 begin ] stop
             */

            /**
             * [tFileInputDelimited_4 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_4", false);
            start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_4";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir") + context.current_job_dir + "in/lookup_multi_rows.csv",
                    "ISO-8859-15", ";", "\n", true, 0, 0, -1, -1, false);
            while (fid_tFileInputDelimited_4.nextRecord()) {
                lookup1 = null;
                lookup1 = null;
                boolean whetherReject_tFileInputDelimited_4 = false;
                lookup1 = new lookup1Struct();
                try {
                    String temp_tFileInputDelimited_4 = "";
                    temp_tFileInputDelimited_4 = fid_tFileInputDelimited_4.get(0).trim();
                    if (temp_tFileInputDelimited_4.length() > 0) {
                        lookup1.ID_LOOKUP = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_4);
                    } else {
                        lookup1.ID_LOOKUP = null;
                    }
                    lookup1.LABEL_LOOKUP1 = fid_tFileInputDelimited_4.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_4 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_4 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_4 main ] start
                 */

                currentComponent = "tFileInputDelimited_4";

                /**
                 * [tFileInputDelimited_4 main ] stop
                 */
                // Start of branch "lookup1"
                if (lookup1 != null) {

                    /**
                     * [tAdvancedHash_lookup1 main ] start
                     */

                    currentComponent = "tAdvancedHash_lookup1";

                    lookup1Struct lookup1_HashRow = tHash_Lookup_lookup1.getNextFreeRow();

                    lookup1_HashRow.ID_LOOKUP = lookup1.ID_LOOKUP;
                    lookup1_HashRow.LABEL_LOOKUP1 = lookup1.LABEL_LOOKUP1;
                    tHash_Lookup_lookup1.put(lookup1_HashRow);

                    /**
                     * [tAdvancedHash_lookup1 main ] stop
                     */

                } // End of branch "lookup1"

                /**
                 * [tFileInputDelimited_4 end ] start
                 */

                currentComponent = "tFileInputDelimited_4";

            }
            fid_tFileInputDelimited_4.close();
            globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

            ok_Hash.put("tFileInputDelimited_4", true);
            end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_4 end ] stop
             */

            /**
             * [tAdvancedHash_lookup1 end ] start
             */

            currentComponent = "tAdvancedHash_lookup1";

            tHash_Lookup_lookup1.endPut();

            ok_Hash.put("tAdvancedHash_lookup1", true);
            end_Hash.put("tAdvancedHash_lookup1", System.currentTimeMillis());

            /**
             * [tAdvancedHash_lookup1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
    }

    static class lookup2Struct implements routines.system.IPersistableComparableLookupRow<lookup2Struct> {

        final static byte[] commonByteArrayLock = new byte[0];

        static byte[] commonByteArray = new byte[0];

        private static final int DEFAULT_HASHCODE = 1;

        private static final int PRIME = 31;

        private int hashCode = DEFAULT_HASHCODE;

        public boolean hashCodeDirty = true;

        Integer ID_LOOKUP;

        String LABEL_LOOKUP2;

        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.ID_LOOKUP == null) ? 0 : this.ID_LOOKUP.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            final lookup2Struct other = (lookup2Struct) obj;

            if (this.ID_LOOKUP == null) {
                if (other.ID_LOOKUP != null)
                    return false;
            } else if (!this.ID_LOOKUP.equals(other.ID_LOOKUP))
                return false;

            return true;
        }

        public void copyDataTo(lookup2Struct other) {

            other.ID_LOOKUP = this.ID_LOOKUP;
            other.LABEL_LOOKUP2 = this.LABEL_LOOKUP2;

        }

        public void copyKeysDataTo(lookup2Struct other) {

            other.ID_LOOKUP = this.ID_LOOKUP;

        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.ID_LOOKUP = null;
                    } else {
                        this.ID_LOOKUP = dis.readInt();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {

                // Integer

                if (this.ID_LOOKUP == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.ID_LOOKUP);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                length = dis.readInt();
                if (length == -1) {
                    this.LABEL_LOOKUP2 = null;
                } else {
                    byte[] byteArray = new byte[length];
                    dis.read(byteArray);
                    this.LABEL_LOOKUP2 = new String(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);

            }

        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {

                if (this.LABEL_LOOKUP2 == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.LABEL_LOOKUP2.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("ID_LOOKUP");
            sb.append("=");
            sb.append(String.valueOf(this.ID_LOOKUP));

            sb.append(", ");

            sb.append("LABEL_LOOKUP2");
            sb.append("=");
            sb.append(String.valueOf(this.LABEL_LOOKUP2));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(lookup2Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID_LOOKUP, other.ID_LOOKUP);
            if (returnValue != 0) {
                return returnValue;
            }

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            // if (this.ignoreCase) {
            return string1.compareToIgnoreCase(string2);
            // } else {
            // return string1.compareTo(string2);
            // }
        }

    }

    public void tFileInputDelimited_5Process() throws TalendException {
        globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);
        try {

            lookup2Struct lookup2 = new lookup2Struct();

            /**
             * [tAdvancedHash_lookup2 begin ] start
             */

            ok_Hash.put("tAdvancedHash_lookup2", false);
            start_Hash.put("tAdvancedHash_lookup2", System.currentTimeMillis());
            currentComponent = "tAdvancedHash_lookup2";

            org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_lookup2 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.ALL_MATCHES;

            org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup2Struct> tHash_Lookup_lookup2 = new org.talend.designer.components.persistent.PersistentSortedLookupManager<lookup2Struct>(
                    matchingModeEnum_lookup2, context.data_output_dir + "/" + jobName + "_tMapData_Lookup_lookup2_",
                    new org.talend.designer.components.persistent.IRowCreator() {

                        public lookup2Struct createRowInstance() {
                            return new lookup2Struct();
                        }
                    }

                    , 10000000

            );

            tHash_Lookup_lookup2.initPut();

            globalMap.put("tHash_Lookup_lookup2", tHash_Lookup_lookup2);

            /**
             * [tAdvancedHash_lookup2 begin ] stop
             */

            /**
             * [tFileInputDelimited_5 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_5", false);
            start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_5";

            org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
                    (String) context.getProperty("data_dir") + context.current_job_dir + "in/lookup_multi_rows.csv",
                    "ISO-8859-15", ";", "\n", true, 0, 0, -1, -1, false);
            while (fid_tFileInputDelimited_5.nextRecord()) {
                lookup2 = null;
                lookup2 = null;
                boolean whetherReject_tFileInputDelimited_5 = false;
                lookup2 = new lookup2Struct();
                try {
                    String temp_tFileInputDelimited_5 = "";
                    temp_tFileInputDelimited_5 = fid_tFileInputDelimited_5.get(0).trim();
                    if (temp_tFileInputDelimited_5.length() > 0) {
                        lookup2.ID_LOOKUP = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_5);
                    } else {
                        lookup2.ID_LOOKUP = null;
                    }
                    lookup2.LABEL_LOOKUP2 = fid_tFileInputDelimited_5.get(1).trim();

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_5 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_5 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_5 main ] start
                 */

                currentComponent = "tFileInputDelimited_5";

                /**
                 * [tFileInputDelimited_5 main ] stop
                 */
                // Start of branch "lookup2"
                if (lookup2 != null) {

                    /**
                     * [tAdvancedHash_lookup2 main ] start
                     */

                    currentComponent = "tAdvancedHash_lookup2";

                    lookup2Struct lookup2_HashRow = tHash_Lookup_lookup2.getNextFreeRow();

                    lookup2_HashRow.ID_LOOKUP = lookup2.ID_LOOKUP;
                    lookup2_HashRow.LABEL_LOOKUP2 = lookup2.LABEL_LOOKUP2;
                    tHash_Lookup_lookup2.put(lookup2_HashRow);

                    /**
                     * [tAdvancedHash_lookup2 main ] stop
                     */

                } // End of branch "lookup2"

                /**
                 * [tFileInputDelimited_5 end ] start
                 */

                currentComponent = "tFileInputDelimited_5";

            }
            fid_tFileInputDelimited_5.close();
            globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

            ok_Hash.put("tFileInputDelimited_5", true);
            end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_5 end ] stop
             */

            /**
             * [tAdvancedHash_lookup2 end ] start
             */

            currentComponent = "tAdvancedHash_lookup2";

            tHash_Lookup_lookup2.endPut();

            ok_Hash.put("tAdvancedHash_lookup2", true);
            end_Hash.put("tAdvancedHash_lookup2", System.currentTimeMillis());

            /**
             * [tAdvancedHash_lookup2 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e);
        }

        globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
    }

    public static boolean watch = false;

    public static int portStats = 3334;

    public static int portTraces = 4334;

    public static String clientHost;

    public static String defaultClientHost = "localhost";

    public static String contextStr = "local";

    public static String pid = "0";

    public static String rootPid = null;

    public static String fatherPid = null;

    public static long startTime = 0;

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = Bug4270_4271_tMap_fiter_main_var_heap_except.class.getClassLoader()
                    .getResourceAsStream(
                            "java_project/bug4270_4271_tmap_fiter_main_var_heap_except_0_1/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = Bug4270_4271_tMap_fiter_main_var_heap_except.class.getClassLoader().getResourceAsStream(
                        "java_project/bug4270_4271_tmap_fiter_main_var_heap_except_0_1/contexts/" + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            context.param_file_path = (String) context.getProperty("param_file_path");

            context.data_dir = (String) context.getProperty("data_dir");

            context.data_output_dir = (String) context.getProperty("data_output_dir");

            context.result_host = (String) context.getProperty("result_host");

            context.result_port = (String) context.getProperty("result_port");

            context.result_database = (String) context.getProperty("result_database");

            context.result_username = (String) context.getProperty("result_username");

            context.result_password = (String) context.getProperty("result_password");

            context.result_table = (String) context.getProperty("result_table");

            context.mysql_host = (String) context.getProperty("mysql_host");

            context.mysql_port = (String) context.getProperty("mysql_port");

            context.mysql_schema = (String) context.getProperty("mysql_schema");

            context.mysql_username = (String) context.getProperty("mysql_username");

            context.mysql_password = (String) context.getProperty("mysql_password");

            context.current_job_dir = (String) context.getProperty("current_job_dir");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final Bug4270_4271_tMap_fiter_main_var_heap_except Bug4270_4271_tMap_fiter_main_var_heap_exceptClass = new Bug4270_4271_tMap_fiter_main_var_heap_except();

        try {
            errorCode = null;
            Bug4270_4271_tMap_fiter_main_var_heap_exceptClass.tFileInputDelimited_2Process();
            status = "end";
        } catch (TalendException e_tFileInputDelimited_2) {
            status = "failure";
            e_tFileInputDelimited_2.printStackTrace();

        } finally {
        }

        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory)
                    + " bytes memory increase when running : Bug4270_4271_tMap_fiter_main_var_heap_except");
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "local";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/***********************************************************************************************************************
 * 167899 characters generated by Talend OpenStudio on the 21 juin 2008 11:02:59 CEST
 **********************************************************************************************************************/
