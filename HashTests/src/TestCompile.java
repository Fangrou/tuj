// ============================================================================
//
// Copyright (c) 2005-2008, Talend Inc.
//
// This source code has been automatically generated by Talend Integration Suite Enterprise Edition
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package java_project_dev_3_0_bis.taggregaterow_all_types_min_0_1;

import routines.java_project_dev_3_0_bis.MemoryHelper;
import routines.java_project_dev_3_0_bis.RandomValues;
import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

/**
 * Job: tAggregateRow_all_types_MIN Purpose: <br>
 * Description: <br>
 * 
 * @author amaumont@talend.com
 * @version 2.2.0.qualifier
 * @status TEST
 */
public class tAggregateRow_all_types_MIN {

    public static final Object obj = new Object();
    // create and load default properties
    private static java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    private static class ContextProperties extends java.util.Properties {

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public void synchronizeContext() {

            this.put("param_file_path", param_file_path);

            this.put("data_dir", data_dir);

            this.put("data_output_dir", data_output_dir);

            this.put("result_host", result_host);

            this.put("result_port", result_port);

            this.put("result_database", result_database);

            this.put("result_username", result_username);

            this.put("result_password", result_password);

            this.put("result_table", result_table);

            this.put("mysql_host", mysql_host);

            this.put("mysql_port", mysql_port);

            this.put("mysql_database", mysql_database);

            this.put("mysql_username", mysql_username);

            this.put("mysql_password", mysql_password);

            this.put("current_job_dir", current_job_dir);

        }

        public static String param_file_path;
        public static String data_dir;
        public static String data_output_dir;
        public static String result_host;
        public static String result_port;
        public static String result_database;
        public static String result_username;
        public static String result_password;
        public static String result_table;
        public static String mysql_host;
        public static String mysql_port;
        public static String mysql_database;
        public static String mysql_username;
        public static String mysql_password;
        public static String current_job_dir;
    }

    private static ContextProperties context = new ContextProperties();
    private static final String jobName = "tAggregateRow_all_types_MIN";
    private static final String projectName = "java_project_dev_3_0_bis";
    public static Integer errorCode = null;
    private static String currentComponent = "";
    private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    public static final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

    AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

    private class TalendException extends Exception {
        private java.util.Map<String, Object> globalMap = null;
        private Exception e = null;
        private tAggregateRow_all_types_MIN c = null;

        private TalendException(tAggregateRow_all_types_MIN c, Exception e,
                final java.util.Map<String, Object> globalMap) {
            this.globalMap = globalMap;
            this.e = e;
            this.c = c;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                globalMap.put(currentComponent + "_ERROR_MESSAGE", e
                        .getMessage());
                System.err
                        .println("Exception in component " + currentComponent);
            }
            if (!(e instanceof TDieException)) {
                e.printStackTrace();
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass()
                            .getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(c, new Object[] { e, globalMap });
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (java.lang.SecurityException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalArgumentException e) {
                    this.e.printStackTrace();
                } catch (java.lang.IllegalAccessException e) {
                    this.e.printStackTrace();
                } catch (java.lang.reflect.InvocationTargetException e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tAssertCatcher_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tAssertCatcher_1_onSubJobError(exception, globalMap);
    }

    public void tMysqlOutput_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tAssertCatcher_1_onSubJobError(exception, globalMap);
    }

    public void tFileCompare_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tFileCompare_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tFileCompare_1_onSubJobError(exception, globalMap);
    }

    public void tAssert_2_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tAssert_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tFileCompare_1_onSubJobError(exception, globalMap);
    }

    public void tFileInputDelimited_2_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tFileInputDelimited_2_onSubJobError(exception, globalMap);
    }

    public void tContextLoad_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tContextLoad_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tFileInputDelimited_2_onSubJobError(exception, globalMap);
    }

    public void tRowGenerator_2_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tRowGenerator_2", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tJavaFlex_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tJavaFlex_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tJavaRow_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tJavaRow_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tFileOutputDelimited_1_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tAggregateRowOpt_1_AGGOUT_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tAggregateRowOpt_1_AGGOUT", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tAggregateRowOpt_1_AGGIN_error(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        end_Hash.put("tAggregateRowOpt_1_AGGIN", System.currentTimeMillis());
        if (!(exception instanceof TDieException)) {
            tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                    null, "Failed", "Job execution error", exception
                            .getMessage());
            tAssertCatcher_1Process(globalMap);
        }
        tRowGenerator_2_onSubJobError(exception, globalMap);
    }

    public void tAssertCatcher_1_onSubJobError(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
    }

    public void tFileCompare_1_onSubJobError(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
    }

    public void tFileInputDelimited_2_onSubJobError(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
    }

    public void tRowGenerator_2_onSubJobError(Exception exception,
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
    }

    static class row12Struct implements
            routines.system.IPersistableRow<row12Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        java.util.Date moment;
        String pid;
        String project;
        String job;
        String language;
        String origin;
        String status;
        String substatus;
        String description;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.pid = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.pid = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.project = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.project = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.language = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.language = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.origin = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.origin = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.status = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.status = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.substatus = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.substatus = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.description = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.description = new String(commonByteArray, 0,
                                length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.pid == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.pid.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.project == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.project.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.language == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.language.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.origin == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.origin.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.status == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.status.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.substatus == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.substatus.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.description == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.description.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("pid");
            sb.append("=");
            sb.append(String.valueOf(this.pid));

            sb.append(", ");

            sb.append("project");
            sb.append("=");
            sb.append(String.valueOf(this.project));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("language");
            sb.append("=");
            sb.append(String.valueOf(this.language));

            sb.append(", ");

            sb.append("origin");
            sb.append("=");
            sb.append(String.valueOf(this.origin));

            sb.append(", ");

            sb.append("status");
            sb.append("=");
            sb.append(String.valueOf(this.status));

            sb.append(", ");

            sb.append("substatus");
            sb.append("=");
            sb.append(String.valueOf(this.substatus));

            sb.append(", ");

            sb.append("description");
            sb.append("=");
            sb.append(String.valueOf(this.description));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row12Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    public void tAssertCatcher_1Process(
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 0);
        try {

            row12Struct row12 = new row12Struct();

            /**
             * [tMysqlOutput_1 begin ] start
             */

            ok_Hash.put("tMysqlOutput_1", false);
            start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
            currentComponent = "tMysqlOutput_1";

            int nb_line_tMysqlOutput_1 = 0;
            int nb_line_update_tMysqlOutput_1 = 0;
            int nb_line_inserted_tMysqlOutput_1 = 0;
            int nb_line_deleted_tMysqlOutput_1 = 0;

            int deletedCount_tMysqlOutput_1 = 0;
            int updatedCount_tMysqlOutput_1 = 0;
            int insertedCount_tMysqlOutput_1 = 0;

            String tableName_tMysqlOutput_1 = context.result_table;
            boolean whetherReject_tMysqlOutput_1 = false;

            java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
                    .getInstance();
            calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
            long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
                    .getTime();
            calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
            long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
                    .getTime();
            long date_tMysqlOutput_1;

            java.sql.Connection conn_tMysqlOutput_1 = null;
            String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
            String url_tMysqlOutput_1 = null;
            if (dbProperties_tMysqlOutput_1 == null
                    || dbProperties_tMysqlOutput_1.trim().length() == 0) {
                url_tMysqlOutput_1 = "jdbc:mysql://" + context.result_host
                        + ":" + context.result_port + "/"
                        + context.result_database;
            } else {
                url_tMysqlOutput_1 = "jdbc:mysql://" + context.result_host
                        + ":" + context.result_port + "/"
                        + context.result_database + "?"
                        + "noDatetimeStringSync=true";
            }
            String dbUser_tMysqlOutput_1 = context.result_username;
            String dbPwd_tMysqlOutput_1 = context.result_password;
            java.lang.Class.forName("org.gjt.mm.mysql.Driver");
            conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
                    url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
                    dbPwd_tMysqlOutput_1);

            conn_tMysqlOutput_1.setAutoCommit(false);
            int commitEvery_tMysqlOutput_1 = 100;
            int commitCounter_tMysqlOutput_1 = 0;
            String insert_tMysqlOutput_1 = "INSERT INTO `"
                    + context.result_table
                    + "` (`moment`,`pid`,`project`,`job`,`language`,`origin`,`status`,`substatus`,`description`) VALUES (?,?,?,?,?,?,?,?,?)";
            java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
                    .prepareStatement(insert_tMysqlOutput_1);

            /**
             * [tMysqlOutput_1 begin ] stop
             */

            /**
             * [tAssertCatcher_1 begin ] start
             */

            ok_Hash.put("tAssertCatcher_1", false);
            start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
            currentComponent = "tAssertCatcher_1";

            for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1
                    .getMessages()) {
                row12.moment = acm.getMoment();
                row12.pid = acm.getPid();
                row12.project = acm.getProject();
                row12.job = acm.getJob();
                row12.language = acm.getLanguage();

                row12.origin = (acm.getOrigin() == null
                        || acm.getOrigin().length() < 1 ? null : acm
                        .getOrigin());

                row12.status = acm.getStatus();
                row12.substatus = acm.getSubstatus();
                row12.description = acm.getDescription();

                /**
                 * [tAssertCatcher_1 begin ] stop
                 */
                /**
                 * [tAssertCatcher_1 main ] start
                 */

                currentComponent = "tAssertCatcher_1";

                /**
                 * [tAssertCatcher_1 main ] stop
                 */

                /**
                 * [tMysqlOutput_1 main ] start
                 */

                currentComponent = "tMysqlOutput_1";

                whetherReject_tMysqlOutput_1 = false;
                if (row12.moment != null) {
                    date_tMysqlOutput_1 = row12.moment.getTime();
                    if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
                            || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
                        pstmt_tMysqlOutput_1
                                .setString(1, "0000-00-00 00:00:00");
                    } else {
                        pstmt_tMysqlOutput_1.setTimestamp(1,
                                new java.sql.Timestamp(date_tMysqlOutput_1));
                    }
                } else {
                    pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);
                }

                if (row12.pid == null) {
                    pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(2, row12.pid);
                }

                if (row12.project == null) {
                    pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(3, row12.project);
                }

                if (row12.job == null) {
                    pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(4, row12.job);
                }

                if (row12.language == null) {
                    pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(5, row12.language);
                }

                if (row12.origin == null) {
                    pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(6, row12.origin);
                }

                if (row12.status == null) {
                    pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(7, row12.status);
                }

                if (row12.substatus == null) {
                    pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(8, row12.substatus);
                }

                if (row12.description == null) {
                    pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
                } else {
                    pstmt_tMysqlOutput_1.setString(9, row12.description);
                }

                try {
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
                            + pstmt_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch (Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                    throw (e);
                }
                commitCounter_tMysqlOutput_1++;

                if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();

                    commitCounter_tMysqlOutput_1 = 0;

                }

                /**
                 * [tMysqlOutput_1 main ] stop
                 */

                /**
                 * [tAssertCatcher_1 end ] start
                 */

                currentComponent = "tAssertCatcher_1";

            }

            ok_Hash.put("tAssertCatcher_1", true);
            end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

            /**
             * [tAssertCatcher_1 end ] stop
             */

            /**
             * [tMysqlOutput_1 end ] start
             */

            currentComponent = "tMysqlOutput_1";

            if (pstmt_tMysqlOutput_1 != null) {

                pstmt_tMysqlOutput_1.close();

            }

            conn_tMysqlOutput_1.commit();

            conn_tMysqlOutput_1.close();

            nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
                    + deletedCount_tMysqlOutput_1;
            nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
                    + updatedCount_tMysqlOutput_1;
            nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
                    + insertedCount_tMysqlOutput_1;

            globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
                    nb_line_update_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
                    nb_line_inserted_tMysqlOutput_1);
            globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
                    nb_line_deleted_tMysqlOutput_1);

            ok_Hash.put("tMysqlOutput_1", true);
            end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

            /**
             * [tMysqlOutput_1 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e, globalMap);
        }

        globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 1);
    }

    static class row6Struct implements
            routines.system.IPersistableRow<row6Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        String file;
        String file_ref;
        java.util.Date moment;
        String job;
        String component;
        Integer differ;
        String message;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.file = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.file = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.file_ref = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.file_ref = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.moment = null;
                    } else {
                        this.moment = new Date(dis.readLong());
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.job = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.job = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.component = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.component = new String(commonByteArray, 0, length);
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.differ = null;
                    } else {
                        this.differ = dis.readInt();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.message = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.message = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.file == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.file.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.file_ref == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.file_ref.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // java.util.Date

                if (this.moment == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.moment.getTime());
                }

                // String

                if (this.job == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.job.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.component == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.component.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // Integer

                if (this.differ == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.differ);
                }

                // String

                if (this.message == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.message.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("file");
            sb.append("=");
            sb.append(String.valueOf(this.file));

            sb.append(", ");

            sb.append("file_ref");
            sb.append("=");
            sb.append(String.valueOf(this.file_ref));

            sb.append(", ");

            sb.append("moment");
            sb.append("=");
            sb.append(String.valueOf(this.moment));

            sb.append(", ");

            sb.append("job");
            sb.append("=");
            sb.append(String.valueOf(this.job));

            sb.append(", ");

            sb.append("component");
            sb.append("=");
            sb.append(String.valueOf(this.component));

            sb.append(", ");

            sb.append("differ");
            sb.append("=");
            sb.append(String.valueOf(this.differ));

            sb.append(", ");

            sb.append("message");
            sb.append("=");
            sb.append(String.valueOf(this.message));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row6Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    public void tFileCompare_1Process(
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        globalMap.put("tFileCompare_1_SUBPROCESS_STATE", 0);
        try {

            row6Struct row6 = new row6Struct();

            /**
             * [tAssert_2 begin ] start
             */

            ok_Hash.put("tAssert_2", false);
            start_Hash.put("tAssert_2", System.currentTimeMillis());
            currentComponent = "tAssert_2";

            /**
             * [tAssert_2 begin ] stop
             */

            /**
             * [tFileCompare_1 begin ] start
             */

            ok_Hash.put("tFileCompare_1", false);
            start_Hash.put("tFileCompare_1", System.currentTimeMillis());
            currentComponent = "tFileCompare_1";

            /**
             * [tFileCompare_1 begin ] stop
             */
            /**
             * [tFileCompare_1 main ] start
             */

            currentComponent = "tFileCompare_1";

            boolean result_tFileCompare_1 = true;

            if (result_tFileCompare_1) {

                java.io.BufferedReader file_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader(context.data_output_dir
                                + context.current_job_dir + "out.csv"));
                java.io.BufferedReader fileRef_tFileCompare_1 = new java.io.BufferedReader(
                        new java.io.FileReader((String) context
                                .getProperty("data_dir")
                                + context.current_job_dir + "ref.csv"));
                String content_tFileCompare_1 = null, contentRef_tFileCompare_1 = null;
                while ((content_tFileCompare_1 = file_tFileCompare_1.readLine()) != null
                        && (contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                                .readLine()) != null) {
                    if (content_tFileCompare_1
                            .compareTo(contentRef_tFileCompare_1) != 0) {
                        result_tFileCompare_1 = false;
                        break;
                    }
                }

                // Check if files has a different number of lines:
                if (content_tFileCompare_1 == null) {
                    // This step is done in case of the while upper ignore
                    // second part:
                    contentRef_tFileCompare_1 = fileRef_tFileCompare_1
                            .readLine();
                }
                if (content_tFileCompare_1 != null
                        || contentRef_tFileCompare_1 != null) {
                    result_tFileCompare_1 = false;
                }

                file_tFileCompare_1.close();
                fileRef_tFileCompare_1.close();

            }

            String messagetFileCompare_1 = "";
            if (result_tFileCompare_1) {
                messagetFileCompare_1 = "[job " + jobName
                        + "] Files are identical";

            } else {
                messagetFileCompare_1 = "[job " + jobName + "] Files differ";
            }
            globalMap.put("tFileCompare_1_DIFFERENCE", result_tFileCompare_1);

            System.out.println(messagetFileCompare_1);
            row6.file = context.data_output_dir + context.current_job_dir
                    + "out.csv";
            row6.file_ref = (String) context.getProperty("data_dir")
                    + context.current_job_dir + "ref.csv";
            row6.moment = java.util.Calendar.getInstance().getTime();
            row6.job = jobName;
            row6.component = currentComponent;
            row6.differ = (result_tFileCompare_1) ? 0 : 1;
            row6.message = messagetFileCompare_1;

            /**
             * [tFileCompare_1 main ] stop
             */

            /**
             * [tAssert_2 main ] start
             */

            currentComponent = "tAssert_2";

            if (row6.differ == 0) {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                        "tAssert_2", "Ok", "--",
                        "avg(Float)and sum(Long) with TAggregateRow ");
                tAssertCatcher_1Process(globalMap);
            } else {
                tAssertCatcher_1.addMessage(pid, projectName, jobName, "java",
                        "tAssert_2", "Failed", "Test logically failed",
                        "avg(Float)and sum(Long) with TAggregateRow ");
                tAssertCatcher_1Process(globalMap);
            }

            /**
             * [tAssert_2 main ] stop
             */

            /**
             * [tFileCompare_1 end ] start
             */

            currentComponent = "tFileCompare_1";

            ok_Hash.put("tFileCompare_1", true);
            end_Hash.put("tFileCompare_1", System.currentTimeMillis());

            /**
             * [tFileCompare_1 end ] stop
             */

            /**
             * [tAssert_2 end ] start
             */

            currentComponent = "tAssert_2";

            ok_Hash.put("tAssert_2", true);
            end_Hash.put("tAssert_2", System.currentTimeMillis());

            /**
             * [tAssert_2 end ] stop
             */

        } catch (Exception e) {

            throw new TalendException(this, e, globalMap);
        }

        globalMap.put("tFileCompare_1_SUBPROCESS_STATE", 1);
    }

    static class row1Struct implements
            routines.system.IPersistableRow<row1Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        String key;
        String value;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    length = dis.readInt();
                    if (length == -1) {
                        this.key = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.key = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.value = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.value = new String(commonByteArray, 0, length);
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // String

                if (this.key == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.key.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.value == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.value.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("key");
            sb.append("=");
            sb.append(String.valueOf(this.key));

            sb.append(", ");

            sb.append("value");
            sb.append("=");
            sb.append(String.valueOf(this.value));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row1Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    public void tFileInputDelimited_2Process(
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);
        try {

            row1Struct row1 = new row1Struct();

            /**
             * [tContextLoad_1 begin ] start
             */

            ok_Hash.put("tContextLoad_1", false);
            start_Hash.put("tContextLoad_1", System.currentTimeMillis());
            currentComponent = "tContextLoad_1";

            java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
            java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
            int nb_line_tContextLoad_1 = 0;

            /**
             * [tContextLoad_1 begin ] stop
             */

            /**
             * [tFileInputDelimited_2 begin ] start
             */

            ok_Hash.put("tFileInputDelimited_2", false);
            start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
            currentComponent = "tFileInputDelimited_2";

            int nb_line_tFileInputDelimited_2 = 0;
            int footer_tFileInputDelimited_2 = 0;
            int totalLinetFileInputDelimited_2 = 0;
            int limittFileInputDelimited_2 = -1;
            int lastLinetFileInputDelimited_2 = -1;

            com.csvreader.CsvReader csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                    new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(/**
                             * Start field
                             * tFileInputDelimited_2:FILENAME
                             */
                            context.param_file_path/**
                             * End field
                             * tFileInputDelimited_2:FILENAME
                             */
                            ), "ISO-8859-15")), ',');

            csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
            csvReadertFileInputDelimited_2.setTextQualifier('"');

            csvReadertFileInputDelimited_2
                    .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            String[] rowtFileInputDelimited_2 = null;

            if (footer_tFileInputDelimited_2 > 0) {

                while (csvReadertFileInputDelimited_2.readRecord()) {
                    rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                            .getValues();
                    if (!(rowtFileInputDelimited_2.length == 1 && rowtFileInputDelimited_2[0]
                            .equals("\015"))) {// empty line when row separator
                                                // is '\n'

                        totalLinetFileInputDelimited_2++;

                    }

                }
                int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
                        - footer_tFileInputDelimited_2 < 0 ? 0
                        : totalLinetFileInputDelimited_2
                                - footer_tFileInputDelimited_2;
                if (lastLinetFileInputDelimited_2 > 0) {
                    lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
                            : lastLineTemptFileInputDelimited_2;
                } else {
                    lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
                }

                csvReadertFileInputDelimited_2.close();

                csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
                        new java.io.BufferedReader(
                                new java.io.InputStreamReader(
                                        new java.io.FileInputStream(/**
                                         * Start
                                         * field tFileInputDelimited_2:FILENAME
                                         */
                                        context.param_file_path/**
                                         * End field
                                         * tFileInputDelimited_2:FILENAME
                                         */
                                        ), "ISO-8859-15")), ',');
                csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
                csvReadertFileInputDelimited_2.setTextQualifier('"');

                csvReadertFileInputDelimited_2
                        .setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

            }

            int currentLinetFileInputDelimited_2 = 0;
            int outputLinetFileInputDelimited_2 = 0;

            while (csvReadertFileInputDelimited_2.readRecord()) {

                rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
                        .getValues();

                if (rowtFileInputDelimited_2.length == 1
                        && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                        // line
                                                                        // when
                                                                        // row
                                                                        // separator
                                                                        // is
                                                                        // '\n'
                    continue;
                }

                currentLinetFileInputDelimited_2++;
                if (currentLinetFileInputDelimited_2 < 0 + 1) {
                    continue;
                }

                if (lastLinetFileInputDelimited_2 > -1
                        && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
                    break;
                }
                outputLinetFileInputDelimited_2++;
                if (limittFileInputDelimited_2 != -1
                        && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
                    break;
                }

                row1 = null;
                boolean whetherReject_tFileInputDelimited_2 = false;
                row1 = new row1Struct();
                try {

                    if (rowtFileInputDelimited_2.length == 1
                            && rowtFileInputDelimited_2[0].equals("\015")) {// empty
                                                                            // line
                                                                            // when
                                                                            // row
                                                                            // separator
                                                                            // is
                                                                            // '\n'

                        row1.key = null;

                        row1.value = null;

                    } else {

                        if (0 < rowtFileInputDelimited_2.length) {
                            row1.key = rowtFileInputDelimited_2[0];

                        } else {

                            row1.key = null;

                        }

                        if (1 < rowtFileInputDelimited_2.length) {
                            row1.value = rowtFileInputDelimited_2[1];

                        } else {

                            row1.value = null;

                        }

                    }

                } catch (Exception e) {
                    whetherReject_tFileInputDelimited_2 = true;
                    throw (e);
                }

                /**
                 * [tFileInputDelimited_2 begin ] stop
                 */
                /**
                 * [tFileInputDelimited_2 main ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                /**
                 * [tFileInputDelimited_2 main ] stop
                 */
                // Start of branch "row1"
                if (row1 != null) {

                    /**
                     * [tContextLoad_1 main ] start
                     */

                    currentComponent = "tContextLoad_1";

                    // ////////////////////////

                    String key_tContextLoad_1 = null;

                    if (row1.key != null) {

                        key_tContextLoad_1 =

                        row1.key;

                    }

                    String value_tContextLoad_1 = null;

                    if (row1.value != null) {

                        value_tContextLoad_1 =

                        row1.value;

                    }

                    if (context.getProperty(key_tContextLoad_1) != null) {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_database".equals(key_tContextLoad_1)) {
                            context.mysql_database = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;
                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;
                        }

                        assignList_tContextLoad_1.add(key_tContextLoad_1);
                    } else {
                        context.setProperty(key_tContextLoad_1,
                                value_tContextLoad_1);

                        if (key_tContextLoad_1 != null
                                && "param_file_path".equals(key_tContextLoad_1)) {
                            context.param_file_path = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_dir".equals(key_tContextLoad_1)) {
                            context.data_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "data_output_dir".equals(key_tContextLoad_1)) {
                            context.data_output_dir = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_host".equals(key_tContextLoad_1)) {
                            context.result_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_port".equals(key_tContextLoad_1)) {
                            context.result_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_database".equals(key_tContextLoad_1)) {
                            context.result_database = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_username".equals(key_tContextLoad_1)) {
                            context.result_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_password".equals(key_tContextLoad_1)) {
                            context.result_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "result_table".equals(key_tContextLoad_1)) {
                            context.result_table = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_host".equals(key_tContextLoad_1)) {
                            context.mysql_host = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_port".equals(key_tContextLoad_1)) {
                            context.mysql_port = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_database".equals(key_tContextLoad_1)) {
                            context.mysql_database = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_username".equals(key_tContextLoad_1)) {
                            context.mysql_username = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "mysql_password".equals(key_tContextLoad_1)) {
                            context.mysql_password = value_tContextLoad_1;

                        }

                        if (key_tContextLoad_1 != null
                                && "current_job_dir".equals(key_tContextLoad_1)) {
                            context.current_job_dir = value_tContextLoad_1;

                        }

                        newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
                    }
                    nb_line_tContextLoad_1++;
                    // ////////////////////////

                    /**
                     * [tContextLoad_1 main ] stop
                     */

                } // End of branch "row1"

                /**
                 * [tFileInputDelimited_2 end ] start
                 */

                currentComponent = "tFileInputDelimited_2";

                nb_line_tFileInputDelimited_2++;
            }
            csvReadertFileInputDelimited_2.close();
            globalMap.put("tFileInputDelimited_2_NB_LINE",
                    nb_line_tFileInputDelimited_2);

            ok_Hash.put("tFileInputDelimited_2", true);
            end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

            /**
             * [tFileInputDelimited_2 end ] stop
             */

            /**
             * [tContextLoad_1 end ] start
             */

            currentComponent = "tContextLoad_1";

            java.util.Enumeration<?> enu_tContextLoad_1 = context
                    .propertyNames();
            while (enu_tContextLoad_1.hasMoreElements()) {
                String key_tContextLoad_1 = (String) enu_tContextLoad_1
                        .nextElement();
                if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
                        && !newPropertyList_tContextLoad_1
                                .contains(key_tContextLoad_1)) {
                    noAssignList_tContextLoad_1.add(key_tContextLoad_1);
                }
            }
            globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

            ok_Hash.put("tContextLoad_1", true);
            end_Hash.put("tContextLoad_1", System.currentTimeMillis());

            /**
             * [tContextLoad_1 end ] stop
             */

            tRowGenerator_2Process(globalMap);

        } catch (Exception e) {

            throw new TalendException(this, e, globalMap);
        }

        globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
    }

    static class row5Struct implements
            routines.system.IPersistableRow<row5Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        boolean KEY_boolean;
        Boolean KEY_Boolean;
        Boolean KEY_Boolean_null;
        byte KEY_byte;
        Byte KEY_Byte;
        Byte KEY_Byte_null;
        String KEY_byte_array;
        String KEY_byte_array_nullable;
        byte[] KEY_byte_array_null;
        char KEY_char = ' ';
        Character KEY_Character = ' ';
        Character KEY_Character_null = ' ';
        java.util.Date KEY_Date;
        java.util.Date KEY_Date_nullable;
        java.util.Date KEY_Date_null;
        double KEY_double;
        Double KEY_Double;
        Double KEY_Double_null;
        int KEY_int;
        Integer KEY_Integer;
        Integer KEY_Integer_null;
        float KEY_float;
        Float KEY_Float;
        Float KEY_Float_null;
        long KEY_long;
        Long KEY_Long;
        Long KEY_Long_null;
        Object KEY_Object;
        Object KEY_Object_nullable;
        Object KEY_Object_null;
        short KEY_short;
        Short KEY_Short_nullable;
        Short KEY_Short_null;
        String KEY_String;
        String KEY_String_nullable;
        String KEY_String_null;
        BigDecimal KEY_BigDecimal;
        BigDecimal KEY_BigDecimal_nullable;
        BigDecimal KEY_BigDecimal_null;
        List KEY_List;
        List KEY_List_nullable;
        List KEY_List_null;
        boolean VALUE_boolean;
        Boolean VALUE_Boolean;
        Boolean VALUE_Boolean_null;
        byte VALUE_byte;
        Byte VALUE_Byte;
        Byte VALUE_Byte_null;
        byte[] VALUE_byte_array;
        byte[] VALUE_byte_array_nullable;
        byte[] VALUE_byte_array_null;
        char VALUE_char = ' ';
        Character VALUE_Character = ' ';
        Character VALUE_Character_null = ' ';
        java.util.Date VALUE_Date;
        java.util.Date VALUE_Date_nullable;
        java.util.Date VALUE_Date_null;
        double VALUE_double;
        Double VALUE_Double;
        Double VALUE_Double_null;
        int VALUE_int;
        Integer VALUE_Integer;
        Integer VALUE_Integer_null;
        float VALUE_float;
        Float VALUE_Float;
        Float VALUE_Float_null;
        long VALUE_long;
        Long VALUE_Long;
        Long VALUE_Long_null;
        Object VALUE_Object;
        Object VALUE_Object_nullable;
        Object VALUE_Object_null;
        short VALUE_short;
        Short VALUE_Short_nullable;
        Short VALUE_Short_null;
        String VALUE_String;
        String VALUE_String_nullable;
        String VALUE_String_null;
        BigDecimal VALUE_BigDecimal;
        BigDecimal VALUE_BigDecimal_nullable;
        BigDecimal VALUE_BigDecimal_null;
        List VALUE_List;
        List VALUE_List_nullable;
        List VALUE_List_null;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.KEY_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean = null;
                    } else {
                        this.KEY_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean_null = null;
                    } else {
                        this.KEY_Boolean_null = dis.readBoolean();
                    }

                    this.KEY_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte = null;
                    } else {
                        this.KEY_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte_null = null;
                    } else {
                        this.KEY_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_byte_array = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_byte_array_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_null = byteArray;
                    }

                    this.KEY_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character = null;
                    } else {
                        this.KEY_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character_null = null;
                    } else {
                        this.KEY_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date = null;
                    } else {
                        this.KEY_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_nullable = null;
                    } else {
                        this.KEY_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_null = null;
                    } else {
                        this.KEY_Date_null = new Date(dis.readLong());
                    }

                    this.KEY_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double = null;
                    } else {
                        this.KEY_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double_null = null;
                    } else {
                        this.KEY_Double_null = dis.readDouble();
                    }

                    this.KEY_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer = null;
                    } else {
                        this.KEY_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer_null = null;
                    } else {
                        this.KEY_Integer_null = dis.readInt();
                    }

                    this.KEY_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float = null;
                    } else {
                        this.KEY_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float_null = null;
                    } else {
                        this.KEY_Float_null = dis.readFloat();
                    }

                    this.KEY_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long = null;
                    } else {
                        this.KEY_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long_null = null;
                    } else {
                        this.KEY_Long_null = dis.readLong();
                    }

                    this.KEY_Object = (Object) dis.readObject();

                    this.KEY_Object_nullable = (Object) dis.readObject();

                    this.KEY_Object_null = (Object) dis.readObject();

                    this.KEY_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_nullable = null;
                    } else {
                        this.KEY_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_null = null;
                    } else {
                        this.KEY_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_nullable = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.KEY_BigDecimal = (BigDecimal) dis.readObject();

                    this.KEY_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.KEY_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.KEY_List = (List) dis.readObject();

                    this.KEY_List_nullable = (List) dis.readObject();

                    this.KEY_List_null = (List) dis.readObject();

                    this.VALUE_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean = null;
                    } else {
                        this.VALUE_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean_null = null;
                    } else {
                        this.VALUE_Boolean_null = dis.readBoolean();
                    }

                    this.VALUE_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte = null;
                    } else {
                        this.VALUE_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte_null = null;
                    } else {
                        this.VALUE_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_null = byteArray;
                    }

                    this.VALUE_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character = null;
                    } else {
                        this.VALUE_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character_null = null;
                    } else {
                        this.VALUE_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date = null;
                    } else {
                        this.VALUE_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_nullable = null;
                    } else {
                        this.VALUE_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_null = null;
                    } else {
                        this.VALUE_Date_null = new Date(dis.readLong());
                    }

                    this.VALUE_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double = null;
                    } else {
                        this.VALUE_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double_null = null;
                    } else {
                        this.VALUE_Double_null = dis.readDouble();
                    }

                    this.VALUE_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer = null;
                    } else {
                        this.VALUE_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer_null = null;
                    } else {
                        this.VALUE_Integer_null = dis.readInt();
                    }

                    this.VALUE_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float = null;
                    } else {
                        this.VALUE_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float_null = null;
                    } else {
                        this.VALUE_Float_null = dis.readFloat();
                    }

                    this.VALUE_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long = null;
                    } else {
                        this.VALUE_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long_null = null;
                    } else {
                        this.VALUE_Long_null = dis.readLong();
                    }

                    this.VALUE_Object = (Object) dis.readObject();

                    this.VALUE_Object_nullable = (Object) dis.readObject();

                    this.VALUE_Object_null = (Object) dis.readObject();

                    this.VALUE_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_nullable = null;
                    } else {
                        this.VALUE_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_null = null;
                    } else {
                        this.VALUE_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.VALUE_BigDecimal = (BigDecimal) dis.readObject();

                    this.VALUE_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.VALUE_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.VALUE_List = (List) dis.readObject();

                    this.VALUE_List_nullable = (List) dis.readObject();

                    this.VALUE_List_null = (List) dis.readObject();

                } catch (IOException e) {
                    throw new RuntimeException(e);

                } catch (ClassNotFoundException eCNFE) {
                    throw new RuntimeException(eCNFE);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.KEY_boolean);

                // Boolean

                if (this.KEY_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean);
                }

                // Boolean

                if (this.KEY_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean_null);
                }

                // byte

                dos.writeByte(this.KEY_byte);

                // Byte

                if (this.KEY_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte);
                }

                // Byte

                if (this.KEY_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte_null);
                }

                // String

                if (this.KEY_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_byte_array.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_byte_array_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // byte[]

                if (this.KEY_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_null.length);
                    dos.write(this.KEY_byte_array_null);
                }

                // char

                dos.writeChar(this.KEY_char);

                // Character

                if (this.KEY_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character);
                }

                // Character

                if (this.KEY_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character_null);
                }

                // java.util.Date

                if (this.KEY_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.KEY_double);

                // Double

                if (this.KEY_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double);
                }

                // Double

                if (this.KEY_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double_null);
                }

                // int

                dos.writeInt(this.KEY_int);

                // Integer

                if (this.KEY_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer);
                }

                // Integer

                if (this.KEY_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer_null);
                }

                // float

                dos.writeFloat(this.KEY_float);

                // Float

                if (this.KEY_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float);
                }

                // Float

                if (this.KEY_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float_null);
                }

                // long

                dos.writeLong(this.KEY_long);

                // Long

                if (this.KEY_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long);
                }

                // Long

                if (this.KEY_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long_null);
                }

                // Object

                dos.writeObject(this.KEY_Object);

                // Object

                dos.writeObject(this.KEY_Object_nullable);

                // Object

                dos.writeObject(this.KEY_Object_null);

                // short

                dos.writeShort(this.KEY_short);

                // Short

                if (this.KEY_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_nullable);
                }

                // Short

                if (this.KEY_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_null);
                }

                // String

                if (this.KEY_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_null);

                // List

                dos.writeObject(this.KEY_List);

                // List

                dos.writeObject(this.KEY_List_nullable);

                // List

                dos.writeObject(this.KEY_List_null);

                // boolean

                dos.writeBoolean(this.VALUE_boolean);

                // Boolean

                if (this.VALUE_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean);
                }

                // Boolean

                if (this.VALUE_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean_null);
                }

                // byte

                dos.writeByte(this.VALUE_byte);

                // Byte

                if (this.VALUE_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte);
                }

                // Byte

                if (this.VALUE_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte_null);
                }

                // byte[]

                if (this.VALUE_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array.length);
                    dos.write(this.VALUE_byte_array);
                }

                // byte[]

                if (this.VALUE_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_nullable.length);
                    dos.write(this.VALUE_byte_array_nullable);
                }

                // byte[]

                if (this.VALUE_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_null.length);
                    dos.write(this.VALUE_byte_array_null);
                }

                // char

                dos.writeChar(this.VALUE_char);

                // Character

                if (this.VALUE_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character);
                }

                // Character

                if (this.VALUE_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character_null);
                }

                // java.util.Date

                if (this.VALUE_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.VALUE_double);

                // Double

                if (this.VALUE_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double);
                }

                // Double

                if (this.VALUE_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double_null);
                }

                // int

                dos.writeInt(this.VALUE_int);

                // Integer

                if (this.VALUE_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer);
                }

                // Integer

                if (this.VALUE_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer_null);
                }

                // float

                dos.writeFloat(this.VALUE_float);

                // Float

                if (this.VALUE_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float);
                }

                // Float

                if (this.VALUE_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float_null);
                }

                // long

                dos.writeLong(this.VALUE_long);

                // Long

                if (this.VALUE_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long);
                }

                // Long

                if (this.VALUE_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long_null);
                }

                // Object

                dos.writeObject(this.VALUE_Object);

                // Object

                dos.writeObject(this.VALUE_Object_nullable);

                // Object

                dos.writeObject(this.VALUE_Object_null);

                // short

                dos.writeShort(this.VALUE_short);

                // Short

                if (this.VALUE_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_nullable);
                }

                // Short

                if (this.VALUE_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_null);
                }

                // String

                if (this.VALUE_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_null);

                // List

                dos.writeObject(this.VALUE_List);

                // List

                dos.writeObject(this.VALUE_List_nullable);

                // List

                dos.writeObject(this.VALUE_List_null);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("KEY_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_boolean));

            sb.append(", ");

            sb.append("KEY_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean));

            sb.append(", ");

            sb.append("KEY_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean_null));

            sb.append(", ");

            sb.append("KEY_byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte));

            sb.append(", ");

            sb.append("KEY_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte));

            sb.append(", ");

            sb.append("KEY_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte_null));

            sb.append(", ");

            sb.append("KEY_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array));

            sb.append(", ");

            sb.append("KEY_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_nullable));

            sb.append(", ");

            sb.append("KEY_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_null));

            sb.append(", ");

            sb.append("KEY_char");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_char));

            sb.append(", ");

            sb.append("KEY_Character");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character));

            sb.append(", ");

            sb.append("KEY_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character_null));

            sb.append(", ");

            sb.append("KEY_Date");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date));

            sb.append(", ");

            sb.append("KEY_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_nullable));

            sb.append(", ");

            sb.append("KEY_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_null));

            sb.append(", ");

            sb.append("KEY_double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_double));

            sb.append(", ");

            sb.append("KEY_Double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double));

            sb.append(", ");

            sb.append("KEY_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double_null));

            sb.append(", ");

            sb.append("KEY_int");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_int));

            sb.append(", ");

            sb.append("KEY_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer));

            sb.append(", ");

            sb.append("KEY_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer_null));

            sb.append(", ");

            sb.append("KEY_float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_float));

            sb.append(", ");

            sb.append("KEY_Float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float));

            sb.append(", ");

            sb.append("KEY_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float_null));

            sb.append(", ");

            sb.append("KEY_long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_long));

            sb.append(", ");

            sb.append("KEY_Long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long));

            sb.append(", ");

            sb.append("KEY_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long_null));

            sb.append(", ");

            sb.append("KEY_Object");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object));

            sb.append(", ");

            sb.append("KEY_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_nullable));

            sb.append(", ");

            sb.append("KEY_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_null));

            sb.append(", ");

            sb.append("KEY_short");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_short));

            sb.append(", ");

            sb.append("KEY_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_nullable));

            sb.append(", ");

            sb.append("KEY_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_null));

            sb.append(", ");

            sb.append("KEY_String");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String));

            sb.append(", ");

            sb.append("KEY_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_nullable));

            sb.append(", ");

            sb.append("KEY_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_null));

            sb.append(", ");

            sb.append("KEY_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal));

            sb.append(", ");

            sb.append("KEY_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_nullable));

            sb.append(", ");

            sb.append("KEY_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_null));

            sb.append(", ");

            sb.append("KEY_List");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List));

            sb.append(", ");

            sb.append("KEY_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_nullable));

            sb.append(", ");

            sb.append("KEY_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_null));

            sb.append(", ");

            sb.append("VALUE_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean_null));

            sb.append(", ");

            sb.append("VALUE_byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte));

            sb.append(", ");

            sb.append("VALUE_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte));

            sb.append(", ");

            sb.append("VALUE_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte_null));

            sb.append(", ");

            sb.append("VALUE_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array));

            sb.append(", ");

            sb.append("VALUE_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_nullable));

            sb.append(", ");

            sb.append("VALUE_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_null));

            sb.append(", ");

            sb.append("VALUE_char");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_char));

            sb.append(", ");

            sb.append("VALUE_Character");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character));

            sb.append(", ");

            sb.append("VALUE_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character_null));

            sb.append(", ");

            sb.append("VALUE_Date");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date));

            sb.append(", ");

            sb.append("VALUE_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_nullable));

            sb.append(", ");

            sb.append("VALUE_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_null));

            sb.append(", ");

            sb.append("VALUE_double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_double));

            sb.append(", ");

            sb.append("VALUE_Double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double));

            sb.append(", ");

            sb.append("VALUE_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double_null));

            sb.append(", ");

            sb.append("VALUE_int");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_int));

            sb.append(", ");

            sb.append("VALUE_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer));

            sb.append(", ");

            sb.append("VALUE_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer_null));

            sb.append(", ");

            sb.append("VALUE_float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_float));

            sb.append(", ");

            sb.append("VALUE_Float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float));

            sb.append(", ");

            sb.append("VALUE_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float_null));

            sb.append(", ");

            sb.append("VALUE_long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_long));

            sb.append(", ");

            sb.append("VALUE_Long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long));

            sb.append(", ");

            sb.append("VALUE_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long_null));

            sb.append(", ");

            sb.append("VALUE_Object");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object));

            sb.append(", ");

            sb.append("VALUE_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_nullable));

            sb.append(", ");

            sb.append("VALUE_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_null));

            sb.append(", ");

            sb.append("VALUE_short");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_short));

            sb.append(", ");

            sb.append("VALUE_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_nullable));

            sb.append(", ");

            sb.append("VALUE_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_null));

            sb.append(", ");

            sb.append("VALUE_String");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String));

            sb.append(", ");

            sb.append("VALUE_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_nullable));

            sb.append(", ");

            sb.append("VALUE_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_null));

            sb.append(", ");

            sb.append("VALUE_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_nullable));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_null));

            sb.append(", ");

            sb.append("VALUE_List");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List));

            sb.append(", ");

            sb.append("VALUE_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_nullable));

            sb.append(", ");

            sb.append("VALUE_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_null));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row5Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    static class row3Struct implements
            routines.system.IPersistableRow<row3Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        boolean KEY_boolean;
        Boolean KEY_Boolean;
        Boolean KEY_Boolean_null;
        byte KEY_byte;
        Byte KEY_Byte;
        Byte KEY_Byte_null;
        byte[] KEY_byte_array;
        byte[] KEY_byte_array_nullable;
        byte[] KEY_byte_array_null;
        char KEY_char = ' ';
        Character KEY_Character = ' ';
        Character KEY_Character_null = ' ';
        java.util.Date KEY_Date;
        java.util.Date KEY_Date_nullable;
        java.util.Date KEY_Date_null;
        double KEY_double;
        Double KEY_Double;
        Double KEY_Double_null;
        int KEY_int;
        Integer KEY_Integer;
        Integer KEY_Integer_null;
        float KEY_float;
        Float KEY_Float;
        Float KEY_Float_null;
        long KEY_long;
        Long KEY_Long;
        Long KEY_Long_null;
        Object KEY_Object;
        Object KEY_Object_nullable;
        Object KEY_Object_null;
        short KEY_short;
        Short KEY_Short_nullable;
        Short KEY_Short_null;
        String KEY_String;
        String KEY_String_nullable;
        String KEY_String_null;
        BigDecimal KEY_BigDecimal;
        BigDecimal KEY_BigDecimal_nullable;
        BigDecimal KEY_BigDecimal_null;
        List KEY_List;
        List KEY_List_nullable;
        List KEY_List_null;
        boolean VALUE_boolean;
        Boolean VALUE_Boolean;
        Boolean VALUE_Boolean_null;
        byte VALUE_byte;
        Byte VALUE_Byte;
        Byte VALUE_Byte_null;
        byte[] VALUE_byte_array;
        byte[] VALUE_byte_array_nullable;
        byte[] VALUE_byte_array_null;
        char VALUE_char = ' ';
        Character VALUE_Character = ' ';
        Character VALUE_Character_null = ' ';
        java.util.Date VALUE_Date;
        java.util.Date VALUE_Date_nullable;
        java.util.Date VALUE_Date_null;
        double VALUE_double;
        Double VALUE_Double;
        Double VALUE_Double_null;
        int VALUE_int;
        Integer VALUE_Integer;
        Integer VALUE_Integer_null;
        float VALUE_float;
        Float VALUE_Float;
        Float VALUE_Float_null;
        long VALUE_long;
        Long VALUE_Long;
        Long VALUE_Long_null;
        Object VALUE_Object;
        Object VALUE_Object_nullable;
        Object VALUE_Object_null;
        short VALUE_short;
        Short VALUE_Short_nullable;
        Short VALUE_Short_null;
        String VALUE_String;
        String VALUE_String_nullable;
        String VALUE_String_null;
        BigDecimal VALUE_BigDecimal;
        BigDecimal VALUE_BigDecimal_nullable;
        BigDecimal VALUE_BigDecimal_null;
        List VALUE_List;
        List VALUE_List_nullable;
        List VALUE_List_null;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.KEY_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean = null;
                    } else {
                        this.KEY_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean_null = null;
                    } else {
                        this.KEY_Boolean_null = dis.readBoolean();
                    }

                    this.KEY_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte = null;
                    } else {
                        this.KEY_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte_null = null;
                    } else {
                        this.KEY_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_null = byteArray;
                    }

                    this.KEY_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character = null;
                    } else {
                        this.KEY_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character_null = null;
                    } else {
                        this.KEY_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date = null;
                    } else {
                        this.KEY_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_nullable = null;
                    } else {
                        this.KEY_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_null = null;
                    } else {
                        this.KEY_Date_null = new Date(dis.readLong());
                    }

                    this.KEY_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double = null;
                    } else {
                        this.KEY_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double_null = null;
                    } else {
                        this.KEY_Double_null = dis.readDouble();
                    }

                    this.KEY_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer = null;
                    } else {
                        this.KEY_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer_null = null;
                    } else {
                        this.KEY_Integer_null = dis.readInt();
                    }

                    this.KEY_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float = null;
                    } else {
                        this.KEY_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float_null = null;
                    } else {
                        this.KEY_Float_null = dis.readFloat();
                    }

                    this.KEY_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long = null;
                    } else {
                        this.KEY_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long_null = null;
                    } else {
                        this.KEY_Long_null = dis.readLong();
                    }

                    this.KEY_Object = (Object) dis.readObject();

                    this.KEY_Object_nullable = (Object) dis.readObject();

                    this.KEY_Object_null = (Object) dis.readObject();

                    this.KEY_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_nullable = null;
                    } else {
                        this.KEY_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_null = null;
                    } else {
                        this.KEY_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_nullable = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.KEY_BigDecimal = (BigDecimal) dis.readObject();

                    this.KEY_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.KEY_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.KEY_List = (List) dis.readObject();

                    this.KEY_List_nullable = (List) dis.readObject();

                    this.KEY_List_null = (List) dis.readObject();

                    this.VALUE_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean = null;
                    } else {
                        this.VALUE_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean_null = null;
                    } else {
                        this.VALUE_Boolean_null = dis.readBoolean();
                    }

                    this.VALUE_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte = null;
                    } else {
                        this.VALUE_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte_null = null;
                    } else {
                        this.VALUE_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_null = byteArray;
                    }

                    this.VALUE_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character = null;
                    } else {
                        this.VALUE_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character_null = null;
                    } else {
                        this.VALUE_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date = null;
                    } else {
                        this.VALUE_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_nullable = null;
                    } else {
                        this.VALUE_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_null = null;
                    } else {
                        this.VALUE_Date_null = new Date(dis.readLong());
                    }

                    this.VALUE_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double = null;
                    } else {
                        this.VALUE_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double_null = null;
                    } else {
                        this.VALUE_Double_null = dis.readDouble();
                    }

                    this.VALUE_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer = null;
                    } else {
                        this.VALUE_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer_null = null;
                    } else {
                        this.VALUE_Integer_null = dis.readInt();
                    }

                    this.VALUE_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float = null;
                    } else {
                        this.VALUE_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float_null = null;
                    } else {
                        this.VALUE_Float_null = dis.readFloat();
                    }

                    this.VALUE_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long = null;
                    } else {
                        this.VALUE_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long_null = null;
                    } else {
                        this.VALUE_Long_null = dis.readLong();
                    }

                    this.VALUE_Object = (Object) dis.readObject();

                    this.VALUE_Object_nullable = (Object) dis.readObject();

                    this.VALUE_Object_null = (Object) dis.readObject();

                    this.VALUE_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_nullable = null;
                    } else {
                        this.VALUE_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_null = null;
                    } else {
                        this.VALUE_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.VALUE_BigDecimal = (BigDecimal) dis.readObject();

                    this.VALUE_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.VALUE_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.VALUE_List = (List) dis.readObject();

                    this.VALUE_List_nullable = (List) dis.readObject();

                    this.VALUE_List_null = (List) dis.readObject();

                } catch (IOException e) {
                    throw new RuntimeException(e);

                } catch (ClassNotFoundException eCNFE) {
                    throw new RuntimeException(eCNFE);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.KEY_boolean);

                // Boolean

                if (this.KEY_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean);
                }

                // Boolean

                if (this.KEY_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean_null);
                }

                // byte

                dos.writeByte(this.KEY_byte);

                // Byte

                if (this.KEY_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte);
                }

                // Byte

                if (this.KEY_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte_null);
                }

                // byte[]

                if (this.KEY_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array.length);
                    dos.write(this.KEY_byte_array);
                }

                // byte[]

                if (this.KEY_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_nullable.length);
                    dos.write(this.KEY_byte_array_nullable);
                }

                // byte[]

                if (this.KEY_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_null.length);
                    dos.write(this.KEY_byte_array_null);
                }

                // char

                dos.writeChar(this.KEY_char);

                // Character

                if (this.KEY_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character);
                }

                // Character

                if (this.KEY_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character_null);
                }

                // java.util.Date

                if (this.KEY_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.KEY_double);

                // Double

                if (this.KEY_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double);
                }

                // Double

                if (this.KEY_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double_null);
                }

                // int

                dos.writeInt(this.KEY_int);

                // Integer

                if (this.KEY_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer);
                }

                // Integer

                if (this.KEY_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer_null);
                }

                // float

                dos.writeFloat(this.KEY_float);

                // Float

                if (this.KEY_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float);
                }

                // Float

                if (this.KEY_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float_null);
                }

                // long

                dos.writeLong(this.KEY_long);

                // Long

                if (this.KEY_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long);
                }

                // Long

                if (this.KEY_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long_null);
                }

                // Object

                dos.writeObject(this.KEY_Object);

                // Object

                dos.writeObject(this.KEY_Object_nullable);

                // Object

                dos.writeObject(this.KEY_Object_null);

                // short

                dos.writeShort(this.KEY_short);

                // Short

                if (this.KEY_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_nullable);
                }

                // Short

                if (this.KEY_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_null);
                }

                // String

                if (this.KEY_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_null);

                // List

                dos.writeObject(this.KEY_List);

                // List

                dos.writeObject(this.KEY_List_nullable);

                // List

                dos.writeObject(this.KEY_List_null);

                // boolean

                dos.writeBoolean(this.VALUE_boolean);

                // Boolean

                if (this.VALUE_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean);
                }

                // Boolean

                if (this.VALUE_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean_null);
                }

                // byte

                dos.writeByte(this.VALUE_byte);

                // Byte

                if (this.VALUE_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte);
                }

                // Byte

                if (this.VALUE_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte_null);
                }

                // byte[]

                if (this.VALUE_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array.length);
                    dos.write(this.VALUE_byte_array);
                }

                // byte[]

                if (this.VALUE_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_nullable.length);
                    dos.write(this.VALUE_byte_array_nullable);
                }

                // byte[]

                if (this.VALUE_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_null.length);
                    dos.write(this.VALUE_byte_array_null);
                }

                // char

                dos.writeChar(this.VALUE_char);

                // Character

                if (this.VALUE_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character);
                }

                // Character

                if (this.VALUE_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character_null);
                }

                // java.util.Date

                if (this.VALUE_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.VALUE_double);

                // Double

                if (this.VALUE_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double);
                }

                // Double

                if (this.VALUE_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double_null);
                }

                // int

                dos.writeInt(this.VALUE_int);

                // Integer

                if (this.VALUE_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer);
                }

                // Integer

                if (this.VALUE_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer_null);
                }

                // float

                dos.writeFloat(this.VALUE_float);

                // Float

                if (this.VALUE_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float);
                }

                // Float

                if (this.VALUE_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float_null);
                }

                // long

                dos.writeLong(this.VALUE_long);

                // Long

                if (this.VALUE_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long);
                }

                // Long

                if (this.VALUE_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long_null);
                }

                // Object

                dos.writeObject(this.VALUE_Object);

                // Object

                dos.writeObject(this.VALUE_Object_nullable);

                // Object

                dos.writeObject(this.VALUE_Object_null);

                // short

                dos.writeShort(this.VALUE_short);

                // Short

                if (this.VALUE_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_nullable);
                }

                // Short

                if (this.VALUE_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_null);
                }

                // String

                if (this.VALUE_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_null);

                // List

                dos.writeObject(this.VALUE_List);

                // List

                dos.writeObject(this.VALUE_List_nullable);

                // List

                dos.writeObject(this.VALUE_List_null);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("KEY_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_boolean));

            sb.append(", ");

            sb.append("KEY_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean));

            sb.append(", ");

            sb.append("KEY_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean_null));

            sb.append(", ");

            sb.append("KEY_byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte));

            sb.append(", ");

            sb.append("KEY_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte));

            sb.append(", ");

            sb.append("KEY_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte_null));

            sb.append(", ");

            sb.append("KEY_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array));

            sb.append(", ");

            sb.append("KEY_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_nullable));

            sb.append(", ");

            sb.append("KEY_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_null));

            sb.append(", ");

            sb.append("KEY_char");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_char));

            sb.append(", ");

            sb.append("KEY_Character");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character));

            sb.append(", ");

            sb.append("KEY_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character_null));

            sb.append(", ");

            sb.append("KEY_Date");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date));

            sb.append(", ");

            sb.append("KEY_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_nullable));

            sb.append(", ");

            sb.append("KEY_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_null));

            sb.append(", ");

            sb.append("KEY_double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_double));

            sb.append(", ");

            sb.append("KEY_Double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double));

            sb.append(", ");

            sb.append("KEY_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double_null));

            sb.append(", ");

            sb.append("KEY_int");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_int));

            sb.append(", ");

            sb.append("KEY_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer));

            sb.append(", ");

            sb.append("KEY_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer_null));

            sb.append(", ");

            sb.append("KEY_float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_float));

            sb.append(", ");

            sb.append("KEY_Float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float));

            sb.append(", ");

            sb.append("KEY_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float_null));

            sb.append(", ");

            sb.append("KEY_long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_long));

            sb.append(", ");

            sb.append("KEY_Long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long));

            sb.append(", ");

            sb.append("KEY_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long_null));

            sb.append(", ");

            sb.append("KEY_Object");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object));

            sb.append(", ");

            sb.append("KEY_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_nullable));

            sb.append(", ");

            sb.append("KEY_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_null));

            sb.append(", ");

            sb.append("KEY_short");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_short));

            sb.append(", ");

            sb.append("KEY_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_nullable));

            sb.append(", ");

            sb.append("KEY_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_null));

            sb.append(", ");

            sb.append("KEY_String");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String));

            sb.append(", ");

            sb.append("KEY_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_nullable));

            sb.append(", ");

            sb.append("KEY_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_null));

            sb.append(", ");

            sb.append("KEY_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal));

            sb.append(", ");

            sb.append("KEY_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_nullable));

            sb.append(", ");

            sb.append("KEY_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_null));

            sb.append(", ");

            sb.append("KEY_List");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List));

            sb.append(", ");

            sb.append("KEY_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_nullable));

            sb.append(", ");

            sb.append("KEY_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_null));

            sb.append(", ");

            sb.append("VALUE_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean_null));

            sb.append(", ");

            sb.append("VALUE_byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte));

            sb.append(", ");

            sb.append("VALUE_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte));

            sb.append(", ");

            sb.append("VALUE_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte_null));

            sb.append(", ");

            sb.append("VALUE_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array));

            sb.append(", ");

            sb.append("VALUE_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_nullable));

            sb.append(", ");

            sb.append("VALUE_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_null));

            sb.append(", ");

            sb.append("VALUE_char");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_char));

            sb.append(", ");

            sb.append("VALUE_Character");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character));

            sb.append(", ");

            sb.append("VALUE_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character_null));

            sb.append(", ");

            sb.append("VALUE_Date");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date));

            sb.append(", ");

            sb.append("VALUE_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_nullable));

            sb.append(", ");

            sb.append("VALUE_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_null));

            sb.append(", ");

            sb.append("VALUE_double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_double));

            sb.append(", ");

            sb.append("VALUE_Double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double));

            sb.append(", ");

            sb.append("VALUE_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double_null));

            sb.append(", ");

            sb.append("VALUE_int");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_int));

            sb.append(", ");

            sb.append("VALUE_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer));

            sb.append(", ");

            sb.append("VALUE_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer_null));

            sb.append(", ");

            sb.append("VALUE_float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_float));

            sb.append(", ");

            sb.append("VALUE_Float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float));

            sb.append(", ");

            sb.append("VALUE_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float_null));

            sb.append(", ");

            sb.append("VALUE_long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_long));

            sb.append(", ");

            sb.append("VALUE_Long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long));

            sb.append(", ");

            sb.append("VALUE_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long_null));

            sb.append(", ");

            sb.append("VALUE_Object");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object));

            sb.append(", ");

            sb.append("VALUE_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_nullable));

            sb.append(", ");

            sb.append("VALUE_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_null));

            sb.append(", ");

            sb.append("VALUE_short");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_short));

            sb.append(", ");

            sb.append("VALUE_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_nullable));

            sb.append(", ");

            sb.append("VALUE_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_null));

            sb.append(", ");

            sb.append("VALUE_String");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String));

            sb.append(", ");

            sb.append("VALUE_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_nullable));

            sb.append(", ");

            sb.append("VALUE_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_null));

            sb.append(", ");

            sb.append("VALUE_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_nullable));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_null));

            sb.append(", ");

            sb.append("VALUE_List");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List));

            sb.append(", ");

            sb.append("VALUE_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_nullable));

            sb.append(", ");

            sb.append("VALUE_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_null));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row3Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    static class OnRowsEndStructtAggregate_1 implements
            routines.system.IPersistableRow<OnRowsEndStructtAggregate_1> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        boolean KEY_boolean;
        Boolean KEY_Boolean;
        Boolean KEY_Boolean_null;
        byte KEY_byte;
        Byte KEY_Byte;
        Byte KEY_Byte_null;
        byte[] KEY_byte_array;
        byte[] KEY_byte_array_nullable;
        byte[] KEY_byte_array_null;
        char KEY_char = ' ';
        Character KEY_Character = ' ';
        Character KEY_Character_null = ' ';
        java.util.Date KEY_Date;
        java.util.Date KEY_Date_nullable;
        java.util.Date KEY_Date_null;
        double KEY_double;
        Double KEY_Double;
        Double KEY_Double_null;
        int KEY_int;
        Integer KEY_Integer;
        Integer KEY_Integer_null;
        float KEY_float;
        Float KEY_Float;
        Float KEY_Float_null;
        long KEY_long;
        Long KEY_Long;
        Long KEY_Long_null;
        Object KEY_Object;
        Object KEY_Object_nullable;
        Object KEY_Object_null;
        short KEY_short;
        Short KEY_Short_nullable;
        Short KEY_Short_null;
        String KEY_String;
        String KEY_String_nullable;
        String KEY_String_null;
        BigDecimal KEY_BigDecimal;
        BigDecimal KEY_BigDecimal_nullable;
        BigDecimal KEY_BigDecimal_null;
        List KEY_List;
        List KEY_List_nullable;
        List KEY_List_null;
        boolean VALUE_boolean;
        Boolean VALUE_Boolean;
        Boolean VALUE_Boolean_null;
        byte VALUE_byte;
        Byte VALUE_Byte;
        Byte VALUE_Byte_null;
        byte[] VALUE_byte_array;
        byte[] VALUE_byte_array_nullable;
        byte[] VALUE_byte_array_null;
        char VALUE_char = ' ';
        Character VALUE_Character = ' ';
        Character VALUE_Character_null = ' ';
        java.util.Date VALUE_Date;
        java.util.Date VALUE_Date_nullable;
        java.util.Date VALUE_Date_null;
        double VALUE_double;
        Double VALUE_Double;
        Double VALUE_Double_null;
        int VALUE_int;
        Integer VALUE_Integer;
        Integer VALUE_Integer_null;
        float VALUE_float;
        Float VALUE_Float;
        Float VALUE_Float_null;
        long VALUE_long;
        Long VALUE_Long;
        Long VALUE_Long_null;
        Object VALUE_Object;
        Object VALUE_Object_nullable;
        Object VALUE_Object_null;
        short VALUE_short;
        Short VALUE_Short_nullable;
        Short VALUE_Short_null;
        String VALUE_String;
        String VALUE_String_nullable;
        String VALUE_String_null;
        BigDecimal VALUE_BigDecimal;
        BigDecimal VALUE_BigDecimal_nullable;
        BigDecimal VALUE_BigDecimal_null;
        List VALUE_List;
        List VALUE_List_nullable;
        List VALUE_List_null;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.KEY_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean = null;
                    } else {
                        this.KEY_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean_null = null;
                    } else {
                        this.KEY_Boolean_null = dis.readBoolean();
                    }

                    this.KEY_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte = null;
                    } else {
                        this.KEY_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte_null = null;
                    } else {
                        this.KEY_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_null = byteArray;
                    }

                    this.KEY_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character = null;
                    } else {
                        this.KEY_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character_null = null;
                    } else {
                        this.KEY_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date = null;
                    } else {
                        this.KEY_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_nullable = null;
                    } else {
                        this.KEY_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_null = null;
                    } else {
                        this.KEY_Date_null = new Date(dis.readLong());
                    }

                    this.KEY_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double = null;
                    } else {
                        this.KEY_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double_null = null;
                    } else {
                        this.KEY_Double_null = dis.readDouble();
                    }

                    this.KEY_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer = null;
                    } else {
                        this.KEY_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer_null = null;
                    } else {
                        this.KEY_Integer_null = dis.readInt();
                    }

                    this.KEY_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float = null;
                    } else {
                        this.KEY_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float_null = null;
                    } else {
                        this.KEY_Float_null = dis.readFloat();
                    }

                    this.KEY_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long = null;
                    } else {
                        this.KEY_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long_null = null;
                    } else {
                        this.KEY_Long_null = dis.readLong();
                    }

                    this.KEY_Object = (Object) dis.readObject();

                    this.KEY_Object_nullable = (Object) dis.readObject();

                    this.KEY_Object_null = (Object) dis.readObject();

                    this.KEY_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_nullable = null;
                    } else {
                        this.KEY_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_null = null;
                    } else {
                        this.KEY_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_nullable = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.KEY_BigDecimal = (BigDecimal) dis.readObject();

                    this.KEY_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.KEY_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.KEY_List = (List) dis.readObject();

                    this.KEY_List_nullable = (List) dis.readObject();

                    this.KEY_List_null = (List) dis.readObject();

                    this.VALUE_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean = null;
                    } else {
                        this.VALUE_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean_null = null;
                    } else {
                        this.VALUE_Boolean_null = dis.readBoolean();
                    }

                    this.VALUE_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte = null;
                    } else {
                        this.VALUE_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte_null = null;
                    } else {
                        this.VALUE_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_null = byteArray;
                    }

                    this.VALUE_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character = null;
                    } else {
                        this.VALUE_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character_null = null;
                    } else {
                        this.VALUE_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date = null;
                    } else {
                        this.VALUE_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_nullable = null;
                    } else {
                        this.VALUE_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_null = null;
                    } else {
                        this.VALUE_Date_null = new Date(dis.readLong());
                    }

                    this.VALUE_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double = null;
                    } else {
                        this.VALUE_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double_null = null;
                    } else {
                        this.VALUE_Double_null = dis.readDouble();
                    }

                    this.VALUE_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer = null;
                    } else {
                        this.VALUE_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer_null = null;
                    } else {
                        this.VALUE_Integer_null = dis.readInt();
                    }

                    this.VALUE_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float = null;
                    } else {
                        this.VALUE_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float_null = null;
                    } else {
                        this.VALUE_Float_null = dis.readFloat();
                    }

                    this.VALUE_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long = null;
                    } else {
                        this.VALUE_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long_null = null;
                    } else {
                        this.VALUE_Long_null = dis.readLong();
                    }

                    this.VALUE_Object = (Object) dis.readObject();

                    this.VALUE_Object_nullable = (Object) dis.readObject();

                    this.VALUE_Object_null = (Object) dis.readObject();

                    this.VALUE_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_nullable = null;
                    } else {
                        this.VALUE_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_null = null;
                    } else {
                        this.VALUE_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.VALUE_BigDecimal = (BigDecimal) dis.readObject();

                    this.VALUE_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.VALUE_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.VALUE_List = (List) dis.readObject();

                    this.VALUE_List_nullable = (List) dis.readObject();

                    this.VALUE_List_null = (List) dis.readObject();

                } catch (IOException e) {
                    throw new RuntimeException(e);

                } catch (ClassNotFoundException eCNFE) {
                    throw new RuntimeException(eCNFE);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.KEY_boolean);

                // Boolean

                if (this.KEY_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean);
                }

                // Boolean

                if (this.KEY_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean_null);
                }

                // byte

                dos.writeByte(this.KEY_byte);

                // Byte

                if (this.KEY_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte);
                }

                // Byte

                if (this.KEY_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte_null);
                }

                // byte[]

                if (this.KEY_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array.length);
                    dos.write(this.KEY_byte_array);
                }

                // byte[]

                if (this.KEY_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_nullable.length);
                    dos.write(this.KEY_byte_array_nullable);
                }

                // byte[]

                if (this.KEY_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_null.length);
                    dos.write(this.KEY_byte_array_null);
                }

                // char

                dos.writeChar(this.KEY_char);

                // Character

                if (this.KEY_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character);
                }

                // Character

                if (this.KEY_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character_null);
                }

                // java.util.Date

                if (this.KEY_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.KEY_double);

                // Double

                if (this.KEY_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double);
                }

                // Double

                if (this.KEY_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double_null);
                }

                // int

                dos.writeInt(this.KEY_int);

                // Integer

                if (this.KEY_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer);
                }

                // Integer

                if (this.KEY_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer_null);
                }

                // float

                dos.writeFloat(this.KEY_float);

                // Float

                if (this.KEY_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float);
                }

                // Float

                if (this.KEY_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float_null);
                }

                // long

                dos.writeLong(this.KEY_long);

                // Long

                if (this.KEY_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long);
                }

                // Long

                if (this.KEY_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long_null);
                }

                // Object

                dos.writeObject(this.KEY_Object);

                // Object

                dos.writeObject(this.KEY_Object_nullable);

                // Object

                dos.writeObject(this.KEY_Object_null);

                // short

                dos.writeShort(this.KEY_short);

                // Short

                if (this.KEY_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_nullable);
                }

                // Short

                if (this.KEY_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_null);
                }

                // String

                if (this.KEY_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_null);

                // List

                dos.writeObject(this.KEY_List);

                // List

                dos.writeObject(this.KEY_List_nullable);

                // List

                dos.writeObject(this.KEY_List_null);

                // boolean

                dos.writeBoolean(this.VALUE_boolean);

                // Boolean

                if (this.VALUE_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean);
                }

                // Boolean

                if (this.VALUE_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean_null);
                }

                // byte

                dos.writeByte(this.VALUE_byte);

                // Byte

                if (this.VALUE_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte);
                }

                // Byte

                if (this.VALUE_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte_null);
                }

                // byte[]

                if (this.VALUE_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array.length);
                    dos.write(this.VALUE_byte_array);
                }

                // byte[]

                if (this.VALUE_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_nullable.length);
                    dos.write(this.VALUE_byte_array_nullable);
                }

                // byte[]

                if (this.VALUE_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_null.length);
                    dos.write(this.VALUE_byte_array_null);
                }

                // char

                dos.writeChar(this.VALUE_char);

                // Character

                if (this.VALUE_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character);
                }

                // Character

                if (this.VALUE_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character_null);
                }

                // java.util.Date

                if (this.VALUE_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.VALUE_double);

                // Double

                if (this.VALUE_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double);
                }

                // Double

                if (this.VALUE_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double_null);
                }

                // int

                dos.writeInt(this.VALUE_int);

                // Integer

                if (this.VALUE_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer);
                }

                // Integer

                if (this.VALUE_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer_null);
                }

                // float

                dos.writeFloat(this.VALUE_float);

                // Float

                if (this.VALUE_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float);
                }

                // Float

                if (this.VALUE_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float_null);
                }

                // long

                dos.writeLong(this.VALUE_long);

                // Long

                if (this.VALUE_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long);
                }

                // Long

                if (this.VALUE_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long_null);
                }

                // Object

                dos.writeObject(this.VALUE_Object);

                // Object

                dos.writeObject(this.VALUE_Object_nullable);

                // Object

                dos.writeObject(this.VALUE_Object_null);

                // short

                dos.writeShort(this.VALUE_short);

                // Short

                if (this.VALUE_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_nullable);
                }

                // Short

                if (this.VALUE_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_null);
                }

                // String

                if (this.VALUE_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_null);

                // List

                dos.writeObject(this.VALUE_List);

                // List

                dos.writeObject(this.VALUE_List_nullable);

                // List

                dos.writeObject(this.VALUE_List_null);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("KEY_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_boolean));

            sb.append(", ");

            sb.append("KEY_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean));

            sb.append(", ");

            sb.append("KEY_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean_null));

            sb.append(", ");

            sb.append("KEY_byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte));

            sb.append(", ");

            sb.append("KEY_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte));

            sb.append(", ");

            sb.append("KEY_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte_null));

            sb.append(", ");

            sb.append("KEY_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array));

            sb.append(", ");

            sb.append("KEY_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_nullable));

            sb.append(", ");

            sb.append("KEY_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_null));

            sb.append(", ");

            sb.append("KEY_char");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_char));

            sb.append(", ");

            sb.append("KEY_Character");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character));

            sb.append(", ");

            sb.append("KEY_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character_null));

            sb.append(", ");

            sb.append("KEY_Date");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date));

            sb.append(", ");

            sb.append("KEY_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_nullable));

            sb.append(", ");

            sb.append("KEY_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_null));

            sb.append(", ");

            sb.append("KEY_double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_double));

            sb.append(", ");

            sb.append("KEY_Double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double));

            sb.append(", ");

            sb.append("KEY_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double_null));

            sb.append(", ");

            sb.append("KEY_int");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_int));

            sb.append(", ");

            sb.append("KEY_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer));

            sb.append(", ");

            sb.append("KEY_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer_null));

            sb.append(", ");

            sb.append("KEY_float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_float));

            sb.append(", ");

            sb.append("KEY_Float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float));

            sb.append(", ");

            sb.append("KEY_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float_null));

            sb.append(", ");

            sb.append("KEY_long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_long));

            sb.append(", ");

            sb.append("KEY_Long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long));

            sb.append(", ");

            sb.append("KEY_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long_null));

            sb.append(", ");

            sb.append("KEY_Object");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object));

            sb.append(", ");

            sb.append("KEY_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_nullable));

            sb.append(", ");

            sb.append("KEY_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_null));

            sb.append(", ");

            sb.append("KEY_short");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_short));

            sb.append(", ");

            sb.append("KEY_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_nullable));

            sb.append(", ");

            sb.append("KEY_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_null));

            sb.append(", ");

            sb.append("KEY_String");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String));

            sb.append(", ");

            sb.append("KEY_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_nullable));

            sb.append(", ");

            sb.append("KEY_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_null));

            sb.append(", ");

            sb.append("KEY_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal));

            sb.append(", ");

            sb.append("KEY_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_nullable));

            sb.append(", ");

            sb.append("KEY_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_null));

            sb.append(", ");

            sb.append("KEY_List");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List));

            sb.append(", ");

            sb.append("KEY_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_nullable));

            sb.append(", ");

            sb.append("KEY_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_null));

            sb.append(", ");

            sb.append("VALUE_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean_null));

            sb.append(", ");

            sb.append("VALUE_byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte));

            sb.append(", ");

            sb.append("VALUE_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte));

            sb.append(", ");

            sb.append("VALUE_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte_null));

            sb.append(", ");

            sb.append("VALUE_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array));

            sb.append(", ");

            sb.append("VALUE_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_nullable));

            sb.append(", ");

            sb.append("VALUE_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_null));

            sb.append(", ");

            sb.append("VALUE_char");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_char));

            sb.append(", ");

            sb.append("VALUE_Character");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character));

            sb.append(", ");

            sb.append("VALUE_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character_null));

            sb.append(", ");

            sb.append("VALUE_Date");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date));

            sb.append(", ");

            sb.append("VALUE_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_nullable));

            sb.append(", ");

            sb.append("VALUE_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_null));

            sb.append(", ");

            sb.append("VALUE_double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_double));

            sb.append(", ");

            sb.append("VALUE_Double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double));

            sb.append(", ");

            sb.append("VALUE_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double_null));

            sb.append(", ");

            sb.append("VALUE_int");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_int));

            sb.append(", ");

            sb.append("VALUE_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer));

            sb.append(", ");

            sb.append("VALUE_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer_null));

            sb.append(", ");

            sb.append("VALUE_float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_float));

            sb.append(", ");

            sb.append("VALUE_Float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float));

            sb.append(", ");

            sb.append("VALUE_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float_null));

            sb.append(", ");

            sb.append("VALUE_long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_long));

            sb.append(", ");

            sb.append("VALUE_Long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long));

            sb.append(", ");

            sb.append("VALUE_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long_null));

            sb.append(", ");

            sb.append("VALUE_Object");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object));

            sb.append(", ");

            sb.append("VALUE_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_nullable));

            sb.append(", ");

            sb.append("VALUE_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_null));

            sb.append(", ");

            sb.append("VALUE_short");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_short));

            sb.append(", ");

            sb.append("VALUE_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_nullable));

            sb.append(", ");

            sb.append("VALUE_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_null));

            sb.append(", ");

            sb.append("VALUE_String");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String));

            sb.append(", ");

            sb.append("VALUE_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_nullable));

            sb.append(", ");

            sb.append("VALUE_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_null));

            sb.append(", ");

            sb.append("VALUE_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_nullable));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_null));

            sb.append(", ");

            sb.append("VALUE_List");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List));

            sb.append(", ");

            sb.append("VALUE_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_nullable));

            sb.append(", ");

            sb.append("VALUE_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_null));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(OnRowsEndStructtAggregate_1 other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    static class row7Struct implements
            routines.system.IPersistableRow<row7Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        boolean KEY_boolean;
        Boolean KEY_Boolean;
        Boolean KEY_Boolean_null;
        byte KEY_byte;
        Byte KEY_Byte;
        Byte KEY_Byte_null;
        byte[] KEY_byte_array;
        byte[] KEY_byte_array_nullable;
        byte[] KEY_byte_array_null;
        char KEY_char = ' ';
        Character KEY_Character = ' ';
        Character KEY_Character_null = ' ';
        java.util.Date KEY_Date;
        java.util.Date KEY_Date_nullable;
        java.util.Date KEY_Date_null;
        double KEY_double;
        Double KEY_Double;
        Double KEY_Double_null;
        int KEY_int;
        Integer KEY_Integer;
        Integer KEY_Integer_null;
        float KEY_float;
        Float KEY_Float;
        Float KEY_Float_null;
        long KEY_long;
        Long KEY_Long;
        Long KEY_Long_null;
        Object KEY_Object;
        Object KEY_Object_nullable;
        Object KEY_Object_null;
        short KEY_short;
        Short KEY_Short_nullable;
        Short KEY_Short_null;
        String KEY_String;
        String KEY_String_nullable;
        String KEY_String_null;
        BigDecimal KEY_BigDecimal;
        BigDecimal KEY_BigDecimal_nullable;
        BigDecimal KEY_BigDecimal_null;
        List KEY_List;
        List KEY_List_nullable;
        List KEY_List_null;
        boolean VALUE_boolean;
        Boolean VALUE_Boolean;
        Boolean VALUE_Boolean_null;
        byte VALUE_byte;
        Byte VALUE_Byte;
        Byte VALUE_Byte_null;
        byte[] VALUE_byte_array;
        byte[] VALUE_byte_array_nullable;
        byte[] VALUE_byte_array_null;
        char VALUE_char = ' ';
        Character VALUE_Character = ' ';
        Character VALUE_Character_null = ' ';
        java.util.Date VALUE_Date;
        java.util.Date VALUE_Date_nullable;
        java.util.Date VALUE_Date_null;
        double VALUE_double;
        Double VALUE_Double;
        Double VALUE_Double_null;
        int VALUE_int;
        Integer VALUE_Integer;
        Integer VALUE_Integer_null;
        float VALUE_float;
        Float VALUE_Float;
        Float VALUE_Float_null;
        long VALUE_long;
        Long VALUE_Long;
        Long VALUE_Long_null;
        Object VALUE_Object;
        Object VALUE_Object_nullable;
        Object VALUE_Object_null;
        short VALUE_short;
        Short VALUE_Short_nullable;
        Short VALUE_Short_null;
        String VALUE_String;
        String VALUE_String_nullable;
        String VALUE_String_null;
        BigDecimal VALUE_BigDecimal;
        BigDecimal VALUE_BigDecimal_nullable;
        BigDecimal VALUE_BigDecimal_null;
        List VALUE_List;
        List VALUE_List_nullable;
        List VALUE_List_null;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.KEY_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean = null;
                    } else {
                        this.KEY_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean_null = null;
                    } else {
                        this.KEY_Boolean_null = dis.readBoolean();
                    }

                    this.KEY_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte = null;
                    } else {
                        this.KEY_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte_null = null;
                    } else {
                        this.KEY_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_null = byteArray;
                    }

                    this.KEY_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character = null;
                    } else {
                        this.KEY_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character_null = null;
                    } else {
                        this.KEY_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date = null;
                    } else {
                        this.KEY_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_nullable = null;
                    } else {
                        this.KEY_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_null = null;
                    } else {
                        this.KEY_Date_null = new Date(dis.readLong());
                    }

                    this.KEY_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double = null;
                    } else {
                        this.KEY_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double_null = null;
                    } else {
                        this.KEY_Double_null = dis.readDouble();
                    }

                    this.KEY_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer = null;
                    } else {
                        this.KEY_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer_null = null;
                    } else {
                        this.KEY_Integer_null = dis.readInt();
                    }

                    this.KEY_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float = null;
                    } else {
                        this.KEY_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float_null = null;
                    } else {
                        this.KEY_Float_null = dis.readFloat();
                    }

                    this.KEY_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long = null;
                    } else {
                        this.KEY_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long_null = null;
                    } else {
                        this.KEY_Long_null = dis.readLong();
                    }

                    this.KEY_Object = (Object) dis.readObject();

                    this.KEY_Object_nullable = (Object) dis.readObject();

                    this.KEY_Object_null = (Object) dis.readObject();

                    this.KEY_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_nullable = null;
                    } else {
                        this.KEY_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_null = null;
                    } else {
                        this.KEY_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_nullable = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.KEY_BigDecimal = (BigDecimal) dis.readObject();

                    this.KEY_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.KEY_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.KEY_List = (List) dis.readObject();

                    this.KEY_List_nullable = (List) dis.readObject();

                    this.KEY_List_null = (List) dis.readObject();

                    this.VALUE_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean = null;
                    } else {
                        this.VALUE_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean_null = null;
                    } else {
                        this.VALUE_Boolean_null = dis.readBoolean();
                    }

                    this.VALUE_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte = null;
                    } else {
                        this.VALUE_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte_null = null;
                    } else {
                        this.VALUE_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_null = byteArray;
                    }

                    this.VALUE_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character = null;
                    } else {
                        this.VALUE_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character_null = null;
                    } else {
                        this.VALUE_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date = null;
                    } else {
                        this.VALUE_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_nullable = null;
                    } else {
                        this.VALUE_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_null = null;
                    } else {
                        this.VALUE_Date_null = new Date(dis.readLong());
                    }

                    this.VALUE_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double = null;
                    } else {
                        this.VALUE_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double_null = null;
                    } else {
                        this.VALUE_Double_null = dis.readDouble();
                    }

                    this.VALUE_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer = null;
                    } else {
                        this.VALUE_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer_null = null;
                    } else {
                        this.VALUE_Integer_null = dis.readInt();
                    }

                    this.VALUE_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float = null;
                    } else {
                        this.VALUE_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float_null = null;
                    } else {
                        this.VALUE_Float_null = dis.readFloat();
                    }

                    this.VALUE_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long = null;
                    } else {
                        this.VALUE_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long_null = null;
                    } else {
                        this.VALUE_Long_null = dis.readLong();
                    }

                    this.VALUE_Object = (Object) dis.readObject();

                    this.VALUE_Object_nullable = (Object) dis.readObject();

                    this.VALUE_Object_null = (Object) dis.readObject();

                    this.VALUE_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_nullable = null;
                    } else {
                        this.VALUE_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_null = null;
                    } else {
                        this.VALUE_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.VALUE_BigDecimal = (BigDecimal) dis.readObject();

                    this.VALUE_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.VALUE_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.VALUE_List = (List) dis.readObject();

                    this.VALUE_List_nullable = (List) dis.readObject();

                    this.VALUE_List_null = (List) dis.readObject();

                } catch (IOException e) {
                    throw new RuntimeException(e);

                } catch (ClassNotFoundException eCNFE) {
                    throw new RuntimeException(eCNFE);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.KEY_boolean);

                // Boolean

                if (this.KEY_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean);
                }

                // Boolean

                if (this.KEY_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean_null);
                }

                // byte

                dos.writeByte(this.KEY_byte);

                // Byte

                if (this.KEY_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte);
                }

                // Byte

                if (this.KEY_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte_null);
                }

                // byte[]

                if (this.KEY_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array.length);
                    dos.write(this.KEY_byte_array);
                }

                // byte[]

                if (this.KEY_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_nullable.length);
                    dos.write(this.KEY_byte_array_nullable);
                }

                // byte[]

                if (this.KEY_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_null.length);
                    dos.write(this.KEY_byte_array_null);
                }

                // char

                dos.writeChar(this.KEY_char);

                // Character

                if (this.KEY_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character);
                }

                // Character

                if (this.KEY_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character_null);
                }

                // java.util.Date

                if (this.KEY_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.KEY_double);

                // Double

                if (this.KEY_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double);
                }

                // Double

                if (this.KEY_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double_null);
                }

                // int

                dos.writeInt(this.KEY_int);

                // Integer

                if (this.KEY_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer);
                }

                // Integer

                if (this.KEY_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer_null);
                }

                // float

                dos.writeFloat(this.KEY_float);

                // Float

                if (this.KEY_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float);
                }

                // Float

                if (this.KEY_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float_null);
                }

                // long

                dos.writeLong(this.KEY_long);

                // Long

                if (this.KEY_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long);
                }

                // Long

                if (this.KEY_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long_null);
                }

                // Object

                dos.writeObject(this.KEY_Object);

                // Object

                dos.writeObject(this.KEY_Object_nullable);

                // Object

                dos.writeObject(this.KEY_Object_null);

                // short

                dos.writeShort(this.KEY_short);

                // Short

                if (this.KEY_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_nullable);
                }

                // Short

                if (this.KEY_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_null);
                }

                // String

                if (this.KEY_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_null);

                // List

                dos.writeObject(this.KEY_List);

                // List

                dos.writeObject(this.KEY_List_nullable);

                // List

                dos.writeObject(this.KEY_List_null);

                // boolean

                dos.writeBoolean(this.VALUE_boolean);

                // Boolean

                if (this.VALUE_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean);
                }

                // Boolean

                if (this.VALUE_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean_null);
                }

                // byte

                dos.writeByte(this.VALUE_byte);

                // Byte

                if (this.VALUE_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte);
                }

                // Byte

                if (this.VALUE_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte_null);
                }

                // byte[]

                if (this.VALUE_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array.length);
                    dos.write(this.VALUE_byte_array);
                }

                // byte[]

                if (this.VALUE_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_nullable.length);
                    dos.write(this.VALUE_byte_array_nullable);
                }

                // byte[]

                if (this.VALUE_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_null.length);
                    dos.write(this.VALUE_byte_array_null);
                }

                // char

                dos.writeChar(this.VALUE_char);

                // Character

                if (this.VALUE_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character);
                }

                // Character

                if (this.VALUE_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character_null);
                }

                // java.util.Date

                if (this.VALUE_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.VALUE_double);

                // Double

                if (this.VALUE_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double);
                }

                // Double

                if (this.VALUE_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double_null);
                }

                // int

                dos.writeInt(this.VALUE_int);

                // Integer

                if (this.VALUE_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer);
                }

                // Integer

                if (this.VALUE_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer_null);
                }

                // float

                dos.writeFloat(this.VALUE_float);

                // Float

                if (this.VALUE_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float);
                }

                // Float

                if (this.VALUE_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float_null);
                }

                // long

                dos.writeLong(this.VALUE_long);

                // Long

                if (this.VALUE_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long);
                }

                // Long

                if (this.VALUE_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long_null);
                }

                // Object

                dos.writeObject(this.VALUE_Object);

                // Object

                dos.writeObject(this.VALUE_Object_nullable);

                // Object

                dos.writeObject(this.VALUE_Object_null);

                // short

                dos.writeShort(this.VALUE_short);

                // Short

                if (this.VALUE_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_nullable);
                }

                // Short

                if (this.VALUE_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_null);
                }

                // String

                if (this.VALUE_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_null);

                // List

                dos.writeObject(this.VALUE_List);

                // List

                dos.writeObject(this.VALUE_List_nullable);

                // List

                dos.writeObject(this.VALUE_List_null);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("KEY_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_boolean));

            sb.append(", ");

            sb.append("KEY_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean));

            sb.append(", ");

            sb.append("KEY_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean_null));

            sb.append(", ");

            sb.append("KEY_byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte));

            sb.append(", ");

            sb.append("KEY_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte));

            sb.append(", ");

            sb.append("KEY_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte_null));

            sb.append(", ");

            sb.append("KEY_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array));

            sb.append(", ");

            sb.append("KEY_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_nullable));

            sb.append(", ");

            sb.append("KEY_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_null));

            sb.append(", ");

            sb.append("KEY_char");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_char));

            sb.append(", ");

            sb.append("KEY_Character");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character));

            sb.append(", ");

            sb.append("KEY_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character_null));

            sb.append(", ");

            sb.append("KEY_Date");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date));

            sb.append(", ");

            sb.append("KEY_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_nullable));

            sb.append(", ");

            sb.append("KEY_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_null));

            sb.append(", ");

            sb.append("KEY_double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_double));

            sb.append(", ");

            sb.append("KEY_Double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double));

            sb.append(", ");

            sb.append("KEY_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double_null));

            sb.append(", ");

            sb.append("KEY_int");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_int));

            sb.append(", ");

            sb.append("KEY_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer));

            sb.append(", ");

            sb.append("KEY_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer_null));

            sb.append(", ");

            sb.append("KEY_float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_float));

            sb.append(", ");

            sb.append("KEY_Float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float));

            sb.append(", ");

            sb.append("KEY_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float_null));

            sb.append(", ");

            sb.append("KEY_long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_long));

            sb.append(", ");

            sb.append("KEY_Long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long));

            sb.append(", ");

            sb.append("KEY_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long_null));

            sb.append(", ");

            sb.append("KEY_Object");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object));

            sb.append(", ");

            sb.append("KEY_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_nullable));

            sb.append(", ");

            sb.append("KEY_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_null));

            sb.append(", ");

            sb.append("KEY_short");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_short));

            sb.append(", ");

            sb.append("KEY_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_nullable));

            sb.append(", ");

            sb.append("KEY_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_null));

            sb.append(", ");

            sb.append("KEY_String");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String));

            sb.append(", ");

            sb.append("KEY_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_nullable));

            sb.append(", ");

            sb.append("KEY_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_null));

            sb.append(", ");

            sb.append("KEY_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal));

            sb.append(", ");

            sb.append("KEY_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_nullable));

            sb.append(", ");

            sb.append("KEY_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_null));

            sb.append(", ");

            sb.append("KEY_List");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List));

            sb.append(", ");

            sb.append("KEY_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_nullable));

            sb.append(", ");

            sb.append("KEY_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_null));

            sb.append(", ");

            sb.append("VALUE_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean_null));

            sb.append(", ");

            sb.append("VALUE_byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte));

            sb.append(", ");

            sb.append("VALUE_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte));

            sb.append(", ");

            sb.append("VALUE_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte_null));

            sb.append(", ");

            sb.append("VALUE_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array));

            sb.append(", ");

            sb.append("VALUE_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_nullable));

            sb.append(", ");

            sb.append("VALUE_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_null));

            sb.append(", ");

            sb.append("VALUE_char");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_char));

            sb.append(", ");

            sb.append("VALUE_Character");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character));

            sb.append(", ");

            sb.append("VALUE_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character_null));

            sb.append(", ");

            sb.append("VALUE_Date");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date));

            sb.append(", ");

            sb.append("VALUE_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_nullable));

            sb.append(", ");

            sb.append("VALUE_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_null));

            sb.append(", ");

            sb.append("VALUE_double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_double));

            sb.append(", ");

            sb.append("VALUE_Double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double));

            sb.append(", ");

            sb.append("VALUE_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double_null));

            sb.append(", ");

            sb.append("VALUE_int");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_int));

            sb.append(", ");

            sb.append("VALUE_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer));

            sb.append(", ");

            sb.append("VALUE_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer_null));

            sb.append(", ");

            sb.append("VALUE_float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_float));

            sb.append(", ");

            sb.append("VALUE_Float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float));

            sb.append(", ");

            sb.append("VALUE_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float_null));

            sb.append(", ");

            sb.append("VALUE_long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_long));

            sb.append(", ");

            sb.append("VALUE_Long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long));

            sb.append(", ");

            sb.append("VALUE_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long_null));

            sb.append(", ");

            sb.append("VALUE_Object");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object));

            sb.append(", ");

            sb.append("VALUE_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_nullable));

            sb.append(", ");

            sb.append("VALUE_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_null));

            sb.append(", ");

            sb.append("VALUE_short");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_short));

            sb.append(", ");

            sb.append("VALUE_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_nullable));

            sb.append(", ");

            sb.append("VALUE_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_null));

            sb.append(", ");

            sb.append("VALUE_String");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String));

            sb.append(", ");

            sb.append("VALUE_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_nullable));

            sb.append(", ");

            sb.append("VALUE_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_null));

            sb.append(", ");

            sb.append("VALUE_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_nullable));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_null));

            sb.append(", ");

            sb.append("VALUE_List");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List));

            sb.append(", ");

            sb.append("VALUE_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_nullable));

            sb.append(", ");

            sb.append("VALUE_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_null));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row7Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    static class row2Struct implements
            routines.system.IPersistableRow<row2Struct> {
        final static byte[] commonByteArrayLock = new byte[0];
        static byte[] commonByteArray = new byte[0];

        boolean KEY_boolean;
        Boolean KEY_Boolean;
        Boolean KEY_Boolean_null;
        byte KEY_byte;
        Byte KEY_Byte;
        Byte KEY_Byte_null;
        byte[] KEY_byte_array;
        byte[] KEY_byte_array_nullable;
        byte[] KEY_byte_array_null;
        char KEY_char = ' ';
        Character KEY_Character = ' ';
        Character KEY_Character_null = ' ';
        java.util.Date KEY_Date;
        java.util.Date KEY_Date_nullable;
        java.util.Date KEY_Date_null;
        double KEY_double;
        Double KEY_Double;
        Double KEY_Double_null;
        int KEY_int;
        Integer KEY_Integer;
        Integer KEY_Integer_null;
        float KEY_float;
        Float KEY_Float;
        Float KEY_Float_null;
        long KEY_long;
        Long KEY_Long;
        Long KEY_Long_null;
        Object KEY_Object;
        Object KEY_Object_nullable;
        Object KEY_Object_null;
        short KEY_short;
        Short KEY_Short_nullable;
        Short KEY_Short_null;
        String KEY_String;
        String KEY_String_nullable;
        String KEY_String_null;
        BigDecimal KEY_BigDecimal;
        BigDecimal KEY_BigDecimal_nullable;
        BigDecimal KEY_BigDecimal_null;
        List KEY_List;
        List KEY_List_nullable;
        List KEY_List_null;
        boolean VALUE_boolean;
        Boolean VALUE_Boolean;
        Boolean VALUE_Boolean_null;
        byte VALUE_byte;
        Byte VALUE_Byte;
        Byte VALUE_Byte_null;
        byte[] VALUE_byte_array;
        byte[] VALUE_byte_array_nullable;
        byte[] VALUE_byte_array_null;
        char VALUE_char = ' ';
        Character VALUE_Character = ' ';
        Character VALUE_Character_null = ' ';
        java.util.Date VALUE_Date;
        java.util.Date VALUE_Date_nullable;
        java.util.Date VALUE_Date_null;
        double VALUE_double;
        Double VALUE_Double;
        Double VALUE_Double_null;
        int VALUE_int;
        Integer VALUE_Integer;
        Integer VALUE_Integer_null;
        float VALUE_float;
        Float VALUE_Float;
        Float VALUE_Float_null;
        long VALUE_long;
        Long VALUE_Long;
        Long VALUE_Long_null;
        Object VALUE_Object;
        Object VALUE_Object_nullable;
        Object VALUE_Object_null;
        short VALUE_short;
        Short VALUE_Short_nullable;
        Short VALUE_Short_null;
        String VALUE_String;
        String VALUE_String_nullable;
        String VALUE_String_null;
        BigDecimal VALUE_BigDecimal;
        BigDecimal VALUE_BigDecimal_nullable;
        BigDecimal VALUE_BigDecimal_null;
        List VALUE_List;
        List VALUE_List_nullable;
        List VALUE_List_null;

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock) {

                try {

                    int length = 0;

                    this.KEY_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean = null;
                    } else {
                        this.KEY_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Boolean_null = null;
                    } else {
                        this.KEY_Boolean_null = dis.readBoolean();
                    }

                    this.KEY_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte = null;
                    } else {
                        this.KEY_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Byte_null = null;
                    } else {
                        this.KEY_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.KEY_byte_array_null = byteArray;
                    }

                    this.KEY_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character = null;
                    } else {
                        this.KEY_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Character_null = null;
                    } else {
                        this.KEY_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date = null;
                    } else {
                        this.KEY_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_nullable = null;
                    } else {
                        this.KEY_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Date_null = null;
                    } else {
                        this.KEY_Date_null = new Date(dis.readLong());
                    }

                    this.KEY_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double = null;
                    } else {
                        this.KEY_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Double_null = null;
                    } else {
                        this.KEY_Double_null = dis.readDouble();
                    }

                    this.KEY_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer = null;
                    } else {
                        this.KEY_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Integer_null = null;
                    } else {
                        this.KEY_Integer_null = dis.readInt();
                    }

                    this.KEY_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float = null;
                    } else {
                        this.KEY_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Float_null = null;
                    } else {
                        this.KEY_Float_null = dis.readFloat();
                    }

                    this.KEY_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long = null;
                    } else {
                        this.KEY_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Long_null = null;
                    } else {
                        this.KEY_Long_null = dis.readLong();
                    }

                    this.KEY_Object = (Object) dis.readObject();

                    this.KEY_Object_nullable = (Object) dis.readObject();

                    this.KEY_Object_null = (Object) dis.readObject();

                    this.KEY_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_nullable = null;
                    } else {
                        this.KEY_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.KEY_Short_null = null;
                    } else {
                        this.KEY_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String = new String(commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_nullable = new String(commonByteArray,
                                0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.KEY_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.KEY_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.KEY_BigDecimal = (BigDecimal) dis.readObject();

                    this.KEY_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.KEY_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.KEY_List = (List) dis.readObject();

                    this.KEY_List_nullable = (List) dis.readObject();

                    this.KEY_List_null = (List) dis.readObject();

                    this.VALUE_boolean = dis.readBoolean();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean = null;
                    } else {
                        this.VALUE_Boolean = dis.readBoolean();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Boolean_null = null;
                    } else {
                        this.VALUE_Boolean_null = dis.readBoolean();
                    }

                    this.VALUE_byte = dis.readByte();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte = null;
                    } else {
                        this.VALUE_Byte = dis.readByte();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Byte_null = null;
                    } else {
                        this.VALUE_Byte_null = dis.readByte();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_nullable = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_nullable = byteArray;
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_byte_array_null = null;
                    } else {
                        byte[] byteArray = new byte[length];
                        dis.readFully(byteArray);
                        this.VALUE_byte_array_null = byteArray;
                    }

                    this.VALUE_char = dis.readChar();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character = null;
                    } else {
                        this.VALUE_Character = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Character_null = null;
                    } else {
                        this.VALUE_Character_null = dis.readChar();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date = null;
                    } else {
                        this.VALUE_Date = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_nullable = null;
                    } else {
                        this.VALUE_Date_nullable = new Date(dis.readLong());
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Date_null = null;
                    } else {
                        this.VALUE_Date_null = new Date(dis.readLong());
                    }

                    this.VALUE_double = dis.readDouble();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double = null;
                    } else {
                        this.VALUE_Double = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Double_null = null;
                    } else {
                        this.VALUE_Double_null = dis.readDouble();
                    }

                    this.VALUE_int = dis.readInt();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer = null;
                    } else {
                        this.VALUE_Integer = dis.readInt();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Integer_null = null;
                    } else {
                        this.VALUE_Integer_null = dis.readInt();
                    }

                    this.VALUE_float = dis.readFloat();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float = null;
                    } else {
                        this.VALUE_Float = dis.readFloat();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Float_null = null;
                    } else {
                        this.VALUE_Float_null = dis.readFloat();
                    }

                    this.VALUE_long = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long = null;
                    } else {
                        this.VALUE_Long = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Long_null = null;
                    } else {
                        this.VALUE_Long_null = dis.readLong();
                    }

                    this.VALUE_Object = (Object) dis.readObject();

                    this.VALUE_Object_nullable = (Object) dis.readObject();

                    this.VALUE_Object_null = (Object) dis.readObject();

                    this.VALUE_short = dis.readShort();

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_nullable = null;
                    } else {
                        this.VALUE_Short_nullable = dis.readShort();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.VALUE_Short_null = null;
                    } else {
                        this.VALUE_Short_null = dis.readShort();
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String = new String(commonByteArray, 0,
                                length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_nullable = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_nullable = new String(
                                commonByteArray, 0, length);
                    }

                    length = dis.readInt();
                    if (length == -1) {
                        this.VALUE_String_null = null;
                    } else {
                        if (length > commonByteArray.length) {
                            if (length < 1024 && commonByteArray.length == 0) {
                                commonByteArray = new byte[1024];
                            } else {
                                commonByteArray = new byte[2 * length];
                            }
                        }
                        dis.readFully(commonByteArray, 0, length);
                        this.VALUE_String_null = new String(commonByteArray, 0,
                                length);
                    }

                    this.VALUE_BigDecimal = (BigDecimal) dis.readObject();

                    this.VALUE_BigDecimal_nullable = (BigDecimal) dis
                            .readObject();

                    this.VALUE_BigDecimal_null = (BigDecimal) dis.readObject();

                    this.VALUE_List = (List) dis.readObject();

                    this.VALUE_List_nullable = (List) dis.readObject();

                    this.VALUE_List_null = (List) dis.readObject();

                } catch (IOException e) {
                    throw new RuntimeException(e);

                } catch (ClassNotFoundException eCNFE) {
                    throw new RuntimeException(eCNFE);

                }

            }

        }

        public void writeData(ObjectOutputStream dos) {
            try {

                // boolean

                dos.writeBoolean(this.KEY_boolean);

                // Boolean

                if (this.KEY_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean);
                }

                // Boolean

                if (this.KEY_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.KEY_Boolean_null);
                }

                // byte

                dos.writeByte(this.KEY_byte);

                // Byte

                if (this.KEY_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte);
                }

                // Byte

                if (this.KEY_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.KEY_Byte_null);
                }

                // byte[]

                if (this.KEY_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array.length);
                    dos.write(this.KEY_byte_array);
                }

                // byte[]

                if (this.KEY_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_nullable.length);
                    dos.write(this.KEY_byte_array_nullable);
                }

                // byte[]

                if (this.KEY_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.KEY_byte_array_null.length);
                    dos.write(this.KEY_byte_array_null);
                }

                // char

                dos.writeChar(this.KEY_char);

                // Character

                if (this.KEY_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character);
                }

                // Character

                if (this.KEY_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.KEY_Character_null);
                }

                // java.util.Date

                if (this.KEY_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.KEY_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.KEY_double);

                // Double

                if (this.KEY_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double);
                }

                // Double

                if (this.KEY_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.KEY_Double_null);
                }

                // int

                dos.writeInt(this.KEY_int);

                // Integer

                if (this.KEY_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer);
                }

                // Integer

                if (this.KEY_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.KEY_Integer_null);
                }

                // float

                dos.writeFloat(this.KEY_float);

                // Float

                if (this.KEY_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float);
                }

                // Float

                if (this.KEY_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.KEY_Float_null);
                }

                // long

                dos.writeLong(this.KEY_long);

                // Long

                if (this.KEY_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long);
                }

                // Long

                if (this.KEY_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.KEY_Long_null);
                }

                // Object

                dos.writeObject(this.KEY_Object);

                // Object

                dos.writeObject(this.KEY_Object_nullable);

                // Object

                dos.writeObject(this.KEY_Object_null);

                // short

                dos.writeShort(this.KEY_short);

                // Short

                if (this.KEY_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_nullable);
                }

                // Short

                if (this.KEY_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.KEY_Short_null);
                }

                // String

                if (this.KEY_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.KEY_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.KEY_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.KEY_BigDecimal_null);

                // List

                dos.writeObject(this.KEY_List);

                // List

                dos.writeObject(this.KEY_List_nullable);

                // List

                dos.writeObject(this.KEY_List_null);

                // boolean

                dos.writeBoolean(this.VALUE_boolean);

                // Boolean

                if (this.VALUE_Boolean == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean);
                }

                // Boolean

                if (this.VALUE_Boolean_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.VALUE_Boolean_null);
                }

                // byte

                dos.writeByte(this.VALUE_byte);

                // Byte

                if (this.VALUE_Byte == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte);
                }

                // Byte

                if (this.VALUE_Byte_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.VALUE_Byte_null);
                }

                // byte[]

                if (this.VALUE_byte_array == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array.length);
                    dos.write(this.VALUE_byte_array);
                }

                // byte[]

                if (this.VALUE_byte_array_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_nullable.length);
                    dos.write(this.VALUE_byte_array_nullable);
                }

                // byte[]

                if (this.VALUE_byte_array_null == null) {
                    dos.writeInt(-1);
                } else {
                    dos.writeInt(this.VALUE_byte_array_null.length);
                    dos.write(this.VALUE_byte_array_null);
                }

                // char

                dos.writeChar(this.VALUE_char);

                // Character

                if (this.VALUE_Character == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character);
                }

                // Character

                if (this.VALUE_Character_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeChar(this.VALUE_Character_null);
                }

                // java.util.Date

                if (this.VALUE_Date == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_nullable.getTime());
                }

                // java.util.Date

                if (this.VALUE_Date_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Date_null.getTime());
                }

                // double

                dos.writeDouble(this.VALUE_double);

                // Double

                if (this.VALUE_Double == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double);
                }

                // Double

                if (this.VALUE_Double_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.VALUE_Double_null);
                }

                // int

                dos.writeInt(this.VALUE_int);

                // Integer

                if (this.VALUE_Integer == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer);
                }

                // Integer

                if (this.VALUE_Integer_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeInt(this.VALUE_Integer_null);
                }

                // float

                dos.writeFloat(this.VALUE_float);

                // Float

                if (this.VALUE_Float == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float);
                }

                // Float

                if (this.VALUE_Float_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeFloat(this.VALUE_Float_null);
                }

                // long

                dos.writeLong(this.VALUE_long);

                // Long

                if (this.VALUE_Long == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long);
                }

                // Long

                if (this.VALUE_Long_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VALUE_Long_null);
                }

                // Object

                dos.writeObject(this.VALUE_Object);

                // Object

                dos.writeObject(this.VALUE_Object_nullable);

                // Object

                dos.writeObject(this.VALUE_Object_null);

                // short

                dos.writeShort(this.VALUE_short);

                // Short

                if (this.VALUE_Short_nullable == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_nullable);
                }

                // Short

                if (this.VALUE_Short_null == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeShort(this.VALUE_Short_null);
                }

                // String

                if (this.VALUE_String == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_nullable == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_nullable.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // String

                if (this.VALUE_String_null == null) {
                    dos.writeInt(-1);
                } else {
                    byte[] byteArray = this.VALUE_String_null.getBytes();
                    dos.writeInt(byteArray.length);
                    dos.write(byteArray);
                }

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_nullable);

                // BigDecimal

                dos.writeObject(this.VALUE_BigDecimal_null);

                // List

                dos.writeObject(this.VALUE_List);

                // List

                dos.writeObject(this.VALUE_List_nullable);

                // List

                dos.writeObject(this.VALUE_List_null);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }

        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");

            sb.append("KEY_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_boolean));

            sb.append(", ");

            sb.append("KEY_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean));

            sb.append(", ");

            sb.append("KEY_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Boolean_null));

            sb.append(", ");

            sb.append("KEY_byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte));

            sb.append(", ");

            sb.append("KEY_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte));

            sb.append(", ");

            sb.append("KEY_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Byte_null));

            sb.append(", ");

            sb.append("KEY_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array));

            sb.append(", ");

            sb.append("KEY_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_nullable));

            sb.append(", ");

            sb.append("KEY_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_byte_array_null));

            sb.append(", ");

            sb.append("KEY_char");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_char));

            sb.append(", ");

            sb.append("KEY_Character");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character));

            sb.append(", ");

            sb.append("KEY_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Character_null));

            sb.append(", ");

            sb.append("KEY_Date");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date));

            sb.append(", ");

            sb.append("KEY_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_nullable));

            sb.append(", ");

            sb.append("KEY_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Date_null));

            sb.append(", ");

            sb.append("KEY_double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_double));

            sb.append(", ");

            sb.append("KEY_Double");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double));

            sb.append(", ");

            sb.append("KEY_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Double_null));

            sb.append(", ");

            sb.append("KEY_int");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_int));

            sb.append(", ");

            sb.append("KEY_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer));

            sb.append(", ");

            sb.append("KEY_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Integer_null));

            sb.append(", ");

            sb.append("KEY_float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_float));

            sb.append(", ");

            sb.append("KEY_Float");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float));

            sb.append(", ");

            sb.append("KEY_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Float_null));

            sb.append(", ");

            sb.append("KEY_long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_long));

            sb.append(", ");

            sb.append("KEY_Long");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long));

            sb.append(", ");

            sb.append("KEY_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Long_null));

            sb.append(", ");

            sb.append("KEY_Object");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object));

            sb.append(", ");

            sb.append("KEY_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_nullable));

            sb.append(", ");

            sb.append("KEY_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Object_null));

            sb.append(", ");

            sb.append("KEY_short");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_short));

            sb.append(", ");

            sb.append("KEY_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_nullable));

            sb.append(", ");

            sb.append("KEY_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_Short_null));

            sb.append(", ");

            sb.append("KEY_String");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String));

            sb.append(", ");

            sb.append("KEY_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_nullable));

            sb.append(", ");

            sb.append("KEY_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_String_null));

            sb.append(", ");

            sb.append("KEY_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal));

            sb.append(", ");

            sb.append("KEY_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_nullable));

            sb.append(", ");

            sb.append("KEY_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_BigDecimal_null));

            sb.append(", ");

            sb.append("KEY_List");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List));

            sb.append(", ");

            sb.append("KEY_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_nullable));

            sb.append(", ");

            sb.append("KEY_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.KEY_List_null));

            sb.append(", ");

            sb.append("VALUE_boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean));

            sb.append(", ");

            sb.append("VALUE_Boolean_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Boolean_null));

            sb.append(", ");

            sb.append("VALUE_byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte));

            sb.append(", ");

            sb.append("VALUE_Byte");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte));

            sb.append(", ");

            sb.append("VALUE_Byte_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Byte_null));

            sb.append(", ");

            sb.append("VALUE_byte_array");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array));

            sb.append(", ");

            sb.append("VALUE_byte_array_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_nullable));

            sb.append(", ");

            sb.append("VALUE_byte_array_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_byte_array_null));

            sb.append(", ");

            sb.append("VALUE_char");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_char));

            sb.append(", ");

            sb.append("VALUE_Character");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character));

            sb.append(", ");

            sb.append("VALUE_Character_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Character_null));

            sb.append(", ");

            sb.append("VALUE_Date");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date));

            sb.append(", ");

            sb.append("VALUE_Date_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_nullable));

            sb.append(", ");

            sb.append("VALUE_Date_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Date_null));

            sb.append(", ");

            sb.append("VALUE_double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_double));

            sb.append(", ");

            sb.append("VALUE_Double");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double));

            sb.append(", ");

            sb.append("VALUE_Double_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Double_null));

            sb.append(", ");

            sb.append("VALUE_int");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_int));

            sb.append(", ");

            sb.append("VALUE_Integer");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer));

            sb.append(", ");

            sb.append("VALUE_Integer_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Integer_null));

            sb.append(", ");

            sb.append("VALUE_float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_float));

            sb.append(", ");

            sb.append("VALUE_Float");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float));

            sb.append(", ");

            sb.append("VALUE_Float_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Float_null));

            sb.append(", ");

            sb.append("VALUE_long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_long));

            sb.append(", ");

            sb.append("VALUE_Long");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long));

            sb.append(", ");

            sb.append("VALUE_Long_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Long_null));

            sb.append(", ");

            sb.append("VALUE_Object");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object));

            sb.append(", ");

            sb.append("VALUE_Object_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_nullable));

            sb.append(", ");

            sb.append("VALUE_Object_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Object_null));

            sb.append(", ");

            sb.append("VALUE_short");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_short));

            sb.append(", ");

            sb.append("VALUE_Short_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_nullable));

            sb.append(", ");

            sb.append("VALUE_Short_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_Short_null));

            sb.append(", ");

            sb.append("VALUE_String");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String));

            sb.append(", ");

            sb.append("VALUE_String_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_nullable));

            sb.append(", ");

            sb.append("VALUE_String_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_String_null));

            sb.append(", ");

            sb.append("VALUE_BigDecimal");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_nullable));

            sb.append(", ");

            sb.append("VALUE_BigDecimal_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_BigDecimal_null));

            sb.append(", ");

            sb.append("VALUE_List");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List));

            sb.append(", ");

            sb.append("VALUE_List_nullable");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_nullable));

            sb.append(", ");

            sb.append("VALUE_List_null");
            sb.append("=");
            sb.append(String.valueOf(this.VALUE_List_null));

            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row2Struct other) {

            int returnValue = -1;

            return returnValue;
        }

        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2
                        .toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }

    }

    public void tRowGenerator_2Process(
            final java.util.Map<String, Object> globalMap)
            throws TalendException {
        globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);
        try {

            row2Struct row2 = new row2Struct();
            row2Struct row7 = row2;
            row3Struct row3 = new row3Struct();
            row5Struct row5 = new row5Struct();

            /**
             * [tAggregateRowOpt_1_AGGOUT begin ] start
             */

            ok_Hash.put("tAggregateRowOpt_1_AGGOUT", false);
            start_Hash.put("tAggregateRowOpt_1_AGGOUT", System
                    .currentTimeMillis());
            currentComponent = "tAggregateRowOpt_1_AGGOUT";

            // ------------

            java.util.Map hashAggreg_tAggregate_1 = new java.util.HashMap();

            // ------------

            class UtilClass_tAggregate_1 { // G_OutBegin_AggR_144

                public double sd(Double[] data) {
                    final int n = data.length;
                    if (n < 2) {
                        return Double.NaN;
                    }
                    double d1 = 0d;
                    double d2 = 0d;

                    for (int i = 0; i < data.length; i++) {
                        d1 += (data[i] * data[i]);
                        d2 += data[i];
                    }

                    return Math.sqrt((n * d1 - d2 * d2) / n / n);
                }

                public void checkedIADD(byte a, byte b,
                        boolean checkTypeOverFlow, boolean checkUlp) {
                    byte r = (byte) (a + b);
                    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b),
                                "'short/Short'", "'int/Integer'"));
                    }
                }

                public void checkedIADD(short a, short b,
                        boolean checkTypeOverFlow, boolean checkUlp) {
                    short r = (short) (a + b);
                    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b),
                                "'int/Integer'", "'short/Short'"));
                    }
                }

                public void checkedIADD(int a, int b,
                        boolean checkTypeOverFlow, boolean checkUlp) {
                    int r = a + b;
                    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b), "'long/Long'",
                                "'int/Integer'"));
                    }
                }

                public void checkedIADD(long a, long b,
                        boolean checkTypeOverFlow, boolean checkUlp) {
                    long r = a + b;
                    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b), "'BigDecimal'",
                                "'long/Long'"));
                    }
                }

                public void checkedIADD(float a, float b,
                        boolean checkTypeOverFlow, boolean checkUlp) {

                    if (checkUlp) {
                        float minAddedValue = Math.ulp(a);
                        if (minAddedValue > b) {
                            throw new RuntimeException(
                                    buildPrecisionMessage(String.valueOf(a),
                                            String.valueOf(b),
                                            "'double' or 'BigDecimal'",
                                            "'float/Float'"));
                        }
                    }

                    if (checkTypeOverFlow
                            && ((double) a + (double) b > (double) Float.MAX_VALUE)
                            || ((double) a + (double) b < (double) Float.MIN_VALUE)) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b),
                                "'double' or 'BigDecimal'", "'float/Float'"));
                    }
                }

                public void checkedIADD(double a, double b,
                        boolean checkTypeOverFlow, boolean checkUlp) {

                    if (checkUlp) {
                        double minAddedValue = Math.ulp(a);
                        if (minAddedValue > b) {
                            throw new RuntimeException(buildPrecisionMessage(
                                    String.valueOf(a), String.valueOf(a),
                                    "'BigDecimal'", "'double/Double'"));
                        }
                    }

                    if (checkTypeOverFlow
                            && (a + b > (double) Double.MAX_VALUE)
                            || (a + b < Double.MIN_VALUE)) {
                        throw new RuntimeException(buildOverflowMessage(String
                                .valueOf(a), String.valueOf(b), "'BigDecimal'",
                                "'double/Double'"));
                    }
                }

                private String buildOverflowMessage(String a, String b,
                        String advicedTypes, String originalType) {
                    return "Type overflow when adding "
                            + b
                            + " to "
                            + a
                            + ", to resolve this problem, increase the precision by using "
                            + advicedTypes + " type in place of "
                            + originalType + ".";
                }

                private String buildPrecisionMessage(String a, String b,
                        String advicedTypes, String originalType) {
                    return "The double precision is unsufficient to add the value "
                            + b
                            + " to "
                            + a
                            + ", to resolve this problem, increase the precision by using "
                            + advicedTypes
                            + " type in place of "
                            + originalType + ".";
                }

            } // G_OutBegin_AggR_144

            UtilClass_tAggregate_1 utilClass_tAggregate_1 = new UtilClass_tAggregate_1();

            class AggOperationStruct_tAggregate_1 { // G_OutBegin_AggR_100

                private static final int DEFAULT_HASHCODE = 1;
                private static final int PRIME = 31;
                private int hashCode = DEFAULT_HASHCODE;
                public boolean hashCodeDirty = true;

                boolean KEY_boolean;
                Boolean KEY_Boolean;
                Boolean KEY_Boolean_null;
                byte KEY_byte;
                Byte KEY_Byte;
                Byte KEY_Byte_null;
                byte[] KEY_byte_array;
                byte[] KEY_byte_array_nullable;
                byte[] KEY_byte_array_null;
                char KEY_char;
                Character KEY_Character;
                Character KEY_Character_null;
                java.util.Date KEY_Date;
                java.util.Date KEY_Date_nullable;
                java.util.Date KEY_Date_null;
                double KEY_double;
                Double KEY_Double;
                Double KEY_Double_null;
                int KEY_int;
                Integer KEY_Integer;
                Integer KEY_Integer_null;
                float KEY_float;
                Float KEY_Float;
                Float KEY_Float_null;
                long KEY_long;
                Long KEY_Long;
                Long KEY_Long_null;
                Object KEY_Object;
                Object KEY_Object_nullable;
                Object KEY_Object_null;
                short KEY_short;
                Short KEY_Short_nullable;
                Short KEY_Short_null;
                String KEY_String;
                String KEY_String_nullable;
                String KEY_String_null;
                BigDecimal KEY_BigDecimal;
                BigDecimal KEY_BigDecimal_nullable;
                BigDecimal KEY_BigDecimal_null;
                List KEY_List;
                List KEY_List_nullable;
                List KEY_List_null;
                boolean VALUE_boolean_min;
                Boolean VALUE_Boolean_min;
                Boolean VALUE_Boolean_null_min;
                byte VALUE_byte_min;
                Byte VALUE_Byte_min;
                Byte VALUE_Byte_null_min;
                byte[] VALUE_byte_array_min;
                byte[] VALUE_byte_array_nullable_min;
                byte[] VALUE_byte_array_null_min;
                char VALUE_char_min = (char) ' ';
                Character VALUE_Character_min = (char) ' ';
                Character VALUE_Character_null_min = (char) ' ';
                java.util.Date VALUE_Date_min;
                java.util.Date VALUE_Date_nullable_min;
                java.util.Date VALUE_Date_null_min;
                double VALUE_double_min;
                Double VALUE_Double_min;
                Double VALUE_Double_null_min;
                int VALUE_int_min;
                Integer VALUE_Integer_min;
                Integer VALUE_Integer_null_min;
                float VALUE_float_min;
                Float VALUE_Float_min;
                Float VALUE_Float_null_min;
                long VALUE_long_min;
                Long VALUE_Long_min;
                Long VALUE_Long_null_min;
                Object VALUE_Object_min;
                Object VALUE_Object_nullable_min;
                Object VALUE_Object_null_min;
                short VALUE_short_min;
                Short VALUE_Short_nullable_min;
                Short VALUE_Short_null_min;
                String VALUE_String_min;
                String VALUE_String_nullable_min;
                String VALUE_String_null_min;
                BigDecimal VALUE_BigDecimal_min;
                BigDecimal VALUE_BigDecimal_nullable_min;
                BigDecimal VALUE_BigDecimal_null_min;
                List VALUE_List_min;
                List VALUE_List_nullable_min;
                List VALUE_List_null_min;

                @Override
                public int hashCode() {
                    if (this.hashCodeDirty) {
                        final int prime = PRIME;
                        int result = DEFAULT_HASHCODE;

                        result = prime * result
                                + (this.KEY_boolean ? 1231 : 1237);

                        result = prime
                                * result
                                + ((this.KEY_Boolean == null) ? 0
                                        : this.KEY_Boolean.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Boolean_null == null) ? 0
                                        : this.KEY_Boolean_null.hashCode());

                        result = prime * result + (int) this.KEY_byte;

                        result = prime
                                * result
                                + ((this.KEY_Byte == null) ? 0 : this.KEY_Byte
                                        .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Byte_null == null) ? 0
                                        : this.KEY_Byte_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_byte_array == null) ? 0
                                        : this.KEY_byte_array.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_byte_array_nullable == null) ? 0
                                        : this.KEY_byte_array_nullable
                                                .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_byte_array_null == null) ? 0
                                        : this.KEY_byte_array_null.hashCode());

                        result = prime * result + (int) this.KEY_char;

                        result = prime
                                * result
                                + ((this.KEY_Character == null) ? 0
                                        : this.KEY_Character.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Character_null == null) ? 0
                                        : this.KEY_Character_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Date == null) ? 0 : this.KEY_Date
                                        .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Date_nullable == null) ? 0
                                        : this.KEY_Date_nullable.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Date_null == null) ? 0
                                        : this.KEY_Date_null.hashCode());

                        result = prime * result + (int) this.KEY_double;

                        result = prime
                                * result
                                + ((this.KEY_Double == null) ? 0
                                        : this.KEY_Double.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Double_null == null) ? 0
                                        : this.KEY_Double_null.hashCode());

                        result = prime * result + (int) this.KEY_int;

                        result = prime
                                * result
                                + ((this.KEY_Integer == null) ? 0
                                        : this.KEY_Integer.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Integer_null == null) ? 0
                                        : this.KEY_Integer_null.hashCode());

                        result = prime * result + (int) this.KEY_float;

                        result = prime
                                * result
                                + ((this.KEY_Float == null) ? 0
                                        : this.KEY_Float.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Float_null == null) ? 0
                                        : this.KEY_Float_null.hashCode());

                        result = prime * result + (int) this.KEY_long;

                        result = prime
                                * result
                                + ((this.KEY_Long == null) ? 0 : this.KEY_Long
                                        .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Long_null == null) ? 0
                                        : this.KEY_Long_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Object == null) ? 0
                                        : this.KEY_Object.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Object_nullable == null) ? 0
                                        : this.KEY_Object_nullable.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Object_null == null) ? 0
                                        : this.KEY_Object_null.hashCode());

                        result = prime * result + (int) this.KEY_short;

                        result = prime
                                * result
                                + ((this.KEY_Short_nullable == null) ? 0
                                        : this.KEY_Short_nullable.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_Short_null == null) ? 0
                                        : this.KEY_Short_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_String == null) ? 0
                                        : this.KEY_String.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_String_nullable == null) ? 0
                                        : this.KEY_String_nullable.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_String_null == null) ? 0
                                        : this.KEY_String_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_BigDecimal == null) ? 0
                                        : this.KEY_BigDecimal.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_BigDecimal_nullable == null) ? 0
                                        : this.KEY_BigDecimal_nullable
                                                .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_BigDecimal_null == null) ? 0
                                        : this.KEY_BigDecimal_null.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_List == null) ? 0 : this.KEY_List
                                        .hashCode());

                        result = prime
                                * result
                                + ((this.KEY_List_nullable == null) ? 0
                                        : this.KEY_List_nullable.hashCode());

                        result = prime
                                * result
                                + ((this.KEY_List_null == null) ? 0
                                        : this.KEY_List_null.hashCode());

                        this.hashCode = result;
                        this.hashCodeDirty = false;
                    }
                    return this.hashCode;
                }

                @Override
                public boolean equals(Object obj) {
                    if (this == obj)
                        return true;
                    if (obj == null)
                        return false;
                    if (getClass() != obj.getClass())
                        return false;
                    final AggOperationStruct_tAggregate_1 other = (AggOperationStruct_tAggregate_1) obj;

                    if (this.KEY_boolean != other.KEY_boolean)
                        return false;

                    if (this.KEY_Boolean == null) {
                        if (other.KEY_Boolean != null)
                            return false;
                    } else if (!this.KEY_Boolean.equals(other.KEY_Boolean))
                        return false;

                    if (this.KEY_Boolean_null == null) {
                        if (other.KEY_Boolean_null != null)
                            return false;
                    } else if (!this.KEY_Boolean_null
                            .equals(other.KEY_Boolean_null))
                        return false;

                    if (this.KEY_byte != other.KEY_byte)
                        return false;

                    if (this.KEY_Byte == null) {
                        if (other.KEY_Byte != null)
                            return false;
                    } else if (!this.KEY_Byte.equals(other.KEY_Byte))
                        return false;

                    if (this.KEY_Byte_null == null) {
                        if (other.KEY_Byte_null != null)
                            return false;
                    } else if (!this.KEY_Byte_null.equals(other.KEY_Byte_null))
                        return false;

                    if (this.KEY_byte_array == null) {
                        if (other.KEY_byte_array != null)
                            return false;
                    } else {
                        if (this.KEY_byte_array != null
                                && other.KEY_byte_array != null
                                && other.KEY_byte_array.length != this.KEY_byte_array.length) {
                            return false;
                        }
                        for (int i = 0; i < this.KEY_byte_array.length; i++) {
                            if (this.KEY_byte_array[i] != other.KEY_byte_array[i]) {
                                return false;
                            }
                        }
                        return true;
                    }

                    if (this.KEY_byte_array_nullable == null) {
                        if (other.KEY_byte_array_nullable != null)
                            return false;
                    } else {
                        if (this.KEY_byte_array_nullable != null
                                && other.KEY_byte_array_nullable != null
                                && other.KEY_byte_array_nullable.length != this.KEY_byte_array_nullable.length) {
                            return false;
                        }
                        for (int i = 0; i < this.KEY_byte_array_nullable.length; i++) {
                            if (this.KEY_byte_array_nullable[i] != other.KEY_byte_array_nullable[i]) {
                                return false;
                            }
                        }
                        return true;
                    }

                    if (this.KEY_byte_array_null == null) {
                        if (other.KEY_byte_array_null != null)
                            return false;
                    } else {
                        if (this.KEY_byte_array_null != null
                                && other.KEY_byte_array_null != null
                                && other.KEY_byte_array_null.length != this.KEY_byte_array_null.length) {
                            return false;
                        }
                        for (int i = 0; i < this.KEY_byte_array_null.length; i++) {
                            if (this.KEY_byte_array_null[i] != other.KEY_byte_array_null[i]) {
                                return false;
                            }
                        }
                        return true;
                    }

                    if (this.KEY_char != other.KEY_char)
                        return false;

                    if (this.KEY_Character == null) {
                        if (other.KEY_Character != null)
                            return false;
                    } else if (!this.KEY_Character.equals(other.KEY_Character))
                        return false;

                    if (this.KEY_Character_null == null) {
                        if (other.KEY_Character_null != null)
                            return false;
                    } else if (!this.KEY_Character_null
                            .equals(other.KEY_Character_null))
                        return false;

                    if (this.KEY_Date == null) {
                        if (other.KEY_Date != null)
                            return false;
                    } else if (!this.KEY_Date.equals(other.KEY_Date))
                        return false;

                    if (this.KEY_Date_nullable == null) {
                        if (other.KEY_Date_nullable != null)
                            return false;
                    } else if (!this.KEY_Date_nullable
                            .equals(other.KEY_Date_nullable))
                        return false;

                    if (this.KEY_Date_null == null) {
                        if (other.KEY_Date_null != null)
                            return false;
                    } else if (!this.KEY_Date_null.equals(other.KEY_Date_null))
                        return false;

                    if (this.KEY_double != other.KEY_double)
                        return false;

                    if (this.KEY_Double == null) {
                        if (other.KEY_Double != null)
                            return false;
                    } else if (!this.KEY_Double.equals(other.KEY_Double))
                        return false;

                    if (this.KEY_Double_null == null) {
                        if (other.KEY_Double_null != null)
                            return false;
                    } else if (!this.KEY_Double_null
                            .equals(other.KEY_Double_null))
                        return false;

                    if (this.KEY_int != other.KEY_int)
                        return false;

                    if (this.KEY_Integer == null) {
                        if (other.KEY_Integer != null)
                            return false;
                    } else if (!this.KEY_Integer.equals(other.KEY_Integer))
                        return false;

                    if (this.KEY_Integer_null == null) {
                        if (other.KEY_Integer_null != null)
                            return false;
                    } else if (!this.KEY_Integer_null
                            .equals(other.KEY_Integer_null))
                        return false;

                    if (this.KEY_float != other.KEY_float)
                        return false;

                    if (this.KEY_Float == null) {
                        if (other.KEY_Float != null)
                            return false;
                    } else if (!this.KEY_Float.equals(other.KEY_Float))
                        return false;

                    if (this.KEY_Float_null == null) {
                        if (other.KEY_Float_null != null)
                            return false;
                    } else if (!this.KEY_Float_null
                            .equals(other.KEY_Float_null))
                        return false;

                    if (this.KEY_long != other.KEY_long)
                        return false;

                    if (this.KEY_Long == null) {
                        if (other.KEY_Long != null)
                            return false;
                    } else if (!this.KEY_Long.equals(other.KEY_Long))
                        return false;

                    if (this.KEY_Long_null == null) {
                        if (other.KEY_Long_null != null)
                            return false;
                    } else if (!this.KEY_Long_null.equals(other.KEY_Long_null))
                        return false;

                    if (this.KEY_Object == null) {
                        if (other.KEY_Object != null)
                            return false;
                    } else if (!this.KEY_Object.equals(other.KEY_Object))
                        return false;

                    if (this.KEY_Object_nullable == null) {
                        if (other.KEY_Object_nullable != null)
                            return false;
                    } else if (!this.KEY_Object_nullable
                            .equals(other.KEY_Object_nullable))
                        return false;

                    if (this.KEY_Object_null == null) {
                        if (other.KEY_Object_null != null)
                            return false;
                    } else if (!this.KEY_Object_null
                            .equals(other.KEY_Object_null))
                        return false;

                    if (this.KEY_short != other.KEY_short)
                        return false;

                    if (this.KEY_Short_nullable == null) {
                        if (other.KEY_Short_nullable != null)
                            return false;
                    } else if (!this.KEY_Short_nullable
                            .equals(other.KEY_Short_nullable))
                        return false;

                    if (this.KEY_Short_null == null) {
                        if (other.KEY_Short_null != null)
                            return false;
                    } else if (!this.KEY_Short_null
                            .equals(other.KEY_Short_null))
                        return false;

                    if (this.KEY_String == null) {
                        if (other.KEY_String != null)
                            return false;
                    } else if (!this.KEY_String.equals(other.KEY_String))
                        return false;

                    if (this.KEY_String_nullable == null) {
                        if (other.KEY_String_nullable != null)
                            return false;
                    } else if (!this.KEY_String_nullable
                            .equals(other.KEY_String_nullable))
                        return false;

                    if (this.KEY_String_null == null) {
                        if (other.KEY_String_null != null)
                            return false;
                    } else if (!this.KEY_String_null
                            .equals(other.KEY_String_null))
                        return false;

                    if (this.KEY_BigDecimal == null) {
                        if (other.KEY_BigDecimal != null)
                            return false;
                    } else if (!this.KEY_BigDecimal
                            .equals(other.KEY_BigDecimal))
                        return false;

                    if (this.KEY_BigDecimal_nullable == null) {
                        if (other.KEY_BigDecimal_nullable != null)
                            return false;
                    } else if (!this.KEY_BigDecimal_nullable
                            .equals(other.KEY_BigDecimal_nullable))
                        return false;

                    if (this.KEY_BigDecimal_null == null) {
                        if (other.KEY_BigDecimal_null != null)
                            return false;
                    } else if (!this.KEY_BigDecimal_null
                            .equals(other.KEY_BigDecimal_null))
                        return false;

                    if (this.KEY_List == null) {
                        if (other.KEY_List != null)
                            return false;
                    } else if (!this.KEY_List.equals(other.KEY_List))
                        return false;

                    if (this.KEY_List_nullable == null) {
                        if (other.KEY_List_nullable != null)
                            return false;
                    } else if (!this.KEY_List_nullable
                            .equals(other.KEY_List_nullable))
                        return false;

                    if (this.KEY_List_null == null) {
                        if (other.KEY_List_null != null)
                            return false;
                    } else if (!this.KEY_List_null.equals(other.KEY_List_null))
                        return false;

                    return true;
                }

            } // G_OutBegin_AggR_100

            AggOperationStruct_tAggregate_1 operation_result_tAggregate_1 = null;
            AggOperationStruct_tAggregate_1 operation_finder_tAggregate_1 = new AggOperationStruct_tAggregate_1();
            java.util.Map<AggOperationStruct_tAggregate_1, AggOperationStruct_tAggregate_1> hash_tAggregate_1 = new java.util.HashMap<AggOperationStruct_tAggregate_1, AggOperationStruct_tAggregate_1>();

            int nb_line_tAggregate_1 = 0;
            boolean isFirstIteration = true;

            /**
             * [tAggregateRowOpt_1_AGGOUT begin ] stop
             */

            /**
             * [tJavaFlex_1 begin ] start
             */

            ok_Hash.put("tJavaFlex_1", false);
            start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
            currentComponent = "tJavaFlex_1";

            // start part of your Java code
            final int[] iterCount = new int[1];

            /**
             * [tJavaFlex_1 begin ] stop
             */

            /**
             * [tRowGenerator_2 begin ] start
             */

            ok_Hash.put("tRowGenerator_2", false);
            start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
            currentComponent = "tRowGenerator_2";

            int nb_line_tRowGenerator_2 = 0;
            int nb_max_row_tRowGenerator_2 = 3;

            class tRowGenerator_2Randomizer {
                public boolean getRandomKEY_boolean() {

                    return true;

                }

                public Boolean getRandomKEY_Boolean() {

                    return new Boolean(false);

                }

                public Boolean getRandomKEY_Boolean_null() {

                    return null;

                }

                public byte getRandomKEY_byte() {

                    return Byte.MAX_VALUE;

                }

                public Byte getRandomKEY_Byte() {

                    return new Byte(Byte.MIN_VALUE);

                }

                public Byte getRandomKEY_Byte_null() {

                    return null;

                }

                public byte[] getRandomKEY_byte_array() {

                    byte[][] KEY_byte_arrayTable = new byte[][] { new byte[] {
                            10, 20, 30 } };
                    java.util.Random randomtRowGenerator_2 = new java.util.Random();
                    return KEY_byte_arrayTable[randomtRowGenerator_2
                            .nextInt(KEY_byte_arrayTable.length)];

                }

                public byte[] getRandomKEY_byte_array_nullable() {

                    byte[][] KEY_byte_array_nullableTable = new byte[][] { new byte[] {
                            40, 50, 60 } };
                    java.util.Random randomtRowGenerator_2 = new java.util.Random();
                    return KEY_byte_array_nullableTable[randomtRowGenerator_2
                            .nextInt(KEY_byte_array_nullableTable.length)];

                }

                public byte[] getRandomKEY_byte_array_null() {

                    return null;

                }

                public char getRandomKEY_char() {

                    return 'A';

                }

                public Character getRandomKEY_Character() {

                    return new Character('B');

                }

                public Character getRandomKEY_Character_null() {

                    return null;

                }

                public java.util.Date getRandomKEY_Date() {

                    return TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
                            "2000-01-01 23:30:20");

                }

                public java.util.Date getRandomKEY_Date_nullable() {

                    return TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
                            "2002-02-02 20:21:22");

                }

                public java.util.Date getRandomKEY_Date_null() {

                    return null;

                }

                public double getRandomKEY_double() {

                    return Double.MAX_VALUE;

                }

                public Double getRandomKEY_Double() {

                    return Double.MIN_VALUE;

                }

                public Double getRandomKEY_Double_null() {

                    return null;

                }

                public int getRandomKEY_int() {

                    return Integer.MAX_VALUE;

                }

                public Integer getRandomKEY_Integer() {

                    return Integer.MIN_VALUE;

                }

                public Integer getRandomKEY_Integer_null() {

                    return null;

                }

                public float getRandomKEY_float() {

                    return Float.MAX_VALUE;

                }

                public Float getRandomKEY_Float() {

                    return Float.MIN_VALUE;

                }

                public Float getRandomKEY_Float_null() {

                    return null;

                }

                public long getRandomKEY_long() {

                    return Long.MAX_VALUE;

                }

                public Long getRandomKEY_Long() {

                    return Long.MIN_VALUE;

                }

                public Long getRandomKEY_Long_null() {

                    return null;

                }

                public Object getRandomKEY_Object() {

                    return new Object() {
                        public String toString() {
                            return "myObject";
                        }

                        public int hashcode() {
                            return 1;
                        }

                        public boolean equals(Object other) {
                            return true;
                        }
                    };

                }

                public Object getRandomKEY_Object_nullable() {

                    return new Object() {
                        public String toString() {
                            return "myObject_nullable";
                        }

                        public int hashcode() {
                            return 1;
                        }

                        public boolean equals(Object other) {
                            return true;
                        }
                    };

                }

                public Object getRandomKEY_Object_null() {

                    return null;

                }

                public short getRandomKEY_short() {

                    return Short.MAX_VALUE;

                }

                public Short getRandomKEY_Short_nullable() {

                    return Short.MIN_VALUE;

                }

                public Short getRandomKEY_Short_null() {

                    return null;

                }

                public String getRandomKEY_String() {

                    return "myString";

                }

                public String getRandomKEY_String_nullable() {

                    return "myString_nullable";

                }

                public String getRandomKEY_String_null() {

                    return null;

                }

                public BigDecimal getRandomKEY_BigDecimal() {

                    return new BigDecimal("1234567890.1234567890");

                }

                public BigDecimal getRandomKEY_BigDecimal_nullable() {

                    return new BigDecimal("0.1");

                }

                public BigDecimal getRandomKEY_BigDecimal_null() {

                    return null;

                }

                public List getRandomKEY_List() {

                    return java.util.Arrays.asList("A", "B", "C");

                }

                public List getRandomKEY_List_nullable() {

                    return java.util.Arrays.asList("D", "E", "F");

                }

                public List getRandomKEY_List_null() {

                    return null;

                }

                public boolean getRandomVALUE_boolean() {

                    return true;

                }

                public Boolean getRandomVALUE_Boolean() {

                    return new Boolean(false);

                }

                public Boolean getRandomVALUE_Boolean_null() {

                    return null;

                }

                public byte getRandomVALUE_byte() {

                    return (byte) (iterCount[0] < 3 ? 20 : 127);

                }

                public Byte getRandomVALUE_Byte() {

                    return (byte) iterCount[0] < 3 ? 21 : 123;

                }

                public Byte getRandomVALUE_Byte_null() {

                    return null;

                }

                public byte[] getRandomVALUE_byte_array() {

                    byte[][] VALUE_byte_arrayTable = new byte[][] { new byte[] {
                            10, 20, 30 } };
                    java.util.Random randomtRowGenerator_2 = new java.util.Random();
                    return VALUE_byte_arrayTable[randomtRowGenerator_2
                            .nextInt(VALUE_byte_arrayTable.length)];

                }

                public byte[] getRandomVALUE_byte_array_nullable() {

                    byte[][] VALUE_byte_array_nullableTable = new byte[][] { new byte[] {
                            40, 50, 60 } };
                    java.util.Random randomtRowGenerator_2 = new java.util.Random();
                    return VALUE_byte_array_nullableTable[randomtRowGenerator_2
                            .nextInt(VALUE_byte_array_nullableTable.length)];

                }

                public byte[] getRandomVALUE_byte_array_null() {

                    return null;

                }

                public char getRandomVALUE_char() {

                    return iterCount[0] < 3 ? 'A' : 'B';

                }

                public Character getRandomVALUE_Character() {

                    return iterCount[0] < 3 ? new Character('B')
                            : new Character('C');

                }

                public Character getRandomVALUE_Character_null() {

                    return null;

                }

                public java.util.Date getRandomVALUE_Date() {

                    return TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
                            "2000-01-01 23:30:20");

                }

                public java.util.Date getRandomVALUE_Date_nullable() {

                    return TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
                            "2002-02-02 20:21:22");

                }

                public java.util.Date getRandomVALUE_Date_null() {

                    return null;

                }

                public double getRandomVALUE_double() {

                    return iterCount[0] < 3 ? 1 : 200;

                }

                public Double getRandomVALUE_Double() {

                    return iterCount[0] < 3 ? 2d : 200d;

                }

                public Double getRandomVALUE_Double_null() {

                    return null;

                }

                public int getRandomVALUE_int() {

                    return iterCount[0] < 3 ? 3 : 300;

                }

                public Integer getRandomVALUE_Integer() {

                    return iterCount[0] < 3 ? 4 : 400;

                }

                public Integer getRandomVALUE_Integer_null() {

                    return null;

                }

                public float getRandomVALUE_float() {

                    return iterCount[0] < 3 ? 5 : 500;

                }

                public Float getRandomVALUE_Float() {

                    return iterCount[0] < 3 ? 6f : 600f;

                }

                public Float getRandomVALUE_Float_null() {

                    return null;

                }

                public long getRandomVALUE_long() {

                    return iterCount[0] < 3 ? 7 : 700;

                }

                public Long getRandomVALUE_Long() {

                    return iterCount[0] < 3 ? 8l : 800l;

                }

                public Long getRandomVALUE_Long_null() {

                    return null;

                }

                public Object getRandomVALUE_Object() {

                    return new Comparable() {
                        public String toString() {
                            return "myObject";
                        }

                        public int compareTo(Comparable o) {
                            return toString().compareTo(o.toString());
                        }
                    };

                }

                public Object getRandomVALUE_Object_nullable() {

                    return new Comparable() {
                        public String toString() {
                            return "myObject";
                        }

                        public int compareTo(Comparable o) {
                            return toString().compareTo(o.toString());
                        }
                    };

                }

                public Object getRandomVALUE_Object_null() {

                    return null;

                }

                public short getRandomVALUE_short() {

                    return iterCount[0] < 3 ? 9 : 900;

                }

                public Short getRandomVALUE_Short_nullable() {

                    return iterCount[0] < 3 ? 10 : 1000;

                }

                public Short getRandomVALUE_Short_null() {

                    return null;

                }

                public String getRandomVALUE_String() {

                    return iterCount[0] < 3 ? "myString" : "myStringXXX";

                }

                public String getRandomVALUE_String_nullable() {

                    return iterCount[0] < 3 ? "myString_nullable"
                            : "myString_nullableXXX";

                }

                public String getRandomVALUE_String_null() {

                    return null;

                }

                public BigDecimal getRandomVALUE_BigDecimal() {

                    return iterCount[0] < 3 ? new BigDecimal("1234.1234")
                            : new BigDecimal("4321.4321");

                }

                public BigDecimal getRandomVALUE_BigDecimal_nullable() {

                    return iterCount[0] < 3 ? new BigDecimal("0.1")
                            : new BigDecimal("0.3");

                }

                public BigDecimal getRandomVALUE_BigDecimal_null() {

                    return null;

                }

                public List getRandomVALUE_List() {

                    return java.util.Arrays.asList("A", "B", "C");

                }

                public List getRandomVALUE_List_nullable() {

                    return java.util.Arrays.asList("D", "E", "F");

                }

                public List getRandomVALUE_List_null() {

                    return null;

                }
            }
            tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

            for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
                row2.KEY_boolean = randtRowGenerator_2.getRandomKEY_boolean();
                row2.KEY_Boolean = randtRowGenerator_2.getRandomKEY_Boolean();
                row2.KEY_Boolean_null = randtRowGenerator_2
                        .getRandomKEY_Boolean_null();
                row2.KEY_byte = randtRowGenerator_2.getRandomKEY_byte();
                row2.KEY_Byte = randtRowGenerator_2.getRandomKEY_Byte();
                row2.KEY_Byte_null = randtRowGenerator_2
                        .getRandomKEY_Byte_null();
                row2.KEY_byte_array = randtRowGenerator_2
                        .getRandomKEY_byte_array();
                row2.KEY_byte_array_nullable = randtRowGenerator_2
                        .getRandomKEY_byte_array_nullable();
                row2.KEY_byte_array_null = randtRowGenerator_2
                        .getRandomKEY_byte_array_null();
                row2.KEY_char = randtRowGenerator_2.getRandomKEY_char();
                row2.KEY_Character = randtRowGenerator_2
                        .getRandomKEY_Character();
                row2.KEY_Character_null = randtRowGenerator_2
                        .getRandomKEY_Character_null();
                row2.KEY_Date = randtRowGenerator_2.getRandomKEY_Date();
                row2.KEY_Date_nullable = randtRowGenerator_2
                        .getRandomKEY_Date_nullable();
                row2.KEY_Date_null = randtRowGenerator_2
                        .getRandomKEY_Date_null();
                row2.KEY_double = randtRowGenerator_2.getRandomKEY_double();
                row2.KEY_Double = randtRowGenerator_2.getRandomKEY_Double();
                row2.KEY_Double_null = randtRowGenerator_2
                        .getRandomKEY_Double_null();
                row2.KEY_int = randtRowGenerator_2.getRandomKEY_int();
                row2.KEY_Integer = randtRowGenerator_2.getRandomKEY_Integer();
                row2.KEY_Integer_null = randtRowGenerator_2
                        .getRandomKEY_Integer_null();
                row2.KEY_float = randtRowGenerator_2.getRandomKEY_float();
                row2.KEY_Float = randtRowGenerator_2.getRandomKEY_Float();
                row2.KEY_Float_null = randtRowGenerator_2
                        .getRandomKEY_Float_null();
                row2.KEY_long = randtRowGenerator_2.getRandomKEY_long();
                row2.KEY_Long = randtRowGenerator_2.getRandomKEY_Long();
                row2.KEY_Long_null = randtRowGenerator_2
                        .getRandomKEY_Long_null();
                row2.KEY_Object = randtRowGenerator_2.getRandomKEY_Object();
                row2.KEY_Object_nullable = randtRowGenerator_2
                        .getRandomKEY_Object_nullable();
                row2.KEY_Object_null = randtRowGenerator_2
                        .getRandomKEY_Object_null();
                row2.KEY_short = randtRowGenerator_2.getRandomKEY_short();
                row2.KEY_Short_nullable = randtRowGenerator_2
                        .getRandomKEY_Short_nullable();
                row2.KEY_Short_null = randtRowGenerator_2
                        .getRandomKEY_Short_null();
                row2.KEY_String = randtRowGenerator_2.getRandomKEY_String();
                row2.KEY_String_nullable = randtRowGenerator_2
                        .getRandomKEY_String_nullable();
                row2.KEY_String_null = randtRowGenerator_2
                        .getRandomKEY_String_null();
                row2.KEY_BigDecimal = randtRowGenerator_2
                        .getRandomKEY_BigDecimal();
                row2.KEY_BigDecimal_nullable = randtRowGenerator_2
                        .getRandomKEY_BigDecimal_nullable();
                row2.KEY_BigDecimal_null = randtRowGenerator_2
                        .getRandomKEY_BigDecimal_null();
                row2.KEY_List = randtRowGenerator_2.getRandomKEY_List();
                row2.KEY_List_nullable = randtRowGenerator_2
                        .getRandomKEY_List_nullable();
                row2.KEY_List_null = randtRowGenerator_2
                        .getRandomKEY_List_null();
                row2.VALUE_boolean = randtRowGenerator_2
                        .getRandomVALUE_boolean();
                row2.VALUE_Boolean = randtRowGenerator_2
                        .getRandomVALUE_Boolean();
                row2.VALUE_Boolean_null = randtRowGenerator_2
                        .getRandomVALUE_Boolean_null();
                row2.VALUE_byte = randtRowGenerator_2.getRandomVALUE_byte();
                row2.VALUE_Byte = randtRowGenerator_2.getRandomVALUE_Byte();
                row2.VALUE_Byte_null = randtRowGenerator_2
                        .getRandomVALUE_Byte_null();
                row2.VALUE_byte_array = randtRowGenerator_2
                        .getRandomVALUE_byte_array();
                row2.VALUE_byte_array_nullable = randtRowGenerator_2
                        .getRandomVALUE_byte_array_nullable();
                row2.VALUE_byte_array_null = randtRowGenerator_2
                        .getRandomVALUE_byte_array_null();
                row2.VALUE_char = randtRowGenerator_2.getRandomVALUE_char();
                row2.VALUE_Character = randtRowGenerator_2
                        .getRandomVALUE_Character();
                row2.VALUE_Character_null = randtRowGenerator_2
                        .getRandomVALUE_Character_null();
                row2.VALUE_Date = randtRowGenerator_2.getRandomVALUE_Date();
                row2.VALUE_Date_nullable = randtRowGenerator_2
                        .getRandomVALUE_Date_nullable();
                row2.VALUE_Date_null = randtRowGenerator_2
                        .getRandomVALUE_Date_null();
                row2.VALUE_double = randtRowGenerator_2.getRandomVALUE_double();
                row2.VALUE_Double = randtRowGenerator_2.getRandomVALUE_Double();
                row2.VALUE_Double_null = randtRowGenerator_2
                        .getRandomVALUE_Double_null();
                row2.VALUE_int = randtRowGenerator_2.getRandomVALUE_int();
                row2.VALUE_Integer = randtRowGenerator_2
                        .getRandomVALUE_Integer();
                row2.VALUE_Integer_null = randtRowGenerator_2
                        .getRandomVALUE_Integer_null();
                row2.VALUE_float = randtRowGenerator_2.getRandomVALUE_float();
                row2.VALUE_Float = randtRowGenerator_2.getRandomVALUE_Float();
                row2.VALUE_Float_null = randtRowGenerator_2
                        .getRandomVALUE_Float_null();
                row2.VALUE_long = randtRowGenerator_2.getRandomVALUE_long();
                row2.VALUE_Long = randtRowGenerator_2.getRandomVALUE_Long();
                row2.VALUE_Long_null = randtRowGenerator_2
                        .getRandomVALUE_Long_null();
                row2.VALUE_Object = randtRowGenerator_2.getRandomVALUE_Object();
                row2.VALUE_Object_nullable = randtRowGenerator_2
                        .getRandomVALUE_Object_nullable();
                row2.VALUE_Object_null = randtRowGenerator_2
                        .getRandomVALUE_Object_null();
                row2.VALUE_short = randtRowGenerator_2.getRandomVALUE_short();
                row2.VALUE_Short_nullable = randtRowGenerator_2
                        .getRandomVALUE_Short_nullable();
                row2.VALUE_Short_null = randtRowGenerator_2
                        .getRandomVALUE_Short_null();
                row2.VALUE_String = randtRowGenerator_2.getRandomVALUE_String();
                row2.VALUE_String_nullable = randtRowGenerator_2
                        .getRandomVALUE_String_nullable();
                row2.VALUE_String_null = randtRowGenerator_2
                        .getRandomVALUE_String_null();
                row2.VALUE_BigDecimal = randtRowGenerator_2
                        .getRandomVALUE_BigDecimal();
                row2.VALUE_BigDecimal_nullable = randtRowGenerator_2
                        .getRandomVALUE_BigDecimal_nullable();
                row2.VALUE_BigDecimal_null = randtRowGenerator_2
                        .getRandomVALUE_BigDecimal_null();
                row2.VALUE_List = randtRowGenerator_2.getRandomVALUE_List();
                row2.VALUE_List_nullable = randtRowGenerator_2
                        .getRandomVALUE_List_nullable();
                row2.VALUE_List_null = randtRowGenerator_2
                        .getRandomVALUE_List_null();
                nb_line_tRowGenerator_2++;

                /**
                 * [tRowGenerator_2 begin ] stop
                 */
                /**
                 * [tRowGenerator_2 main ] start
                 */

                currentComponent = "tRowGenerator_2";

                /**
                 * [tRowGenerator_2 main ] stop
                 */

                /**
                 * [tJavaFlex_1 main ] start
                 */

                currentComponent = "tJavaFlex_1";

                // here is the main part of the component,
                // a piece of code executed in the row
                // loop
                iterCount[0]++;

                row7.KEY_boolean = row2.KEY_boolean;
                row7.KEY_Boolean = row2.KEY_Boolean;
                row7.KEY_Boolean_null = row2.KEY_Boolean_null;
                row7.KEY_byte = row2.KEY_byte;
                row7.KEY_Byte = row2.KEY_Byte;
                row7.KEY_Byte_null = row2.KEY_Byte_null;
                row7.KEY_byte_array = row2.KEY_byte_array;
                row7.KEY_byte_array_nullable = row2.KEY_byte_array_nullable;
                row7.KEY_byte_array_null = row2.KEY_byte_array_null;
                row7.KEY_char = row2.KEY_char;
                row7.KEY_Character = row2.KEY_Character;
                row7.KEY_Character_null = row2.KEY_Character_null;
                row7.KEY_Date = row2.KEY_Date;
                row7.KEY_Date_nullable = row2.KEY_Date_nullable;
                row7.KEY_Date_null = row2.KEY_Date_null;
                row7.KEY_double = row2.KEY_double;
                row7.KEY_Double = row2.KEY_Double;
                row7.KEY_Double_null = row2.KEY_Double_null;
                row7.KEY_int = row2.KEY_int;
                row7.KEY_Integer = row2.KEY_Integer;
                row7.KEY_Integer_null = row2.KEY_Integer_null;
                row7.KEY_float = row2.KEY_float;
                row7.KEY_Float = row2.KEY_Float;
                row7.KEY_Float_null = row2.KEY_Float_null;
                row7.KEY_long = row2.KEY_long;
                row7.KEY_Long = row2.KEY_Long;
                row7.KEY_Long_null = row2.KEY_Long_null;
                row7.KEY_Object = row2.KEY_Object;
                row7.KEY_Object_nullable = row2.KEY_Object_nullable;
                row7.KEY_Object_null = row2.KEY_Object_null;
                row7.KEY_short = row2.KEY_short;
                row7.KEY_Short_nullable = row2.KEY_Short_nullable;
                row7.KEY_Short_null = row2.KEY_Short_null;
                row7.KEY_String = row2.KEY_String;
                row7.KEY_String_nullable = row2.KEY_String_nullable;
                row7.KEY_String_null = row2.KEY_String_null;
                row7.KEY_BigDecimal = row2.KEY_BigDecimal;
                row7.KEY_BigDecimal_nullable = row2.KEY_BigDecimal_nullable;
                row7.KEY_BigDecimal_null = row2.KEY_BigDecimal_null;
                row7.KEY_List = row2.KEY_List;
                row7.KEY_List_nullable = row2.KEY_List_nullable;
                row7.KEY_List_null = row2.KEY_List_null;
                row7.VALUE_boolean = row2.VALUE_boolean;
                row7.VALUE_Boolean = row2.VALUE_Boolean;
                row7.VALUE_Boolean_null = row2.VALUE_Boolean_null;
                row7.VALUE_byte = row2.VALUE_byte;
                row7.VALUE_Byte = row2.VALUE_Byte;
                row7.VALUE_Byte_null = row2.VALUE_Byte_null;
                row7.VALUE_byte_array = row2.VALUE_byte_array;
                row7.VALUE_byte_array_nullable = row2.VALUE_byte_array_nullable;
                row7.VALUE_byte_array_null = row2.VALUE_byte_array_null;
                row7.VALUE_char = row2.VALUE_char;
                row7.VALUE_Character = row2.VALUE_Character;
                row7.VALUE_Character_null = row2.VALUE_Character_null;
                row7.VALUE_Date = row2.VALUE_Date;
                row7.VALUE_Date_nullable = row2.VALUE_Date_nullable;
                row7.VALUE_Date_null = row2.VALUE_Date_null;
                row7.VALUE_double = row2.VALUE_double;
                row7.VALUE_Double = row2.VALUE_Double;
                row7.VALUE_Double_null = row2.VALUE_Double_null;
                row7.VALUE_int = row2.VALUE_int;
                row7.VALUE_Integer = row2.VALUE_Integer;
                row7.VALUE_Integer_null = row2.VALUE_Integer_null;
                row7.VALUE_float = row2.VALUE_float;
                row7.VALUE_Float = row2.VALUE_Float;
                row7.VALUE_Float_null = row2.VALUE_Float_null;
                row7.VALUE_long = row2.VALUE_long;
                row7.VALUE_Long = row2.VALUE_Long;
                row7.VALUE_Long_null = row2.VALUE_Long_null;
                row7.VALUE_Object = row2.VALUE_Object;
                row7.VALUE_Object_nullable = row2.VALUE_Object_nullable;
                row7.VALUE_Object_null = row2.VALUE_Object_null;
                row7.VALUE_short = row2.VALUE_short;
                row7.VALUE_Short_nullable = row2.VALUE_Short_nullable;
                row7.VALUE_Short_null = row2.VALUE_Short_null;
                row7.VALUE_String = row2.VALUE_String;
                row7.VALUE_String_nullable = row2.VALUE_String_nullable;
                row7.VALUE_String_null = row2.VALUE_String_null;
                row7.VALUE_BigDecimal = row2.VALUE_BigDecimal;
                row7.VALUE_BigDecimal_nullable = row2.VALUE_BigDecimal_nullable;
                row7.VALUE_BigDecimal_null = row2.VALUE_BigDecimal_null;
                row7.VALUE_List = row2.VALUE_List;
                row7.VALUE_List_nullable = row2.VALUE_List_nullable;
                row7.VALUE_List_null = row2.VALUE_List_null;

                /**
                 * [tJavaFlex_1 main ] stop
                 */

                /**
                 * [tAggregateRowOpt_1_AGGOUT main ] start
                 */

                currentComponent = "tAggregateRowOpt_1_AGGOUT";

                operation_finder_tAggregate_1.KEY_boolean = row7.KEY_boolean;
                operation_finder_tAggregate_1.KEY_Boolean = row7.KEY_Boolean;
                operation_finder_tAggregate_1.KEY_Boolean_null = row7.KEY_Boolean_null;
                operation_finder_tAggregate_1.KEY_byte = row7.KEY_byte;
                operation_finder_tAggregate_1.KEY_Byte = row7.KEY_Byte;
                operation_finder_tAggregate_1.KEY_Byte_null = row7.KEY_Byte_null;
                operation_finder_tAggregate_1.KEY_byte_array = row7.KEY_byte_array;
                operation_finder_tAggregate_1.KEY_byte_array_nullable = row7.KEY_byte_array_nullable;
                operation_finder_tAggregate_1.KEY_byte_array_null = row7.KEY_byte_array_null;
                operation_finder_tAggregate_1.KEY_char = row7.KEY_char;
                operation_finder_tAggregate_1.KEY_Character = row7.KEY_Character;
                operation_finder_tAggregate_1.KEY_Character_null = row7.KEY_Character_null;
                operation_finder_tAggregate_1.KEY_Date = row7.KEY_Date;
                operation_finder_tAggregate_1.KEY_Date_nullable = row7.KEY_Date_nullable;
                operation_finder_tAggregate_1.KEY_Date_null = row7.KEY_Date_null;
                operation_finder_tAggregate_1.KEY_double = row7.KEY_double;
                operation_finder_tAggregate_1.KEY_Double = row7.KEY_Double;
                operation_finder_tAggregate_1.KEY_Double_null = row7.KEY_Double_null;
                operation_finder_tAggregate_1.KEY_int = row7.KEY_int;
                operation_finder_tAggregate_1.KEY_Integer = row7.KEY_Integer;
                operation_finder_tAggregate_1.KEY_Integer_null = row7.KEY_Integer_null;
                operation_finder_tAggregate_1.KEY_float = row7.KEY_float;
                operation_finder_tAggregate_1.KEY_Float = row7.KEY_Float;
                operation_finder_tAggregate_1.KEY_Float_null = row7.KEY_Float_null;
                operation_finder_tAggregate_1.KEY_long = row7.KEY_long;
                operation_finder_tAggregate_1.KEY_Long = row7.KEY_Long;
                operation_finder_tAggregate_1.KEY_Long_null = row7.KEY_Long_null;
                operation_finder_tAggregate_1.KEY_Object = row7.KEY_Object;
                operation_finder_tAggregate_1.KEY_Object_nullable = row7.KEY_Object_nullable;
                operation_finder_tAggregate_1.KEY_Object_null = row7.KEY_Object_null;
                operation_finder_tAggregate_1.KEY_short = row7.KEY_short;
                operation_finder_tAggregate_1.KEY_Short_nullable = row7.KEY_Short_nullable;
                operation_finder_tAggregate_1.KEY_Short_null = row7.KEY_Short_null;
                operation_finder_tAggregate_1.KEY_String = row7.KEY_String;
                operation_finder_tAggregate_1.KEY_String_nullable = row7.KEY_String_nullable;
                operation_finder_tAggregate_1.KEY_String_null = row7.KEY_String_null;
                operation_finder_tAggregate_1.KEY_BigDecimal = row7.KEY_BigDecimal;
                operation_finder_tAggregate_1.KEY_BigDecimal_nullable = row7.KEY_BigDecimal_nullable;
                operation_finder_tAggregate_1.KEY_BigDecimal_null = row7.KEY_BigDecimal_null;
                operation_finder_tAggregate_1.KEY_List = row7.KEY_List;
                operation_finder_tAggregate_1.KEY_List_nullable = row7.KEY_List_nullable;
                operation_finder_tAggregate_1.KEY_List_null = row7.KEY_List_null;

                operation_result_tAggregate_1 = hash_tAggregate_1
                        .get(operation_finder_tAggregate_1);

                boolean isFirst = false;

                if (operation_result_tAggregate_1 == null) { // G_OutMain_AggR_001

                    operation_result_tAggregate_1 = new AggOperationStruct_tAggregate_1();

                    operation_result_tAggregate_1.KEY_boolean = operation_finder_tAggregate_1.KEY_boolean;
                    operation_result_tAggregate_1.KEY_Boolean = operation_finder_tAggregate_1.KEY_Boolean;
                    operation_result_tAggregate_1.KEY_Boolean_null = operation_finder_tAggregate_1.KEY_Boolean_null;
                    operation_result_tAggregate_1.KEY_byte = operation_finder_tAggregate_1.KEY_byte;
                    operation_result_tAggregate_1.KEY_Byte = operation_finder_tAggregate_1.KEY_Byte;
                    operation_result_tAggregate_1.KEY_Byte_null = operation_finder_tAggregate_1.KEY_Byte_null;
                    operation_result_tAggregate_1.KEY_byte_array = operation_finder_tAggregate_1.KEY_byte_array;
                    operation_result_tAggregate_1.KEY_byte_array_nullable = operation_finder_tAggregate_1.KEY_byte_array_nullable;
                    operation_result_tAggregate_1.KEY_byte_array_null = operation_finder_tAggregate_1.KEY_byte_array_null;
                    operation_result_tAggregate_1.KEY_char = operation_finder_tAggregate_1.KEY_char;
                    operation_result_tAggregate_1.KEY_Character = operation_finder_tAggregate_1.KEY_Character;
                    operation_result_tAggregate_1.KEY_Character_null = operation_finder_tAggregate_1.KEY_Character_null;
                    operation_result_tAggregate_1.KEY_Date = operation_finder_tAggregate_1.KEY_Date;
                    operation_result_tAggregate_1.KEY_Date_nullable = operation_finder_tAggregate_1.KEY_Date_nullable;
                    operation_result_tAggregate_1.KEY_Date_null = operation_finder_tAggregate_1.KEY_Date_null;
                    operation_result_tAggregate_1.KEY_double = operation_finder_tAggregate_1.KEY_double;
                    operation_result_tAggregate_1.KEY_Double = operation_finder_tAggregate_1.KEY_Double;
                    operation_result_tAggregate_1.KEY_Double_null = operation_finder_tAggregate_1.KEY_Double_null;
                    operation_result_tAggregate_1.KEY_int = operation_finder_tAggregate_1.KEY_int;
                    operation_result_tAggregate_1.KEY_Integer = operation_finder_tAggregate_1.KEY_Integer;
                    operation_result_tAggregate_1.KEY_Integer_null = operation_finder_tAggregate_1.KEY_Integer_null;
                    operation_result_tAggregate_1.KEY_float = operation_finder_tAggregate_1.KEY_float;
                    operation_result_tAggregate_1.KEY_Float = operation_finder_tAggregate_1.KEY_Float;
                    operation_result_tAggregate_1.KEY_Float_null = operation_finder_tAggregate_1.KEY_Float_null;
                    operation_result_tAggregate_1.KEY_long = operation_finder_tAggregate_1.KEY_long;
                    operation_result_tAggregate_1.KEY_Long = operation_finder_tAggregate_1.KEY_Long;
                    operation_result_tAggregate_1.KEY_Long_null = operation_finder_tAggregate_1.KEY_Long_null;
                    operation_result_tAggregate_1.KEY_Object = operation_finder_tAggregate_1.KEY_Object;
                    operation_result_tAggregate_1.KEY_Object_nullable = operation_finder_tAggregate_1.KEY_Object_nullable;
                    operation_result_tAggregate_1.KEY_Object_null = operation_finder_tAggregate_1.KEY_Object_null;
                    operation_result_tAggregate_1.KEY_short = operation_finder_tAggregate_1.KEY_short;
                    operation_result_tAggregate_1.KEY_Short_nullable = operation_finder_tAggregate_1.KEY_Short_nullable;
                    operation_result_tAggregate_1.KEY_Short_null = operation_finder_tAggregate_1.KEY_Short_null;
                    operation_result_tAggregate_1.KEY_String = operation_finder_tAggregate_1.KEY_String;
                    operation_result_tAggregate_1.KEY_String_nullable = operation_finder_tAggregate_1.KEY_String_nullable;
                    operation_result_tAggregate_1.KEY_String_null = operation_finder_tAggregate_1.KEY_String_null;
                    operation_result_tAggregate_1.KEY_BigDecimal = operation_finder_tAggregate_1.KEY_BigDecimal;
                    operation_result_tAggregate_1.KEY_BigDecimal_nullable = operation_finder_tAggregate_1.KEY_BigDecimal_nullable;
                    operation_result_tAggregate_1.KEY_BigDecimal_null = operation_finder_tAggregate_1.KEY_BigDecimal_null;
                    operation_result_tAggregate_1.KEY_List = operation_finder_tAggregate_1.KEY_List;
                    operation_result_tAggregate_1.KEY_List_nullable = operation_finder_tAggregate_1.KEY_List_nullable;
                    operation_result_tAggregate_1.KEY_List_null = operation_finder_tAggregate_1.KEY_List_null;

                    isFirst = true;

                    hash_tAggregate_1.put(operation_result_tAggregate_1,
                            operation_result_tAggregate_1);

                } // G_OutMain_AggR_001

                if (

                row7.VALUE_byte < operation_result_tAggregate_1.VALUE_byte_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_byte_min = row7.VALUE_byte;
                }

                if (operation_result_tAggregate_1.VALUE_Byte_min == null
                        || row7.VALUE_Byte < operation_result_tAggregate_1.VALUE_Byte_min

                ) {
                    operation_result_tAggregate_1.VALUE_Byte_min = row7.VALUE_Byte;
                }

                if (row7.VALUE_Byte_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Byte_null_min == null
                            || row7.VALUE_Byte_null < operation_result_tAggregate_1.VALUE_Byte_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Byte_null_min = row7.VALUE_Byte_null;
                    }

                } // G_OutMain_AggR_546

                if (

                operation_result_tAggregate_1.VALUE_Date_min == null
                        || row7.VALUE_Date
                                .compareTo(operation_result_tAggregate_1.VALUE_Date_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_Date_min = row7.VALUE_Date;
                }

                if (

                operation_result_tAggregate_1.VALUE_Date_nullable_min == null
                        || row7.VALUE_Date_nullable
                                .compareTo(operation_result_tAggregate_1.VALUE_Date_nullable_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_Date_nullable_min = row7.VALUE_Date_nullable;
                }

                if (row7.VALUE_Date_null != null) { // G_OutMain_AggR_546

                    if (

                    operation_result_tAggregate_1.VALUE_Date_null_min == null
                            || row7.VALUE_Date_null
                                    .compareTo(operation_result_tAggregate_1.VALUE_Date_null_min) < 0

                    ) {
                        operation_result_tAggregate_1.VALUE_Date_null_min = row7.VALUE_Date_null;
                    }

                } // G_OutMain_AggR_546

                if (

                row7.VALUE_double < operation_result_tAggregate_1.VALUE_double_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_double_min = row7.VALUE_double;
                }

                if (operation_result_tAggregate_1.VALUE_Double_min == null
                        || row7.VALUE_Double < operation_result_tAggregate_1.VALUE_Double_min

                ) {
                    operation_result_tAggregate_1.VALUE_Double_min = row7.VALUE_Double;
                }

                if (row7.VALUE_Double_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Double_null_min == null
                            || row7.VALUE_Double_null < operation_result_tAggregate_1.VALUE_Double_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Double_null_min = row7.VALUE_Double_null;
                    }

                } // G_OutMain_AggR_546

                if (

                row7.VALUE_int < operation_result_tAggregate_1.VALUE_int_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_int_min = row7.VALUE_int;
                }

                if (operation_result_tAggregate_1.VALUE_Integer_min == null
                        || row7.VALUE_Integer < operation_result_tAggregate_1.VALUE_Integer_min

                ) {
                    operation_result_tAggregate_1.VALUE_Integer_min = row7.VALUE_Integer;
                }

                if (row7.VALUE_Integer_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Integer_null_min == null
                            || row7.VALUE_Integer_null < operation_result_tAggregate_1.VALUE_Integer_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Integer_null_min = row7.VALUE_Integer_null;
                    }

                } // G_OutMain_AggR_546

                if (

                row7.VALUE_float < operation_result_tAggregate_1.VALUE_float_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_float_min = row7.VALUE_float;
                }

                if (operation_result_tAggregate_1.VALUE_Float_min == null
                        || row7.VALUE_Float < operation_result_tAggregate_1.VALUE_Float_min

                ) {
                    operation_result_tAggregate_1.VALUE_Float_min = row7.VALUE_Float;
                }

                if (row7.VALUE_Float_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Float_null_min == null
                            || row7.VALUE_Float_null < operation_result_tAggregate_1.VALUE_Float_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Float_null_min = row7.VALUE_Float_null;
                    }

                } // G_OutMain_AggR_546

                if (

                row7.VALUE_long < operation_result_tAggregate_1.VALUE_long_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_long_min = row7.VALUE_long;
                }

                if (operation_result_tAggregate_1.VALUE_Long_min == null
                        || row7.VALUE_Long < operation_result_tAggregate_1.VALUE_Long_min

                ) {
                    operation_result_tAggregate_1.VALUE_Long_min = row7.VALUE_Long;
                }

                if (row7.VALUE_Long_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Long_null_min == null
                            || row7.VALUE_Long_null < operation_result_tAggregate_1.VALUE_Long_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Long_null_min = row7.VALUE_Long_null;
                    }

                } // G_OutMain_AggR_546

                if (

                operation_result_tAggregate_1.VALUE_Object_min == null
                        || operation_result_tAggregate_1.VALUE_Object_min instanceof java.lang.Comparable
                        && ((java.lang.Comparable) row7.VALUE_Object)
                                .compareTo(operation_result_tAggregate_1.VALUE_Object_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_Object_min = row7.VALUE_Object;
                }

                if (

                operation_result_tAggregate_1.VALUE_Object_nullable_min == null
                        || operation_result_tAggregate_1.VALUE_Object_nullable_min instanceof java.lang.Comparable
                        && ((java.lang.Comparable) row7.VALUE_Object_nullable)
                                .compareTo(operation_result_tAggregate_1.VALUE_Object_nullable_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_Object_nullable_min = row7.VALUE_Object_nullable;
                }

                if (row7.VALUE_Object_null != null) { // G_OutMain_AggR_546

                    if (

                    operation_result_tAggregate_1.VALUE_Object_null_min == null
                            || operation_result_tAggregate_1.VALUE_Object_null_min instanceof java.lang.Comparable
                            && ((java.lang.Comparable) row7.VALUE_Object_null)
                                    .compareTo(operation_result_tAggregate_1.VALUE_Object_null_min) < 0

                    ) {
                        operation_result_tAggregate_1.VALUE_Object_null_min = row7.VALUE_Object_null;
                    }

                } // G_OutMain_AggR_546

                if (

                row7.VALUE_short < operation_result_tAggregate_1.VALUE_short_min
                        || isFirstIteration) {
                    operation_result_tAggregate_1.VALUE_short_min = row7.VALUE_short;
                }

                if (operation_result_tAggregate_1.VALUE_Short_nullable_min == null
                        || row7.VALUE_Short_nullable < operation_result_tAggregate_1.VALUE_Short_nullable_min

                ) {
                    operation_result_tAggregate_1.VALUE_Short_nullable_min = row7.VALUE_Short_nullable;
                }

                if (row7.VALUE_Short_null != null) { // G_OutMain_AggR_546

                    if (operation_result_tAggregate_1.VALUE_Short_null_min == null
                            || row7.VALUE_Short_null < operation_result_tAggregate_1.VALUE_Short_null_min

                    ) {
                        operation_result_tAggregate_1.VALUE_Short_null_min = row7.VALUE_Short_null;
                    }

                } // G_OutMain_AggR_546

                if (

                operation_result_tAggregate_1.VALUE_String_min == null
                        || row7.VALUE_String
                                .compareTo(operation_result_tAggregate_1.VALUE_String_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_String_min = row7.VALUE_String;
                }

                if (

                operation_result_tAggregate_1.VALUE_String_nullable_min == null
                        || row7.VALUE_String_nullable
                                .compareTo(operation_result_tAggregate_1.VALUE_String_nullable_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_String_nullable_min = row7.VALUE_String_nullable;
                }

                if (row7.VALUE_String_null != null) { // G_OutMain_AggR_546

                    if (

                    operation_result_tAggregate_1.VALUE_String_null_min == null
                            || row7.VALUE_String_null
                                    .compareTo(operation_result_tAggregate_1.VALUE_String_null_min) < 0

                    ) {
                        operation_result_tAggregate_1.VALUE_String_null_min = row7.VALUE_String_null;
                    }

                } // G_OutMain_AggR_546

                if (

                operation_result_tAggregate_1.VALUE_BigDecimal_min == null
                        || row7.VALUE_BigDecimal
                                .compareTo(operation_result_tAggregate_1.VALUE_BigDecimal_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_BigDecimal_min = row7.VALUE_BigDecimal;
                }

                if (

                operation_result_tAggregate_1.VALUE_BigDecimal_nullable_min == null
                        || row7.VALUE_BigDecimal_nullable
                                .compareTo(operation_result_tAggregate_1.VALUE_BigDecimal_nullable_min) < 0

                ) {
                    operation_result_tAggregate_1.VALUE_BigDecimal_nullable_min = row7.VALUE_BigDecimal_nullable;
                }

                if (row7.VALUE_BigDecimal_null != null) { // G_OutMain_AggR_546

                    if (

                    operation_result_tAggregate_1.VALUE_BigDecimal_null_min == null
                            || row7.VALUE_BigDecimal_null
                                    .compareTo(operation_result_tAggregate_1.VALUE_BigDecimal_null_min) < 0

                    ) {
                        operation_result_tAggregate_1.VALUE_BigDecimal_null_min = row7.VALUE_BigDecimal_null;
                    }

                } // G_OutMain_AggR_546

                nb_line_tAggregate_1++;
                isFirstIteration = false;

                /**
                 * [tAggregateRowOpt_1_AGGOUT main ] stop
                 */

                /**
                 * [tRowGenerator_2 end ] start
                 */

                currentComponent = "tRowGenerator_2";

            }
            globalMap.put("tRowGenerator_2_NB_LINE", nb_line_tRowGenerator_2);

            ok_Hash.put("tRowGenerator_2", true);
            end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

            /**
             * [tRowGenerator_2 end ] stop
             */

            /**
             * [tJavaFlex_1 end ] start
             */

            currentComponent = "tJavaFlex_1";

            // end of the component, outside/closing the loop

            ok_Hash.put("tJavaFlex_1", true);
            end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

            /**
             * [tJavaFlex_1 end ] stop
             */

            /**
             * [tAggregateRowOpt_1_AGGOUT end ] start
             */

            currentComponent = "tAggregateRowOpt_1_AGGOUT";

            // globalMap.put("tAggregate_1",result_list_tAggregate_1);
            // globalMap.put("tAggregate_1_NB_LINE",nb_line_tAggregate_1);

            ok_Hash.put("tAggregateRowOpt_1_AGGOUT", true);
            end_Hash.put("tAggregateRowOpt_1_AGGOUT", System
                    .currentTimeMillis());

            /**
             * [tAggregateRowOpt_1_AGGOUT end ] stop
             */

            /**
             * [tFileOutputDelimited_1 begin ] start
             */

            ok_Hash.put("tFileOutputDelimited_1", false);
            start_Hash
                    .put("tFileOutputDelimited_1", System.currentTimeMillis());
            currentComponent = "tFileOutputDelimited_1";

            String fileName_tFileOutputDelimited_1 = (new java.io.File(
                    context.data_output_dir + context.current_job_dir
                            + "out.csv")).getAbsolutePath().replace("\\", "/");
            String fullName_tFileOutputDelimited_1 = null;
            String extension_tFileOutputDelimited_1 = null;
            String directory_tFileOutputDelimited_1 = null;
            if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
                if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
                        .lastIndexOf("/")) {
                    fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
                    extension_tFileOutputDelimited_1 = "";
                } else {
                    fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
                            .substring(0, fileName_tFileOutputDelimited_1
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
                            .substring(fileName_tFileOutputDelimited_1
                                    .lastIndexOf("."));
                }
                directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
                        .substring(0, fileName_tFileOutputDelimited_1
                                .lastIndexOf("/"));
            } else {
                if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
                    fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
                            .substring(0, fileName_tFileOutputDelimited_1
                                    .lastIndexOf("."));
                    extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
                            .substring(fileName_tFileOutputDelimited_1
                                    .lastIndexOf("."));
                } else {
                    fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
                    extension_tFileOutputDelimited_1 = "";
                }
                directory_tFileOutputDelimited_1 = "";
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /**
             * Start field
             * tFileOutputDelimited_1:FIELDSEPARATOR
             */
            ";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
            ;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
             * Start field
             * tFileOutputDelimited_1:ROWSEPARATOR
             */
            "\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
            ;

            // create directory only if not exists
            if (directory_tFileOutputDelimited_1 != null
                    && directory_tFileOutputDelimited_1.trim().length() != 0) {
                java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
                        directory_tFileOutputDelimited_1);
                if (!dir_tFileOutputDelimited_1.exists()) {
                    dir_tFileOutputDelimited_1.mkdirs();
                }
            }

            // routines.system.Row
            java.io.Writer outtFileOutputDelimited_1 = new java.io.BufferedWriter(
                    new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(
                                    fileName_tFileOutputDelimited_1, false),
                            "ISO-8859-15"));
            java.io.File filetFileOutputDelimited_1 = new java.io.File(
                    fileName_tFileOutputDelimited_1);

            if (filetFileOutputDelimited_1.length() == 0) {

                outtFileOutputDelimited_1.write("KEY_boolean");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Boolean");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Boolean_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_byte");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Byte");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Byte_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_byte_array");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_byte_array_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_byte_array_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_char");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Character");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Character_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Date");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Date_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Date_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_double");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Double");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Double_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_int");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Integer");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Integer_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_float");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Float");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Float_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_long");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Long");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Long_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Object");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Object_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Object_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_short");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Short_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_Short_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_String");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_String_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_String_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_BigDecimal");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_BigDecimal_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_BigDecimal_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_List");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_List_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("KEY_List_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_boolean");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Boolean");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Boolean_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_byte");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Byte");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Byte_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_byte_array");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_byte_array_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_byte_array_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_char");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Character");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Character_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Date");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Date_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Date_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_double");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Double");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Double_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_int");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Integer");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Integer_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_float");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Float");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Float_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_long");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Long");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Long_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Object");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Object_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Object_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_short");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Short_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_Short_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_String");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_String_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_String_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_BigDecimal");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_BigDecimal_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_BigDecimal_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_List");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_List_nullable");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write("VALUE_List_null");

                outtFileOutputDelimited_1
                        .write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
            }

            /**
             * [tFileOutputDelimited_1 begin ] stop
             */

            /**
             * [tJavaRow_1 begin ] start
             */

            ok_Hash.put("tJavaRow_1", false);
            start_Hash.put("tJavaRow_1", System.currentTimeMillis());
            currentComponent = "tJavaRow_1";

            int nb_line_tJavaRow_1 = 0;

            /**
             * [tJavaRow_1 begin ] stop
             */

            /**
             * [tAggregateRowOpt_1_AGGIN begin ] start
             */

            ok_Hash.put("tAggregateRowOpt_1_AGGIN", false);
            start_Hash.put("tAggregateRowOpt_1_AGGIN", System
                    .currentTimeMillis());
            currentComponent = "tAggregateRowOpt_1_AGGIN";

            java.util.Collection<AggOperationStruct_tAggregate_1> values_tAggregate_1 = hash_tAggregate_1
                    .values();

            for (AggOperationStruct_tAggregate_1 aggregated_row_tAggregate_1 : values_tAggregate_1) { // G_AggR_600

                /**
                 * [tAggregateRowOpt_1_AGGIN begin ] stop
                 */
                /**
                 * [tAggregateRowOpt_1_AGGIN main ] start
                 */

                currentComponent = "tAggregateRowOpt_1_AGGIN";

                nb_line_tAggregate_1 = 0;
                row3.KEY_boolean = aggregated_row_tAggregate_1.KEY_boolean;

                row3.KEY_Boolean = aggregated_row_tAggregate_1.KEY_Boolean;

                row3.KEY_Boolean_null = aggregated_row_tAggregate_1.KEY_Boolean_null;

                row3.KEY_byte = aggregated_row_tAggregate_1.KEY_byte;

                row3.KEY_Byte = aggregated_row_tAggregate_1.KEY_Byte;

                row3.KEY_Byte_null = aggregated_row_tAggregate_1.KEY_Byte_null;

                row3.KEY_byte_array = aggregated_row_tAggregate_1.KEY_byte_array;

                row3.KEY_byte_array_nullable = aggregated_row_tAggregate_1.KEY_byte_array_nullable;

                row3.KEY_byte_array_null = aggregated_row_tAggregate_1.KEY_byte_array_null;

                row3.KEY_char = aggregated_row_tAggregate_1.KEY_char;

                row3.KEY_Character = aggregated_row_tAggregate_1.KEY_Character;

                row3.KEY_Character_null = aggregated_row_tAggregate_1.KEY_Character_null;

                row3.KEY_Date = aggregated_row_tAggregate_1.KEY_Date;

                row3.KEY_Date_nullable = aggregated_row_tAggregate_1.KEY_Date_nullable;

                row3.KEY_Date_null = aggregated_row_tAggregate_1.KEY_Date_null;

                row3.KEY_double = aggregated_row_tAggregate_1.KEY_double;

                row3.KEY_Double = aggregated_row_tAggregate_1.KEY_Double;

                row3.KEY_Double_null = aggregated_row_tAggregate_1.KEY_Double_null;

                row3.KEY_int = aggregated_row_tAggregate_1.KEY_int;

                row3.KEY_Integer = aggregated_row_tAggregate_1.KEY_Integer;

                row3.KEY_Integer_null = aggregated_row_tAggregate_1.KEY_Integer_null;

                row3.KEY_float = aggregated_row_tAggregate_1.KEY_float;

                row3.KEY_Float = aggregated_row_tAggregate_1.KEY_Float;

                row3.KEY_Float_null = aggregated_row_tAggregate_1.KEY_Float_null;

                row3.KEY_long = aggregated_row_tAggregate_1.KEY_long;

                row3.KEY_Long = aggregated_row_tAggregate_1.KEY_Long;

                row3.KEY_Long_null = aggregated_row_tAggregate_1.KEY_Long_null;

                row3.KEY_Object = aggregated_row_tAggregate_1.KEY_Object;

                row3.KEY_Object_nullable = aggregated_row_tAggregate_1.KEY_Object_nullable;

                row3.KEY_Object_null = aggregated_row_tAggregate_1.KEY_Object_null;

                row3.KEY_short = aggregated_row_tAggregate_1.KEY_short;

                row3.KEY_Short_nullable = aggregated_row_tAggregate_1.KEY_Short_nullable;

                row3.KEY_Short_null = aggregated_row_tAggregate_1.KEY_Short_null;

                row3.KEY_String = aggregated_row_tAggregate_1.KEY_String;

                row3.KEY_String_nullable = aggregated_row_tAggregate_1.KEY_String_nullable;

                row3.KEY_String_null = aggregated_row_tAggregate_1.KEY_String_null;

                row3.KEY_BigDecimal = aggregated_row_tAggregate_1.KEY_BigDecimal;

                row3.KEY_BigDecimal_nullable = aggregated_row_tAggregate_1.KEY_BigDecimal_nullable;

                row3.KEY_BigDecimal_null = aggregated_row_tAggregate_1.KEY_BigDecimal_null;

                row3.KEY_List = aggregated_row_tAggregate_1.KEY_List;

                row3.KEY_List_nullable = aggregated_row_tAggregate_1.KEY_List_nullable;

                row3.KEY_List_null = aggregated_row_tAggregate_1.KEY_List_null;

                row3.VALUE_byte = operation_result_tAggregate_1.VALUE_byte_min;
                row3.VALUE_Byte = operation_result_tAggregate_1.VALUE_Byte_min;
                row3.VALUE_Byte_null = operation_result_tAggregate_1.VALUE_Byte_null_min;
                row3.VALUE_Date = operation_result_tAggregate_1.VALUE_Date_min;
                row3.VALUE_Date_nullable = operation_result_tAggregate_1.VALUE_Date_nullable_min;
                row3.VALUE_Date_null = operation_result_tAggregate_1.VALUE_Date_null_min;
                row3.VALUE_double = operation_result_tAggregate_1.VALUE_double_min;
                row3.VALUE_Double = operation_result_tAggregate_1.VALUE_Double_min;
                row3.VALUE_Double_null = operation_result_tAggregate_1.VALUE_Double_null_min;
                row3.VALUE_int = operation_result_tAggregate_1.VALUE_int_min;
                row3.VALUE_Integer = operation_result_tAggregate_1.VALUE_Integer_min;
                row3.VALUE_Integer_null = operation_result_tAggregate_1.VALUE_Integer_null_min;
                row3.VALUE_float = operation_result_tAggregate_1.VALUE_float_min;
                row3.VALUE_Float = operation_result_tAggregate_1.VALUE_Float_min;
                row3.VALUE_Float_null = operation_result_tAggregate_1.VALUE_Float_null_min;
                row3.VALUE_long = operation_result_tAggregate_1.VALUE_long_min;
                row3.VALUE_Long = operation_result_tAggregate_1.VALUE_Long_min;
                row3.VALUE_Long_null = operation_result_tAggregate_1.VALUE_Long_null_min;
                row3.VALUE_Object = operation_result_tAggregate_1.VALUE_Object_min;
                row3.VALUE_Object_nullable = operation_result_tAggregate_1.VALUE_Object_nullable_min;
                row3.VALUE_Object_null = operation_result_tAggregate_1.VALUE_Object_null_min;
                row3.VALUE_short = operation_result_tAggregate_1.VALUE_short_min;
                row3.VALUE_Short_nullable = operation_result_tAggregate_1.VALUE_Short_nullable_min;
                row3.VALUE_Short_null = operation_result_tAggregate_1.VALUE_Short_null_min;
                row3.VALUE_String = operation_result_tAggregate_1.VALUE_String_min;
                row3.VALUE_String_nullable = operation_result_tAggregate_1.VALUE_String_nullable_min;
                row3.VALUE_String_null = operation_result_tAggregate_1.VALUE_String_null_min;
                row3.VALUE_BigDecimal = operation_result_tAggregate_1.VALUE_BigDecimal_min;
                row3.VALUE_BigDecimal_nullable = operation_result_tAggregate_1.VALUE_BigDecimal_nullable_min;
                row3.VALUE_BigDecimal_null = operation_result_tAggregate_1.VALUE_BigDecimal_null_min;
                // in the deepest end
                nb_line_tAggregate_1++;

                // globalMap.put("tAggregate_1",result_list_tAggregate_1);
                globalMap.put("tAggregate_1_NB_LINE", nb_line_tAggregate_1);

                /**
                 * [tAggregateRowOpt_1_AGGIN main ] stop
                 */

                /**
                 * [tJavaRow_1 main ] start
                 */

                currentComponent = "tJavaRow_1";

                // Code generate accord to input schema and output schmea
                row5.KEY_boolean = row3.KEY_boolean;
                row5.KEY_Boolean = row3.KEY_Boolean;
                row5.KEY_Boolean_null = row3.KEY_Boolean_null;
                row5.KEY_byte = row3.KEY_byte;
                row5.KEY_Byte = row3.KEY_Byte;
                row5.KEY_Byte_null = row3.KEY_Byte_null;

                row5.KEY_byte_array = java.util.Arrays
                        .toString(row3.KEY_byte_array);
                row5.KEY_byte_array_nullable = java.util.Arrays
                        .toString(row3.KEY_byte_array_nullable);
                row5.KEY_byte_array_null = row3.KEY_byte_array_null;

                row5.KEY_char = row3.KEY_char;
                row5.KEY_Character = row3.KEY_Character;
                row5.KEY_Character_null = row3.KEY_Character_null;
                row5.KEY_Date = row3.KEY_Date;
                row5.KEY_Date_nullable = row3.KEY_Date_nullable;
                row5.KEY_Date_null = row3.KEY_Date_null;
                row5.KEY_double = row3.KEY_double;
                row5.KEY_Double = row3.KEY_Double;
                row5.KEY_Double_null = row3.KEY_Double_null;
                row5.KEY_int = row3.KEY_int;
                row5.KEY_Integer = row3.KEY_Integer;
                row5.KEY_Integer_null = row3.KEY_Integer_null;
                row5.KEY_float = row3.KEY_float;
                row5.KEY_Float = row3.KEY_Float;
                row5.KEY_Float_null = row3.KEY_Float_null;
                row5.KEY_long = row3.KEY_long;
                row5.KEY_Long = row3.KEY_Long;
                row5.KEY_Long_null = row3.KEY_Long_null;
                row5.KEY_Object = row3.KEY_Object;
                row5.KEY_Object_nullable = row3.KEY_Object_nullable;
                row5.KEY_Object_null = row3.KEY_Object_null;
                row5.KEY_short = row3.KEY_short;
                row5.KEY_Short_nullable = row3.KEY_Short_nullable;
                row5.KEY_Short_null = row3.KEY_Short_null;
                row5.KEY_String = row3.KEY_String;
                row5.KEY_String_nullable = row3.KEY_String_nullable;
                row5.KEY_String_null = row3.KEY_String_null;
                row5.KEY_BigDecimal = row3.KEY_BigDecimal;
                row5.KEY_BigDecimal_nullable = row3.KEY_BigDecimal_nullable;
                row5.KEY_BigDecimal_null = row3.KEY_BigDecimal_null;
                row5.KEY_List = row3.KEY_List;
                row5.KEY_List_nullable = row3.KEY_List_nullable;
                row5.KEY_List_null = row3.KEY_List_null;
                row5.VALUE_boolean = row3.VALUE_boolean;
                row5.VALUE_Boolean = row3.VALUE_Boolean;
                row5.VALUE_Boolean_null = row3.VALUE_Boolean_null;
                row5.VALUE_byte = row3.VALUE_byte;
                row5.VALUE_Byte = row3.VALUE_Byte;
                row5.VALUE_Byte_null = row3.VALUE_Byte_null;
                row5.VALUE_byte_array = row3.VALUE_byte_array;
                row5.VALUE_byte_array_nullable = row3.VALUE_byte_array_nullable;
                row5.VALUE_byte_array_null = row3.VALUE_byte_array_null;
                row5.VALUE_char = row3.VALUE_char;
                row5.VALUE_Character = row3.VALUE_Character;
                row5.VALUE_Character_null = row3.VALUE_Character_null;
                row5.VALUE_Date = row3.VALUE_Date;
                row5.VALUE_Date_nullable = row3.VALUE_Date_nullable;
                row5.VALUE_Date_null = row3.VALUE_Date_null;
                row5.VALUE_double = row3.VALUE_double;
                row5.VALUE_Double = row3.VALUE_Double;
                row5.VALUE_Double_null = row3.VALUE_Double_null;
                row5.VALUE_int = row3.VALUE_int;
                row5.VALUE_Integer = row3.VALUE_Integer;
                row5.VALUE_Integer_null = row3.VALUE_Integer_null;
                row5.VALUE_float = row3.VALUE_float;
                row5.VALUE_Float = row3.VALUE_Float;
                row5.VALUE_Float_null = row3.VALUE_Float_null;
                row5.VALUE_long = row3.VALUE_long;
                row5.VALUE_Long = row3.VALUE_Long;
                row5.VALUE_Long_null = row3.VALUE_Long_null;
                row5.VALUE_Object = row3.VALUE_Object;
                row5.VALUE_Object_nullable = row3.VALUE_Object_nullable;
                row5.VALUE_Object_null = row3.VALUE_Object_null;
                row5.VALUE_short = row3.VALUE_short;
                row5.VALUE_Short_nullable = row3.VALUE_Short_nullable;
                row5.VALUE_Short_null = row3.VALUE_Short_null;
                row5.VALUE_String = row3.VALUE_String;
                row5.VALUE_String_nullable = row3.VALUE_String_nullable;
                row5.VALUE_String_null = row3.VALUE_String_null;
                row5.VALUE_BigDecimal = row3.VALUE_BigDecimal;
                row5.VALUE_BigDecimal_nullable = row3.VALUE_BigDecimal_nullable;
                row5.VALUE_BigDecimal_null = row3.VALUE_BigDecimal_null;
                row5.VALUE_List = row3.VALUE_List;
                row5.VALUE_List_nullable = row3.VALUE_List_nullable;
                row5.VALUE_List_null = row3.VALUE_List_null;

                nb_line_tJavaRow_1++;

                /**
                 * [tJavaRow_1 main ] stop
                 */

                /**
                 * [tFileOutputDelimited_1 main ] start
                 */

                currentComponent = "tFileOutputDelimited_1";

                StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

                sb_tFileOutputDelimited_1.append(

                row5.KEY_boolean

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Boolean != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Boolean

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Boolean_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Boolean_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_byte

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Byte != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Byte

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Byte_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Byte_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_byte_array != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_byte_array

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_byte_array_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_byte_array_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_byte_array_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_byte_array_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_char

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Character != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Character

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Character_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Character_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Date != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Date

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Date_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Date_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Date_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Date_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_double

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Double != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Double

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Double_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Double_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_int

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Integer != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Integer

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Integer_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Integer_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_float

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Float != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Float

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Float_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Float_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_long

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Long != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Long

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Long_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Long_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Object != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Object

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Object_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Object_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Object_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Object_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.KEY_short

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Short_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Short_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_Short_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_Short_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_String != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_String

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_String_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_String_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_String_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_String_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_BigDecimal != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_BigDecimal.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_BigDecimal_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_BigDecimal_nullable.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_BigDecimal_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_BigDecimal_null.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_List != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_List

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_List_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_List_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.KEY_List_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.KEY_List_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_boolean

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Boolean != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Boolean

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Boolean_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Boolean_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_byte

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Byte != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Byte

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Byte_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Byte_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_byte_array != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_byte_array

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_byte_array_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_byte_array_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_byte_array_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_byte_array_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_char

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Character != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Character

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Character_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Character_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Date != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Date

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Date_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Date_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Date_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Date_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_double

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Double != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Double

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Double_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Double_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_int

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Integer != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Integer

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Integer_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Integer_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_float

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Float != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Float

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Float_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Float_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_long

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Long != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Long

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Long_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Long_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Object != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Object

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Object_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Object_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Object_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Object_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                sb_tFileOutputDelimited_1.append(

                row5.VALUE_short

                );

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Short_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Short_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_Short_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_Short_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_String != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_String

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_String_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_String_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_String_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_String_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_BigDecimal != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_BigDecimal.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_BigDecimal_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_BigDecimal_nullable.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_BigDecimal_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_BigDecimal_null.doubleValue()

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_List != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_List

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_List_nullable != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_List_nullable

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_tFileOutputDelimited_1);

                if (row5.VALUE_List_null != null) {

                    sb_tFileOutputDelimited_1.append(

                    row5.VALUE_List_null

                    );

                }

                sb_tFileOutputDelimited_1
                        .append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

                outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
                        .toString());

                nb_line_tFileOutputDelimited_1++;

                /**
                 * [tFileOutputDelimited_1 main ] stop
                 */

                /**
                 * [tAggregateRowOpt_1_AGGIN end ] start
                 */

                currentComponent = "tAggregateRowOpt_1_AGGIN";

            } // G_AggR_600

            ok_Hash.put("tAggregateRowOpt_1_AGGIN", true);
            end_Hash
                    .put("tAggregateRowOpt_1_AGGIN", System.currentTimeMillis());

            /**
             * [tAggregateRowOpt_1_AGGIN end ] stop
             */

            /**
             * [tJavaRow_1 end ] start
             */

            currentComponent = "tJavaRow_1";

            globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

            ok_Hash.put("tJavaRow_1", true);
            end_Hash.put("tJavaRow_1", System.currentTimeMillis());

            /**
             * [tJavaRow_1 end ] stop
             */

            /**
             * [tFileOutputDelimited_1 end ] start
             */

            currentComponent = "tFileOutputDelimited_1";

            outtFileOutputDelimited_1.close();
            globalMap.put("tFileOutputDelimited_1_NB_LINE",
                    nb_line_tFileOutputDelimited_1);

            ok_Hash.put("tFileOutputDelimited_1", true);
            end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

            /**
             * [tFileOutputDelimited_1 end ] stop
             */

            tFileCompare_1Process(globalMap);

        } catch (Exception e) {

            throw new TalendException(this, e, globalMap);
        }

        finally {
            // free memory for "tAggregateRowOpt_1_AGGIN"
            globalMap.put("tAggregate_1", null);

            System.gc();
        }

        globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
    }

    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "local";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
    public static long startTime = 0;

    private static ThreadLocal threadLocal = new ThreadLocal();

    private static java.util.Properties context_param = new java.util.Properties();

    public static String status = "";

    public static void main(String[] args) {

        int exitCode = runJobInTOS(args);

        globalBuffer.clear();

        System.exit(exitCode);
    }

    public static String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        globalBuffer.clear();

        return bufferValue;
    }

    public static synchronized int runJobInTOS(String[] args) {

        init();

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        pid = TalendString.getAsciiRandomString(6);
        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        }

        try {
            java.io.InputStream inContext = tAggregateRow_all_types_MIN.class
                    .getClassLoader()
                    .getResourceAsStream(
                            "java_project_dev_3_0_bis/taggregaterow_all_types_min_0_1/contexts/Default.properties");
            if (inContext != null) {
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            }

            if (contextStr.compareTo("Default") != 0) {
                inContext = tAggregateRow_all_types_MIN.class.getClassLoader()
                        .getResourceAsStream(
                                "java_project_dev_3_0_bis/taggregaterow_all_types_min_0_1/contexts/"
                                        + contextStr + ".properties");
                if (inContext != null) {
                    context.load(inContext);
                    inContext.close();
                }
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
            }

            context.param_file_path = (String) context
                    .getProperty("param_file_path");

            context.data_dir = (String) context.getProperty("data_dir");

            context.data_output_dir = (String) context
                    .getProperty("data_output_dir");

            context.result_host = (String) context.getProperty("result_host");

            context.result_port = (String) context.getProperty("result_port");

            context.result_database = (String) context
                    .getProperty("result_database");

            context.result_username = (String) context
                    .getProperty("result_username");

            context.result_password = (String) context
                    .getProperty("result_password");

            context.result_table = (String) context.getProperty("result_table");

            context.mysql_host = (String) context.getProperty("mysql_host");

            context.mysql_port = (String) context.getProperty("mysql_port");

            context.mysql_database = (String) context
                    .getProperty("mysql_database");

            context.mysql_username = (String) context
                    .getProperty("mysql_username");

            context.mysql_password = (String) context
                    .getProperty("mysql_password");

            context.current_job_dir = (String) context
                    .getProperty("current_job_dir");

        } catch (java.io.IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        long startUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();
        final tAggregateRow_all_types_MIN tAggregateRow_all_types_MINClass = new tAggregateRow_all_types_MIN();

        try {
            errorCode = null;
            tAggregateRow_all_types_MINClass
                    .tFileInputDelimited_2Process(globalMap);
            status = "end";
        } catch (TalendException e_tFileInputDelimited_2) {
            status = "failure";
            e_tFileInputDelimited_2.printStackTrace();
            globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

        } finally {
        }

        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory()
                - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out
                    .println((endUsedMemory - startUsedMemory)
                            + " bytes memory increase when running : tAggregateRow_all_types_MIN");
        }

        reset();

        if (errorCode == null) {
            return status != null && status.equals("failure") ? 1 : 0;
        } else {
            return errorCode.intValue();
        }
    }

    public static void evalParam(String arg) {
        if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            portStats = Integer.parseInt(arg.substring(12));
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue
                        .substring(index + 1));
            }
        }

    }

    private static void init() {
        errorCode = null;
        status = "";
    }

    private static void reset() {

        defaultProps.clear();
        context.clear();

        threadLocal = new ThreadLocal();
        currentComponent = "";
        start_Hash.clear();
        end_Hash.clear();
        ok_Hash.clear();
        globalMap.clear();
        watch = false;
        portStats = 3334;
        portTraces = 4334;
        clientHost = null;
        defaultClientHost = "localhost";
        contextStr = "local";
        pid = "0";
        rootPid = null;
        fatherPid = null;
        context_param.clear();
        System.gc();
    }
}
/************************************************************************************************
 * 428443 characters generated by Talend OpenStudio on the 30 octobre 2008
 * 11:38:25 CET
 ************************************************************************************************/
