package org.talend.designer.codegen.translators.file.management;

import org.talend.core.model.process.INode;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import org.talend.core.model.process.ElementParameterParser;

public class TFileUnarchiveBeginJava
{
  protected static String nl;
  public static synchronized TFileUnarchiveBeginJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TFileUnarchiveBeginJava result = new TFileUnarchiveBeginJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "      " + NL + "\t\tclass UnzippedFile_";
  protected final String TEXT_2 = " {" + NL + "\t\t\tpublic String fileName;" + NL + "\t\t\tpublic String filePath;" + NL + "\t\t\t" + NL + "\t\t\tpublic UnzippedFile_";
  protected final String TEXT_3 = "(String fileName, filePath) {" + NL + "\t\t\t\tthis.fileName = fileName;" + NL + "\t\t\t\tthis.filePath = filePath;\t\t\t\t" + NL + "\t\t\t} " + NL + "\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tclass Util_";
  protected final String TEXT_4 = NL + "        {" + NL + "        \tpublic java.util.List<UnzippedFile_";
  protected final String TEXT_5 = "> unzippedFiles = new java.util.List<UnzippedFile_";
  protected final String TEXT_6 = ">();" + NL + "        \t" + NL + "            public void deleteDir(java.io.File dir) {" + NL + "                if (dir.isDirectory()) {" + NL + "                    String[] children = dir.list();" + NL + "                    for (int i = 0; i < children.length; i++) {" + NL + "                       deleteDir(new java.io.File(dir, children[i]));               " + NL + "                    }" + NL + "                }" + NL + "                dir.delete();" + NL + "            }" + NL + "" + NL + "            public void repairDir(java.io.File dir) {" + NL + "                java.io.File parentFile = dir.getParentFile();" + NL + "        " + NL + "                if (parentFile != null) {                            " + NL + "                    if (parentFile.exists() && parentFile.isFile())" + NL + "                        parentFile.delete();" + NL + "                       " + NL + "                        repairDir(parentFile);" + NL + "                }" + NL + "            }" + NL + "" + NL + "            public void checkDir(java.io.File file)" + NL + "            {" + NL + "                if (file.exists()) {" + NL + "                    if (file.isDirectory())" + NL + "                        deleteDir(file);" + NL + "                } else {" + NL + "                    repairDir(file);" + NL + "                }" + NL + "            }" + NL + "            " + NL + "            public void output(String path, String fileName, java.io.InputStream is) throws Exception" + NL + "            {";
  protected final String TEXT_7 = "          " + NL + "               java.io.File f = new java.io.File(path,fileName);";
  protected final String TEXT_8 = "            " + NL + "                String tempName = fileName.replaceAll(\"\\\\\\\\\", \"/\");" + NL + "                int m = tempName.lastIndexOf('/');        " + NL + "                String shortName = tempName.substring(m!=-1? m+1 : 0);  " + NL + "  \t\t\t\tjava.io.File f = new java.io.File(path,shortName);  \t\t\t\t";
  protected final String TEXT_9 = NL + "\t\t\t\tcheckDir(f);" + NL + "             " + NL + "                f.getParentFile().mkdirs();" + NL + "                f.createNewFile();                " + NL + "                java.io.FileOutputStream fos = new java.io.FileOutputStream(f);" + NL + "                " + NL + "                " + NL + "                byte[] buffer = new byte[1024];" + NL + "                " + NL + "                for (int len = is.read(buffer, 0, 1024); len != -1; len = is.read(buffer, 0, 1024)) {" + NL + "                    fos.write(buffer, 0, len);" + NL + "                }" + NL + "                fos.close();" + NL + "                unzippedFiles.add(new UnzippedFile_";
  protected final String TEXT_10 = "(f.getName(), f.getAbsolutePath()));" + NL + "            }" + NL + "        } " + NL + "       " + NL + "\t\tUtil_";
  protected final String TEXT_11 = " util_";
  protected final String TEXT_12 = " = new Util_";
  protected final String TEXT_13 = "();" + NL + "        " + NL + "        String zipFileURL_";
  protected final String TEXT_14 = " = ";
  protected final String TEXT_15 = ";" + NL + "        zipFileURL_";
  protected final String TEXT_16 = " = zipFileURL_";
  protected final String TEXT_17 = ".toLowerCase();" + NL + "        String outputPath_";
  protected final String TEXT_18 = " = ";
  protected final String TEXT_19 = ";" + NL + "        " + NL + "        " + NL + "\t\t";
  protected final String TEXT_20 = "        " + NL + "        java.io.File file_";
  protected final String TEXT_21 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_22 = ");        " + NL + "        String name_";
  protected final String TEXT_23 = " = file_";
  protected final String TEXT_24 = ".getName();        " + NL + "\t\tint i_";
  protected final String TEXT_25 = " = 0;" + NL + "\t\tif (zipFileURL_";
  protected final String TEXT_26 = ".endsWith(\".tar.gz\"))  {" + NL + "\t\t\ti_";
  protected final String TEXT_27 = " = name_";
  protected final String TEXT_28 = ".length()-7;" + NL + "   \t\t} else {           " + NL + "            i_";
  protected final String TEXT_29 = " = name_";
  protected final String TEXT_30 = ".lastIndexOf('.');        " + NL + "            i_";
  protected final String TEXT_31 = " = i_";
  protected final String TEXT_32 = "!=-1? i_";
  protected final String TEXT_33 = " : name_";
  protected final String TEXT_34 = ".length();        " + NL + "        }    " + NL + "        String root_";
  protected final String TEXT_35 = " = name_";
  protected final String TEXT_36 = ".substring(0, i_";
  protected final String TEXT_37 = ");   " + NL + "        new java.io.File(outputPath_";
  protected final String TEXT_38 = ", root_";
  protected final String TEXT_39 = ").mkdir();" + NL + "        outputPath_";
  protected final String TEXT_40 = " = outputPath_";
  protected final String TEXT_41 = " +\"/\" + root_";
  protected final String TEXT_42 = ";";
  protected final String TEXT_43 = NL + NL + "\tif (zipFileURL_";
  protected final String TEXT_44 = ".endsWith(\".tar.gz\") || zipFileURL_";
  protected final String TEXT_45 = ".endsWith(\".tgz\")){   " + NL + "      " + NL + "        org.apache.tools.tar.TarInputStream zip_";
  protected final String TEXT_46 = " = new org.apache.tools.tar.TarInputStream(new java.util.zip.GZIPInputStream(new java.io.FileInputStream(zipFileURL_";
  protected final String TEXT_47 = ")));" + NL + "        " + NL + "        org.apache.tools.tar.TarEntry entry_";
  protected final String TEXT_48 = " = null;" + NL + "        while ((entry_";
  protected final String TEXT_49 = " = zip_";
  protected final String TEXT_50 = ".getNextEntry()) != null) { " + NL + "\t\t\tif (!entry_";
  protected final String TEXT_51 = ".isDirectory()) {" + NL + "                java.io.InputStream is_";
  protected final String TEXT_52 = " = zip_";
  protected final String TEXT_53 = ";" + NL + "                String filename_";
  protected final String TEXT_54 = " =  entry_";
  protected final String TEXT_55 = ".getName();" + NL + "\t\t\t\tutil_";
  protected final String TEXT_56 = ".output(outputPath_";
  protected final String TEXT_57 = ", filename_";
  protected final String TEXT_58 = ",is_";
  protected final String TEXT_59 = ");" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tzip_";
  protected final String TEXT_60 = ".close();" + NL + "" + NL + "\t} else if (zipFileURL_";
  protected final String TEXT_61 = ".endsWith(\".tar\")){ " + NL + "" + NL + "        org.apache.tools.tar.TarInputStream zip_";
  protected final String TEXT_62 = " = new org.apache.tools.tar.TarInputStream(new java.io.FileInputStream(zipFileURL_";
  protected final String TEXT_63 = "));" + NL + "        " + NL + "        org.apache.tools.tar.TarEntry entry_";
  protected final String TEXT_64 = " = null;" + NL + "        while ((entry_";
  protected final String TEXT_65 = " = zip_";
  protected final String TEXT_66 = ".getNextEntry()) != null) {             " + NL + "            if (!entry_";
  protected final String TEXT_67 = ".isDirectory()) {" + NL + "                java.io.InputStream is_";
  protected final String TEXT_68 = " = zip_";
  protected final String TEXT_69 = ";" + NL + "                String filename_";
  protected final String TEXT_70 = " =  entry_";
  protected final String TEXT_71 = ".getName();" + NL + "\t\t\t\tutil_";
  protected final String TEXT_72 = ".output(outputPath_";
  protected final String TEXT_73 = ", filename_";
  protected final String TEXT_74 = ",is_";
  protected final String TEXT_75 = ");" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tzip_";
  protected final String TEXT_76 = ".close();" + NL + "  \t}else if (zipFileURL_";
  protected final String TEXT_77 = ".endsWith(\".gz\")){ " + NL + "        java.util.zip.GZIPInputStream zip_";
  protected final String TEXT_78 = " = new java.util.zip.GZIPInputStream(new java.io.FileInputStream(new java.io.File(zipFileURL_";
  protected final String TEXT_79 = ")));" + NL + "        java.io.InputStream is_";
  protected final String TEXT_80 = " = zip_";
  protected final String TEXT_81 = ";" + NL + "        String fullName_";
  protected final String TEXT_82 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_83 = ").getName();  " + NL + "\t\tString filename_";
  protected final String TEXT_84 = " =  fullName_";
  protected final String TEXT_85 = ".substring(0, fullName_";
  protected final String TEXT_86 = ".length()-3);  " + NL + "\t\tutil_";
  protected final String TEXT_87 = ".output(outputPath_";
  protected final String TEXT_88 = ", filename_";
  protected final String TEXT_89 = ",is_";
  protected final String TEXT_90 = ");" + NL + "\t\tzip_";
  protected final String TEXT_91 = ".close();" + NL + "\t}else { " + NL + "\t\t//the others all use the ZIP to decompression" + NL + " \t\torg.apache.tools.zip.ZipFile zip_";
  protected final String TEXT_92 = " = new org.apache.tools.zip.ZipFile(zipFileURL_";
  protected final String TEXT_93 = ");" + NL + "        java.util.Enumeration enuFiles_";
  protected final String TEXT_94 = " = zip_";
  protected final String TEXT_95 = ".getEntries();" + NL + "        while (enuFiles_";
  protected final String TEXT_96 = ".hasMoreElements()) {" + NL + "            org.apache.tools.zip.ZipEntry entry_";
  protected final String TEXT_97 = " = (org.apache.tools.zip.ZipEntry) enuFiles_";
  protected final String TEXT_98 = ".nextElement();          " + NL + "            if (!entry_";
  protected final String TEXT_99 = ".isDirectory()) {" + NL + "                //get the input stream" + NL + "                java.io.InputStream is_";
  protected final String TEXT_100 = " = zip_";
  protected final String TEXT_101 = ".getInputStream(entry_";
  protected final String TEXT_102 = ");" + NL + "\t\t\t\tString filename_";
  protected final String TEXT_103 = " =  entry_";
  protected final String TEXT_104 = ".getName();" + NL + "\t\t\t\tutil_";
  protected final String TEXT_105 = ".output(outputPath_";
  protected final String TEXT_106 = ", filename_";
  protected final String TEXT_107 = ",is_";
  protected final String TEXT_108 = ");" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tzip_";
  protected final String TEXT_109 = ".close();" + NL + "\t}" + NL;
  protected final String TEXT_110 = NL + "\tfor (UnzippedFile_";
  protected final String TEXT_111 = " uf : util_";
  protected final String TEXT_112 = ".unzippedFiles) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_113 = "_CURRENT_FILE\", uf.fileName);" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_114 = "_CURRENT_FILEPATH\", uf.filePath);" + NL + "\t";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();	

	String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
	String zipFile = ElementParameterParser.getValue(node, "__ZIPFILE__");
	boolean rootName = ElementParameterParser.getValue(node, "__ROOTNAME__").equals("true");
	boolean extractPath = ElementParameterParser.getValue(node, "__EXTRACTPATH__").equals("true");	

    stringBuffer.append(TEXT_1);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_2);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_3);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_4);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_6);
    
	//deal with the path issue and get the outputstream
	if (extractPath==true) {

    stringBuffer.append(TEXT_7);
    
  	}else{

    stringBuffer.append(TEXT_8);
    
	}

    stringBuffer.append(TEXT_9);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_10);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_11);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_12);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_13);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_14);
    stringBuffer.append(zipFile );
    stringBuffer.append(TEXT_15);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_17);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_18);
    stringBuffer.append(directory );
    stringBuffer.append(TEXT_19);
    
	if (rootName==true) {

    stringBuffer.append(TEXT_20);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_22);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_23);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_24);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_26);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_27);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_28);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_29);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_30);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_32);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_33);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_34);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_37);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_40);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_41);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_42);
    
  }

    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_45);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_46);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_47);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_48);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_49);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_50);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_51);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_52);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_53);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_55);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_56);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_57);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_58);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_60);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_61);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_62);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_63);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_64);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_65);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_66);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_67);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_68);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_69);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_70);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_71);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_72);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_73);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_74);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_76);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_77);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_78);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_79);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_80);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_81);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_82);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_83);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_84);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_85);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_86);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_87);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_88);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_89);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_91);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_92);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_93);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_94);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_95);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_96);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_97);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_98);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_99);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_100);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_101);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_102);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_103);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_104);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_105);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_106);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_107);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_109);
    
	// iterate output

    stringBuffer.append(TEXT_110);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_111);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_112);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_113);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_114);
    return stringBuffer.toString();
  }
}
