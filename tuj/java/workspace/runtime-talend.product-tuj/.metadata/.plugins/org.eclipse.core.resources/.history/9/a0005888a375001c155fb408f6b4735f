// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package tuj_java.env;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Job: env Purpose: <br>
 * Description:  <br>
 * @author smallet@talend.com
 * @version 0.1
 * @status  
 */
 public class env {    
    // create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();

	private static final String jobName = "env";
	private static final String projectName = "TUJ_JAVA";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>(); 
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();


private class TalendException extends Exception {
	private Exception e = null;
	private env c = null;
	private TalendException(env c, Exception e) {
		this.e = e;
		this.c = c;
	}
	
	@Override
	public void printStackTrace() {
	    if (!(e instanceof TalendException || e instanceof TDieException)) {
	        System.err.println("Exception in component " + currentComponent);
	    }
	    if (!(e instanceof TDieException)) {
	        e.printStackTrace();
	    }
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(c, (Object[])null);
					break;
				}
			}


		} catch (java.lang.SecurityException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalArgumentException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalAccessException e) {
			this.e.printStackTrace();
		} catch (java.lang.reflect.InvocationTargetException e) {
			this.e.printStackTrace();
		}
		}
	}
}

public void tFileTouch_1_error() throws TalendException {
	end_Hash.put("tFileTouch_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tJava_1_error() throws TalendException {
	end_Hash.put("tJava_1", java.util.Calendar.getInstance().getTimeInMillis());
}


public void tFileTouch_1Process() throws TalendException {				
	try {
/**
 * [tFileTouch_1 begin ] start
 */



ok_Hash.put("tFileTouch_1", false);
start_Hash.put("tFileTouch_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tFileTouch_1";


/**
 * [tFileTouch_1 begin ] stop
 *//**
 * [tFileTouch_1 main ] start
 */

currentComponent="tFileTouch_1";

	     
        java.io.File file_tFileTouch_1 = new java.io.File( "/tmp/in.csv");
        boolean resulttFileTouch_1 = file_tFileTouch_1.createNewFile();
        if (!resulttFileTouch_1) {
        	file_tFileTouch_1.delete();
        	file_tFileTouch_1.createNewFile();
        }
/**
 * [tFileTouch_1 main ] stop
 *//**
 * [tFileTouch_1 end ] start
 */

currentComponent="tFileTouch_1";



ok_Hash.put("tFileTouch_1", true);
end_Hash.put("tFileTouch_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tFileTouch_1 end ] stop
 */

	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}


public void tJava_1Process() throws TalendException {				
	try {

		



/**
 * [tJava_1 begin ] start
 */



ok_Hash.put("tJava_1", false);
start_Hash.put("tJava_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tJava_1";



System.out.println("TUJ_TRUNK_PARAMS="+System.getenv("TUJ_TRUNK_PARAMS"));
System.out.println("$TUJ_TRUNK_PARAMS="+System.getenv("$TUJ_TRUNK_PARAMS"));
/**
 * [tJava_1 begin ] stop
 *//**
 * [tJava_1 main ] start
 */

currentComponent="tJava_1";


/**
 * [tJava_1 main ] stop
 */



/**
 * [tJava_1 end ] start
 */

currentComponent="tJava_1";



ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tJava_1 end ] stop
 */




		tFileTouch_1Process();

	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "Default";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
  
    private static java.util.Properties context_param = new java.util.Properties();
    
    public static String status= "";
    
    public static void main(String[] args){
        int exitCode = runJob(args);
        System.exit(exitCode);
    }
    
    public static int runJob(String[] args) {
    	for (String arg : args) {
    		evalParam(arg);
    	}
    	
    	if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	
    	pid = TalendString.getAsciiRandomString(6);
    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {
    		fatherPid = pid;
    	}
    	
    	try {
    		java.io.InputStream inContext = env.class.getClassLoader().getResourceAsStream("tuj_java/env/contexts/Default.properties");    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new java.util.Properties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = env.class.getClassLoader().getResourceAsStream("tuj_java/env/contexts/"+contextStr+".properties");
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
			
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}



	long end = 0;
	long start = java.util.Calendar.getInstance().getTimeInMillis();
	env envClass = new env();
	try {
		envClass.tJava_1Process();
	} catch(TalendException e) {
		status="failure";
		e.printStackTrace();
	} finally {	
		end = java.util.Calendar.getInstance().getTimeInMillis();
		if (watch) {
    		System.out.println((end-start)+" milliseconds");
	    }
        
	}
    if(errorCode == null) {
         return status != null && status.equals("failure") ? 1 : 0;	
    } else {   
         return errorCode.intValue();
    }
  }
	
	public static void evalParam(String arg) {	   
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}
    	
	}
}
/************************************************************************************************
 *     8433 characters generated by Talend OpenStudio 
 *     on the October 8, 2007 3:36:53 PM CEST
 ************************************************************************************************/