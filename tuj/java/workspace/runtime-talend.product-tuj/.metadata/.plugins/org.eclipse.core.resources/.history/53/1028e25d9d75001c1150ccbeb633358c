// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.2.0.qualifier).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package tuj_java.bug2189_tfileoutputpositional;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Job: Bug2189_tFileOutputPositional Purpose: <br>
 * Description:  <br>
 * @author smallet@talend.com
 * @version 0.1
 * @status  
 */
 public class Bug2189_tFileOutputPositional {    
    // create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();

	private static final String jobName = "Bug2189_tFileOutputPositional";
	private static final String projectName = "TUJ_JAVA";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>(); 
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();


	AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils(); 
private class TalendException extends Exception {
	private Exception e = null;
	private Bug2189_tFileOutputPositional c = null;
	private TalendException(Bug2189_tFileOutputPositional c, Exception e) {
		this.e = e;
		this.c = c;
	}
	
	@Override
	public void printStackTrace() {
	    if (!(e instanceof TalendException || e instanceof TDieException)) {
	        System.err.println("Exception in component " + currentComponent);
	    }
	    if (!(e instanceof TDieException)) {
	        e.printStackTrace();
	    }
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(c, (Object[])null);
					break;
				}
			}

        if(!(e instanceof TDieException)){
			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", e.getMessage());
			tAssertCatcher_1Process();
        }

		} catch (java.lang.SecurityException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalArgumentException e) {
			this.e.printStackTrace();
		} catch (java.lang.IllegalAccessException e) {
			this.e.printStackTrace();
		} catch (java.lang.reflect.InvocationTargetException e) {
			this.e.printStackTrace();
		}
		catch (TalendException e) {
		// do nothing
		}
		}
	}
}

public void tAssertCatcher_1_error() throws TalendException {
	end_Hash.put("tAssertCatcher_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tMysqlOutput_1_error() throws TalendException {
	end_Hash.put("tMysqlOutput_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tFileCompare_1_error() throws TalendException {
	end_Hash.put("tFileCompare_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tAssert_1_error() throws TalendException {
	end_Hash.put("tAssert_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tFileInputCSV_1_error() throws TalendException {
	end_Hash.put("tFileInputCSV_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tContextLoad_1_error() throws TalendException {
	end_Hash.put("tContextLoad_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tFileInputDelimited_1_error() throws TalendException {
	end_Hash.put("tFileInputDelimited_1", java.util.Calendar.getInstance().getTimeInMillis());
}
public void tFileOutputPositional_1_error() throws TalendException {
	end_Hash.put("tFileOutputPositional_1", java.util.Calendar.getInstance().getTimeInMillis());
}


private class row2Struct {
    
	
    	private java.util.Date moment;
	
    	private String pid;
	
    	private String project;
	
    	private String job;
	
    	private String language;
	
    	private String origin;
	
    	private String status;
	
    	private String substatus;
	
    	private String description;
	
    
    
}

public void tAssertCatcher_1Process() throws TalendException {				
	try {

		row2Struct row2 = new row2Struct();

/**
 * [tMysqlOutput_1 begin ] start
 */



ok_Hash.put("tMysqlOutput_1", false);
start_Hash.put("tMysqlOutput_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tMysqlOutput_1";



 

int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		java.lang.Class.forName("org.gjt.mm.mysql.Driver");
		String url_tMysqlOutput_1 = "jdbc:mysql://" + (String)((String)context.getProperty("result_host")) + ":" + (String)((String)context.getProperty("result_port")) + "/" + (String)((String)context.getProperty("result_schema"));
		String dbUser_tMysqlOutput_1 = (String)((String)context.getProperty("result_username"));
		String dbPwd_tMysqlOutput_1 = (String)((String)context.getProperty("result_password"));
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1,dbUser_tMysqlOutput_1,dbPwd_tMysqlOutput_1);
		



java.sql.PreparedStatement pstmt_tMysqlOutput_1 =null;
			
	
pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement("INSERT INTO `"+(String)((String)context.getProperty("result_table"))+"` (`moment`,`pid`,`project`,`job`,`language`,`origin`,`status`,`substatus`,`description`) VALUES (?,?,?,?,?,?,?,?,?)");

	

int commitEvery_tMysqlOutput_1 = 100;

int commitCounter_tMysqlOutput_1 = 0;

if(conn_tMysqlOutput_1.getAutoCommit())
{
	conn_tMysqlOutput_1.setAutoCommit(false);
}
	
/**
 * [tMysqlOutput_1 begin ] stop
 */


/**
 * [tAssertCatcher_1 begin ] start
 */



ok_Hash.put("tAssertCatcher_1", false);
start_Hash.put("tAssertCatcher_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tAssertCatcher_1";


	for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1.getMessages()) {
		row2.moment = acm.getMoment();
		row2.pid = acm.getPid();
		row2.project = acm.getProject();
		row2.job = acm.getJob();
		row2.language = acm.getLanguage();
		
		row2.origin = (acm.getOrigin()==null || acm.getOrigin().length()<1 ? null : acm.getOrigin());
	
    	row2.status = acm.getStatus();
		row2.substatus = acm.getSubstatus();
		row2.description = acm.getDescription();
/**
 * [tAssertCatcher_1 begin ] stop
 *//**
 * [tAssertCatcher_1 main ] start
 */

currentComponent="tAssertCatcher_1";


/**
 * [tAssertCatcher_1 main ] stop
 */
/**
 * [tMysqlOutput_1 main ] start
 */

currentComponent="tMysqlOutput_1";


    whetherReject_tMysqlOutput_1 = false;

	
	if(row2.moment!=null){
		// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
		date_tMysqlOutput_1 = row2.moment.getTime();
		if (date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
			pstmt_tMysqlOutput_1.setString(1, "0000-00-00 00:00:00");
		} else {
			pstmt_tMysqlOutput_1.setTimestamp(1, new java.sql.Timestamp(date_tMysqlOutput_1));
		}
	}else{
	
		pstmt_tMysqlOutput_1.setNull(1,java.sql.Types.DATE);
		
	}
	

	
if(row2.pid==null){
	pstmt_tMysqlOutput_1.setNull(2,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(2,row2.pid);
	
		
}
	

	
if(row2.project==null){
	pstmt_tMysqlOutput_1.setNull(3,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(3,row2.project);
	
		
}
	

	
if(row2.job==null){
	pstmt_tMysqlOutput_1.setNull(4,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(4,row2.job);
	
		
}
	

	
if(row2.language==null){
	pstmt_tMysqlOutput_1.setNull(5,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(5,row2.language);
	
		
}
	

	
if(row2.origin==null){
	pstmt_tMysqlOutput_1.setNull(6,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(6,row2.origin);
	
		
}
	

	
if(row2.status==null){
	pstmt_tMysqlOutput_1.setNull(7,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(7,row2.status);
	
		
}
	

	
if(row2.substatus==null){
	pstmt_tMysqlOutput_1.setNull(8,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(8,row2.substatus);
	
		
}
	

	
if(row2.description==null){
	pstmt_tMysqlOutput_1.setNull(9,java.sql.Types.VARCHAR);
	

}else{

	
	pstmt_tMysqlOutput_1.setString(9,row2.description);
	
		
}
	
    try{
        insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmt_tMysqlOutput_1.executeUpdate();
        nb_line_tMysqlOutput_1++;
    }catch(Exception e)
    {
        whetherReject_tMysqlOutput_1 = true;
            throw(e);
    }
	
    	    commitCounter_tMysqlOutput_1++;
    
            if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1){
            
            	conn_tMysqlOutput_1.commit();
            	
            	commitCounter_tMysqlOutput_1=0;
            
            }	

	
/**
 * [tMysqlOutput_1 main ] stop
 */


/**
 * [tAssertCatcher_1 end ] start
 */

currentComponent="tAssertCatcher_1";

	}

ok_Hash.put("tAssertCatcher_1", true);
end_Hash.put("tAssertCatcher_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tAssertCatcher_1 end ] stop
 */
/**
 * [tMysqlOutput_1 end ] start
 */

currentComponent="tMysqlOutput_1";


		pstmt_tMysqlOutput_1.close();
		

		conn_tMysqlOutput_1.commit();
			
    	conn_tMysqlOutput_1 .close();
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;

globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tMysqlOutput_1 end ] stop
 */




	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}


private class row5Struct {
    
	
    	private String file;
	
    	private String file_ref;
	
    	private java.util.Date moment;
	
    	private String job;
	
    	private String component;
	
    	private Integer differ;
	
    	private String message;
	
    
    
}

public void tFileCompare_1Process() throws TalendException {				
	try {

		row5Struct row5 = new row5Struct();

/**
 * [tAssert_1 begin ] start
 */



ok_Hash.put("tAssert_1", false);
start_Hash.put("tAssert_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tAssert_1";


/**
 * [tAssert_1 begin ] stop
 */


/**
 * [tFileCompare_1 begin ] start
 */



ok_Hash.put("tFileCompare_1", false);
start_Hash.put("tFileCompare_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tFileCompare_1";


/**
 * [tFileCompare_1 begin ] stop
 *//**
 * [tFileCompare_1 main ] start
 */

currentComponent="tFileCompare_1";



boolean result_tFileCompare_1 = true;
java.nio.channels.FileChannel fileChannel_tFileCompare_1 = new java.io.FileInputStream((String)((String)context.getProperty("data_dir")) + "components/tFileOutputPositional/Bug2189_tFileOutputPositional/ref1.csv").getChannel();
long fileLength_tFileCompare_1 = fileChannel_tFileCompare_1.size();
fileChannel_tFileCompare_1.close();
java.nio.channels.FileChannel fileChannelRef_tFileCompare_1 = new java.io.FileInputStream((String)((String)context.getProperty("data_output_dir")) + pid + "/out1.csv").getChannel();
long fileRefLength_tFileCompare_1 = fileChannelRef_tFileCompare_1.size();
fileChannelRef_tFileCompare_1.close();
if(fileLength_tFileCompare_1 != fileRefLength_tFileCompare_1)
{
	result_tFileCompare_1 = false;
}
else
{
	
		java.io.BufferedReader file_tFileCompare_1 = new java.io.BufferedReader(new java.io.FileReader((String)((String)context.getProperty("data_dir")) + "components/tFileOutputPositional/Bug2189_tFileOutputPositional/ref1.csv"));
		java.io.BufferedReader fileRef_tFileCompare_1 = new java.io.BufferedReader(new java.io.FileReader((String)((String)context.getProperty("data_output_dir")) + pid + "/out1.csv"));
		String content_tFileCompare_1 = null,contentRef_tFileCompare_1 = null;
		while((content_tFileCompare_1 = file_tFileCompare_1.readLine()) != null && (contentRef_tFileCompare_1 = fileRef_tFileCompare_1.readLine()) != null)
		{
			if(content_tFileCompare_1.compareTo(contentRef_tFileCompare_1) != 0)
			{
				result_tFileCompare_1 = false;
				break;
			}
		}
		file_tFileCompare_1.close();
		fileRef_tFileCompare_1.close();
		
}

String messagetFileCompare_1 = "";
if (result_tFileCompare_1) {
	messagetFileCompare_1 = "[job " + jobName + "] Files are identical";
	
} else {
	messagetFileCompare_1 = "[job " + jobName + "] Files differ";
}
globalMap.put("tFileCompare_1_DIFFERENCE",result_tFileCompare_1);

		row5.file = (String)((String)context.getProperty("data_dir")) + "components/tFileOutputPositional/Bug2189_tFileOutputPositional/ref1.csv";
		row5.file_ref = (String)((String)context.getProperty("data_output_dir")) + pid + "/out1.csv";	
    	row5.moment = java.util.Calendar.getInstance().getTime();
    	row5.job = jobName;
		row5.component = currentComponent;
		row5.differ = (result_tFileCompare_1)?0:1;
		row5.message = messagetFileCompare_1;

/**
 * [tFileCompare_1 main ] stop
 */
/**
 * [tAssert_1 main ] start
 */

currentComponent="tAssert_1";



 if(row5.differ==0) {
	tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Ok", "--", "tIntervalMatch-doesn't lookup one row in the lookup table");
	tAssertCatcher_1Process();
}else {
	tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Failed", "Test logically failed", "tIntervalMatch-doesn't lookup one row in the lookup table");
	tAssertCatcher_1Process();	
}					
/**
 * [tAssert_1 main ] stop
 */


/**
 * [tFileCompare_1 end ] start
 */

currentComponent="tFileCompare_1";



ok_Hash.put("tFileCompare_1", true);
end_Hash.put("tFileCompare_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tFileCompare_1 end ] stop
 */
/**
 * [tAssert_1 end ] start
 */

currentComponent="tAssert_1";



ok_Hash.put("tAssert_1", true);
end_Hash.put("tAssert_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tAssert_1 end ] stop
 */




	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}


private class row6Struct {
    
	
    	private String key;
	
    	private String value;
	
    
    
}

public void tFileInputCSV_1Process() throws TalendException {				
	try {

		row6Struct row6 = new row6Struct();

/**
 * [tContextLoad_1 begin ] start
 */



ok_Hash.put("tContextLoad_1", false);
start_Hash.put("tContextLoad_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tContextLoad_1";

	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;
/**
 * [tContextLoad_1 begin ] stop
 */






/**
 * [tFileInputCSV_1 begin ] start
 */



ok_Hash.put("tFileInputCSV_1", false);
start_Hash.put("tFileInputCSV_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tFileInputCSV_1";

		
		int nb_line_tFileInputCSV_1 = 0;
		int footer_tFileInputCSV_1 = 0;
		int totalLinetFileInputCSV_1 = 0;
		int limittFileInputCSV_1 = -1;
		int lastLinetFileInputCSV_1 = -1;	
		
		com.csvreader.CsvReader csvReadertFileInputCSV_1=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
                new java.io.FileInputStream(/** Start field tFileInputCSV_1:FILENAME */(String)((String)context.getProperty("param_file_path"))/** End field tFileInputCSV_1:FILENAME */),"ISO-8859-15")), ',');
                
        csvReadertFileInputCSV_1.setSkipEmptyRecords(true);
        csvReadertFileInputCSV_1.setTextQualifier('"');                

            csvReadertFileInputCSV_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);       

		String[] rowtFileInputCSV_1=null;
		
		if(footer_tFileInputCSV_1 > 0){
		
            while (csvReadertFileInputCSV_1.readRecord()) {
				rowtFileInputCSV_1=csvReadertFileInputCSV_1.getValues();
				if(!(rowtFileInputCSV_1.length == 1 && rowtFileInputCSV_1[0].equals("\015"))){//empty line when row separator is '\n'
                
                	totalLinetFileInputCSV_1++;
                
				}
                
            }
            int lastLineTemptFileInputCSV_1 = totalLinetFileInputCSV_1 - footer_tFileInputCSV_1   < 0? 0 : totalLinetFileInputCSV_1 - footer_tFileInputCSV_1 ;
            if(lastLinetFileInputCSV_1 > 0){
                lastLinetFileInputCSV_1 = lastLinetFileInputCSV_1 < lastLineTemptFileInputCSV_1 ? lastLinetFileInputCSV_1 : lastLineTemptFileInputCSV_1; 
            }else {
                lastLinetFileInputCSV_1 = lastLineTemptFileInputCSV_1;
            }
         
          	csvReadertFileInputCSV_1.close();
          
         	csvReadertFileInputCSV_1=new com.csvreader.CsvReader(new java.io.BufferedReader(new java.io.InputStreamReader(
                  new java.io.FileInputStream(/** Start field tFileInputCSV_1:FILENAME */(String)((String)context.getProperty("param_file_path"))/** End field tFileInputCSV_1:FILENAME */),"ISO-8859-15")), ',');
        csvReadertFileInputCSV_1.setSkipEmptyRecords(true);
        csvReadertFileInputCSV_1.setTextQualifier('"');                

            csvReadertFileInputCSV_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);  
          
        }
        
        
        
        int currentLinetFileInputCSV_1 = 0;
        int outputLinetFileInputCSV_1 = 0;
            
        while (csvReadertFileInputCSV_1.readRecord()) { 
        
        	rowtFileInputCSV_1=csvReadertFileInputCSV_1.getValues();
        	
        	if(rowtFileInputCSV_1.length == 1 && rowtFileInputCSV_1[0].equals("\015")){//empty line when row separator is '\n'
        		continue;
        	}
        	
        	
        	currentLinetFileInputCSV_1++;
        	if(currentLinetFileInputCSV_1 < 0+1) {
                continue;
            }
            
            if(lastLinetFileInputCSV_1 > -1 && currentLinetFileInputCSV_1 > lastLinetFileInputCSV_1) {
                break;
            }
            outputLinetFileInputCSV_1++;
            if(limittFileInputCSV_1!=-1&& outputLinetFileInputCSV_1 > limittFileInputCSV_1){
                break;
            }  
                                                                      				
				
			if(rowtFileInputCSV_1.length == 1 && rowtFileInputCSV_1[0].equals("\015")){//empty line when row separator is '\n'
				

				row6.key = null;
				

				row6.value = null;
				
				
			}else{
			
						
			
				if(0 < rowtFileInputCSV_1.length){				
					row6.key = rowtFileInputCSV_1[0];	
								
				}else{										

				row6.key = null;

				}

						
			
				if(1 < rowtFileInputCSV_1.length){				
					row6.value = rowtFileInputCSV_1[1];	
								
				}else{										

				row6.value = null;

				}


			}


/**
 * [tFileInputCSV_1 begin ] stop
 *//**
 * [tFileInputCSV_1 main ] start
 */

currentComponent="tFileInputCSV_1";


/**
 * [tFileInputCSV_1 main ] stop
 */
/**
 * [tContextLoad_1 main ] start
 */

currentComponent="tContextLoad_1";

		//////////////////////////    		
	String key_tContextLoad_1 = null;				   				
	if(row6.key != null) {
    	key_tContextLoad_1 =row6.key;					
	}
 				
	String value_tContextLoad_1 = null;				   				
	if(row6.value != null) {
    	value_tContextLoad_1 =row6.value;					
	}
 				

	if (context.getProperty(key_tContextLoad_1)!=null)
	{
		context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
		assignList_tContextLoad_1.add(key_tContextLoad_1);	
		System.out.println("tContextLoad_1 set key " + key_tContextLoad_1 + " with value " + value_tContextLoad_1);
	}
	else  {
		System.err.println("tContextLoad_1, invalid parameter name : " + key_tContextLoad_1);
	}
	nb_line_tContextLoad_1++;    	
    	//////////////////////////
/**
 * [tContextLoad_1 main ] stop
 */






/**
 * [tFileInputCSV_1 end ] start
 */

currentComponent="tFileInputCSV_1";


				nb_line_tFileInputCSV_1++;
			}
			csvReadertFileInputCSV_1.close();
			globalMap.put("tFileInputCSV_1_NB_LINE",nb_line_tFileInputCSV_1);


ok_Hash.put("tFileInputCSV_1", true);
end_Hash.put("tFileInputCSV_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tFileInputCSV_1 end ] stop
 */
/**
 * [tContextLoad_1 end ] start
 */

currentComponent="tContextLoad_1";

  
    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tContextLoad_1 end ] stop
 */







		tFileInputDelimited_1Process();

	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}


private class row1Struct {
    
	
    	private Integer id;
	
    	private String Firstname;
	
    
    
}

public void tFileInputDelimited_1Process() throws TalendException {				
	try {

		row1Struct row1 = new row1Struct();

/**
 * [tFileOutputPositional_1 begin ] start
 */



ok_Hash.put("tFileOutputPositional_1", false);
start_Hash.put("tFileOutputPositional_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tFileOutputPositional_1";


//create directory only if not exists
		 String fileNewName_tFileOutputPositional_1 = (String)((String)context.getProperty("data_output_dir")) + pid + "/out1.csv";
		 java.io.File createFiletFileOutputPositional_1 = new java.io.File(fileNewName_tFileOutputPositional_1);
		 if(!createFiletFileOutputPositional_1.exists()){
		 	(new java.io.File(fileNewName_tFileOutputPositional_1.substring(0,fileNewName_tFileOutputPositional_1.lastIndexOf("/")))).mkdirs();
		 }
		int nb_line_tFileOutputPositional_1 = 0;
		final java.io.BufferedWriter outtFileOutputPositional_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream((String)((String)context.getProperty("data_output_dir")) + pid + "/out1.csv", false),"ISO-8859-15"));
        
        

/**
 * [tFileOutputPositional_1 begin ] stop
 */






/**
 * [tFileInputDelimited_1 begin ] start
 */



ok_Hash.put("tFileInputDelimited_1", false);
start_Hash.put("tFileInputDelimited_1", java.util.Calendar.getInstance().getTimeInMillis());
currentComponent="tFileInputDelimited_1";

org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((String)((String)context.getProperty("data_dir")) + "components/tFileOutputPositional/Bug2189_tFileOutputPositional/in1.csv","US-ASCII",";","\n",false,0,0,-1,-1);
while (fid_tFileInputDelimited_1.nextRecord()) {String temp_tFileInputDelimited_1 = "";
				temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1.get(0);
if(temp_tFileInputDelimited_1.length() > 0) {row1.id = ParserUtils.parseTo_Integer(temp_tFileInputDelimited_1);} else {						row1.id = null;}
row1.Firstname = fid_tFileInputDelimited_1.get(1);
/**
 * [tFileInputDelimited_1 begin ] stop
 *//**
 * [tFileInputDelimited_1 main ] start
 */

currentComponent="tFileInputDelimited_1";


/**
 * [tFileInputDelimited_1 main ] stop
 */
/**
 * [tFileOutputPositional_1 main ] start
 */

currentComponent="tFileOutputPositional_1";


				String tempStringMtFileOutputPositional_1= null;
				
				int tempLengthMtFileOutputPositional_1= 0;
				
				StringBuilder sb_tFileOutputPositional_1 = new StringBuilder();
				
				
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row1.id == null) ? 
					"": String.valueOf(row1.id) ;
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
            	if (tempLengthMtFileOutputPositional_1 >=2) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<2){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 2-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
				
				
				
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row1.Firstname == null) ? 
					"": row1.Firstname ;
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
            	if (tempLengthMtFileOutputPositional_1 >=4) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<4){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 4-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
				
			sb_tFileOutputPositional_1.append("\n");
			outtFileOutputPositional_1.write(sb_tFileOutputPositional_1.toString());
			nb_line_tFileOutputPositional_1++;
/**
 * [tFileOutputPositional_1 main ] stop
 */






/**
 * [tFileInputDelimited_1 end ] start
 */

currentComponent="tFileInputDelimited_1";

}
fid_tFileInputDelimited_1.close();
globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
  

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tFileInputDelimited_1 end ] stop
 */
/**
 * [tFileOutputPositional_1 end ] start
 */

currentComponent="tFileOutputPositional_1";

	outtFileOutputPositional_1.close();
	globalMap.put("tFileOutputPositional_1_NB_LINE",nb_line_tFileOutputPositional_1);

ok_Hash.put("tFileOutputPositional_1", true);
end_Hash.put("tFileOutputPositional_1", java.util.Calendar.getInstance().getTimeInMillis());

/**
 * [tFileOutputPositional_1 end ] stop
 */







		tFileCompare_1Process();

	
	} catch(Exception e) {	
		throw new TalendException(this, e);		
	}
}
    public static boolean watch = false;
    public static int portStats = 3334;
    public static int portTraces = 4334;
    public static String clientHost;
    public static String defaultClientHost = "localhost";
    public static String contextStr = "smallet";
    public static String pid = "0";
    public static String rootPid = null;
    public static String fatherPid = null;
  
    private static java.util.Properties context_param = new java.util.Properties();
    
    public static String status= "";
    
    public static void main(String[] args){
        int exitCode = runJob(args);
        System.exit(exitCode);
    }
    
    public static int runJob(String[] args) {
    	for (String arg : args) {
    		evalParam(arg);
    	}
    	
    	if(clientHost == null) {
    		clientHost = defaultClientHost;
    	}
    	
    	
    	pid = TalendString.getAsciiRandomString(6);
    	if (rootPid==null) {
    		rootPid = pid;
    	}
    	if (fatherPid==null) {
    		fatherPid = pid;
    	}
    	
    	try {
    		java.io.InputStream inContext = Bug2189_tFileOutputPositional.class.getClassLoader().getResourceAsStream("tuj_java/bug2189_tfileoutputpositional/contexts/Default.properties");    		
    		if (inContext!=null) {
	    		defaultProps.load(inContext);
    			inContext.close();
	    		context = new java.util.Properties(defaultProps);
	    	}
    		
    		if (contextStr.compareTo("Default")!=0) {
    			inContext = Bug2189_tFileOutputPositional.class.getClassLoader().getResourceAsStream("tuj_java/bug2189_tfileoutputpositional/contexts/"+contextStr+".properties");
    			if (inContext!=null) {
					context.load(inContext);
					inContext.close();
				}
			}
			
			if(!context_param.isEmpty()) {						
			    context.putAll(context_param);		
			}
			
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextStr);
    		ie.printStackTrace();
    	}



	long end = 0;
	long start = java.util.Calendar.getInstance().getTimeInMillis();
	Bug2189_tFileOutputPositional Bug2189_tFileOutputPositionalClass = new Bug2189_tFileOutputPositional();
	try {
		Bug2189_tFileOutputPositionalClass.tFileInputCSV_1Process();
	} catch(TalendException e) {
		status="failure";
		e.printStackTrace();
	} finally {	
		end = java.util.Calendar.getInstance().getTimeInMillis();
		if (watch) {
    		System.out.println((end-start)+" milliseconds");
	    }
        
	}
    if(errorCode == null) {
         return status != null && status.equals("failure") ? 1 : 0;	
    } else {   
         return errorCode.intValue();
    }
  }
	
	public static void evalParam(String arg) {	   
		if (arg.startsWith("--watch")) {
    		watch = true;
    	} else if (arg.startsWith("--stat_port=")) {
    		portStats = Integer.parseInt(arg.substring(12));
    	} else if (arg.startsWith("--trace_port=")) {
    		portTraces = Integer.parseInt(arg.substring(13));
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--context=")) {
    		contextStr = arg.substring(10);
    	} else if (arg.startsWith("--father_pid=")) {
    		fatherPid = arg.substring(13);
    	} else if (arg.startsWith("--root_pid=")) {
    		rootPid = arg.substring(11);
    	} else if (arg.startsWith("--context_param")) {   		 
            String keyValue = arg.substring(16);           
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
    	}
    	
	}
}
/************************************************************************************************
 *     31694 characters generated by Talend OpenStudio 
 *     on the October 8, 2007 2:52:45 PM CEST
 ************************************************************************************************/